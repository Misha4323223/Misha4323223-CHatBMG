#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ G4F: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ vs –ø–ª–∞—Ç–Ω—ã–µ
"""

import g4f
import inspect

def analyze_providers():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã G4F"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    provider_names = [name for name in dir(g4f.Provider) if not name.startswith('_') and name[0].isupper()]
    
    free_providers = []
    api_key_providers = []
    unknown_providers = []
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(provider_names)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ G4F...\n")
    
    for name in provider_names:
        try:
            provider = getattr(g4f.Provider, name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å API –∫–ª—é—á–∞
            needs_auth = False
            
            if hasattr(provider, 'needs_auth'):
                needs_auth = provider.needs_auth
            elif hasattr(provider, 'api_key'):
                needs_auth = True
            elif hasattr(provider, 'auth'):
                needs_auth = True
            elif hasattr(provider, 'headers') and provider.headers:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Authorization
                headers_str = str(provider.headers).lower()
                if 'authorization' in headers_str or 'api-key' in headers_str:
                    needs_auth = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            name_lower = name.lower()
            if any(keyword in name_lower for keyword in ['api', 'account', 'pro']):
                needs_auth = True
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            if needs_auth:
                api_key_providers.append(name)
            else:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
                known_free = [
                    'freegpt', 'you', 'duckduckgo', 'ddg', 'huggingchat', 
                    'blackbox', 'liaobots', 'phind', 'gemini', 'geminipro'
                ]
                if any(free_name in name_lower for free_name in known_free):
                    free_providers.append(name)
                else:
                    unknown_providers.append(name)
                    
        except Exception as e:
            unknown_providers.append(f"{name} (–æ—à–∏–±–∫–∞: {str(e)[:50]})")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üÜì –ë–ï–°–ü–õ–ê–¢–ù–´–ï –ü–†–û–í–ê–ô–î–ï–†–´:")
    for provider in sorted(free_providers):
        print(f"  ‚úÖ {provider}")
    
    print(f"\nüí∞ –ü–õ–ê–¢–ù–´–ï/API –ü–†–û–í–ê–ô–î–ï–†–´:")
    for provider in sorted(api_key_providers):
        print(f"  üí≥ {provider}")
    
    print(f"\n‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –ü–†–û–í–ê–ô–î–ï–†–´:")
    for provider in sorted(unknown_providers):
        print(f"  ü§î {provider}")
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –í—Å–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {len(provider_names)}")
    print(f"  –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {len(free_providers)}")
    print(f"  –ü–ª–∞—Ç–Ω—ã—Ö: {len(api_key_providers)}")
    print(f"  –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö: {len(unknown_providers)}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    best_free = [p for p in free_providers if any(
        keyword in p.lower() for keyword in ['freegpt', 'you', 'huggingchat', 'liaobots', 'blackbox']
    )]
    
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ë–ï–°–ü–õ–ê–¢–ù–´–ï –ü–†–û–í–ê–ô–î–ï–†–´:")
    for provider in best_free:
        print(f"  üî• {provider}")
    
    return {
        'free': free_providers,
        'paid': api_key_providers,
        'unknown': unknown_providers,
        'best_free': best_free
    }

if __name__ == '__main__':
    results = analyze_providers()