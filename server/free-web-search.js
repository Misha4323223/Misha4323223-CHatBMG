/**
 * –ú–æ—â–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ API –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import fetch from 'node-fetch';

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
async function searchRealTimeInfo(query) {
    try {
        console.log('üîç [SEARCH] === –ù–ê–ß–ò–ù–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö ===');
        console.log('üîç [SEARCH] –ó–∞–ø—Ä–æ—Å:', query);
        
        const results = [];
        const searchTerms = query.toLowerCase();
        
        // 1. –ù–ê–°–¢–û–Ø–©–ò–ô –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        if (searchTerms.includes('–º–∞–≥–∞–∑–∏–Ω') || searchTerms.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω') || 
            searchTerms.includes('–∫–∞—Ñ–µ') || searchTerms.includes('–≥–¥–µ') || 
            searchTerms.includes('–∞–¥—Ä–µ—Å') || searchTerms.includes('–Ω–∞–π–¥–∏') ||
            searchTerms.includes('–æ–¥–µ–∂–¥–∞') || searchTerms.includes('—Ç–æ—Ä–≥–æ–≤—ã–π') ||
            searchTerms.includes('–∞–ø—Ç–µ–∫–∞') || searchTerms.includes('–±–∞–Ω–∫') ||
            searchTerms.includes('—Å–∞–ª–æ–Ω') || searchTerms.includes('—Ü–µ–Ω—Ç—Ä')) {
            
            console.log('üîç [MAIN] –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫...');
            
            // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            const placeResults = await searchPlaces(query);
            const ddgResults = await searchDuckDuckGo(query);
            const russianResults = await searchRussianServices(query);
            
            results.push(...placeResults);
            results.push(...ddgResults);
            results.push(...russianResults);
            
            console.log(`üîç [MAIN] –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
        }
        
        // 2. –ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã
        if (searchTerms.includes('–ø–æ–≥–æ–¥–∞') || searchTerms.includes('—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞') ||
            searchTerms.includes('–ø—Ä–æ–≥–Ω–æ–∑')) {
            const weatherResults = await searchWeather(query);
            results.push(...weatherResults);
        }
        
        // 3. –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        if (searchTerms.includes('–Ω–æ–≤–æ—Å—Ç') || searchTerms.includes('—Å–æ–±—ã—Ç–∏') ||
            searchTerms.includes('—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç')) {
            const newsResults = await searchNews(query);
            results.push(...newsResults);
        }
        
        // 4. –û–±—â–∏–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if (results.length === 0) {
            const webResults = await searchGeneral(query);
            results.push(...webResults);
        }
        
        console.log('üîç [SEARCH] –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', results.length);
        
        return {
            success: results.length > 0,
            results: results,
            provider: 'FreeSearch'
        };
        
    } catch (error) {
        console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'FreeSearch'
        };
    }
}

/**
 * –ü–æ–∏—Å–∫ –º–µ—Å—Ç —á–µ—Ä–µ–∑ OpenStreetMap (–ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
 */
async function searchPlaces(query) {
    try {
        console.log('üîç [PLACES] –ü–æ–∏—Å–∫ –º–µ—Å—Ç –¥–ª—è:', query);
        
        // –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        let searchQuery = query;
        
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω—ã, –¥–µ–ª–∞–µ–º –µ–≥–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º
        if (query.toLowerCase().includes('–º–∞–≥–∞–∑–∏–Ω')) {
            const cityMatch = query.match(/(–≤|–æ–∫–æ–ª–æ|—Ä—è–¥–æ–º)\s+([–∞-—è—ë\s\-]+)/i);
            if (cityMatch) {
                const city = cityMatch[2].trim();
                searchQuery = `shop=clothes ${city} —Ä–æ—Å—Å–∏—è`;
            }
        }
        
        const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(searchQuery)}&format=json&limit=20&addressdetails=1&countrycodes=ru&extratags=1&amenity=shop`;
        
        const response = await fetch(url, {
            headers: {
                'User-Agent': 'BOOOMERANGS-Search/1.0'
            }
        });
        
        if (!response.ok) {
            console.log('üîç [PLACES] OpenStreetMap –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return [];
        }
        
        const data = await response.json();
        console.log('üîç [PLACES] –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç OSM:', data.length);
        console.log('üîç [PLACES] URL –∑–∞–ø—Ä–æ—Å–∞:', url);
        if (data.length > 0) {
            console.log('üîç [PLACES] –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', data[0]);
        } else {
            console.log('üîç [PLACES] –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º');
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const searchResults = data.slice(0, 8).map(place => {
            const name = place.display_name.split(',')[0];
            const address = place.display_name;
            
            // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            let description = `üìç ${address}`;
            if (place.extratags?.phone) description += `\nüìû ${place.extratags.phone}`;
            if (place.extratags?.website) description += `\nüåê ${place.extratags.website}`;
            if (place.extratags?.opening_hours) description += `\nüïê ${place.extratags.opening_hours}`;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –¥–ª—è –∏–∫–æ–Ω–∫–∏
            let icon = 'üìç';
            if (name.toLowerCase().includes('–º–∞–≥–∞–∑–∏–Ω')) icon = 'üè™';
            else if (name.toLowerCase().includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω') || name.toLowerCase().includes('–∫–∞—Ñ–µ')) icon = 'üçΩÔ∏è';
            else if (name.toLowerCase().includes('–∞–ø—Ç–µ–∫–∞')) icon = 'üíä';
            else if (name.toLowerCase().includes('–±–∞–Ω–∫')) icon = 'üè¶';
            else if (name.toLowerCase().includes('—Ü–µ–Ω—Ç—Ä')) icon = 'üè¢';
            
            return {
                title: `${icon} ${name}`,
                description: description,
                url: `https://www.openstreetmap.org/#map=18/${place.lat}/${place.lon}`,
                source: 'OpenStreetMap'
            };
        });
        
        console.log(`üîç [PLACES] –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchResults.length}`);
        return searchResults;
        
    } catch (error) {
        console.log('üîç [PLACES] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç:', error.message);
        return [];
    }
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ wttr.in (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å)
 */
async function searchWeather(query) {
    try {
        console.log('üîç [WEATHER] –ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã –¥–ª—è:', query);
        
        const cityMatch = query.match(/(–≤|–¥–ª—è|–≤ –≥–æ—Ä–æ–¥–µ)\s+([–∞-—è—ë\w]+)/i);
        const city = cityMatch ? cityMatch[2] : 'Moscow';
        
        const url = `http://wttr.in/${encodeURIComponent(city)}?format=j1`;
        
        const response = await fetch(url, {
            headers: {
                'User-Agent': 'curl/7.68.0'
            }
        });
        
        if (!response.ok) {
            console.log('üîç [WEATHER] wttr.in –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return [];
        }
        
        const data = await response.json();
        
        if (!data.current_condition || !data.weather) {
            console.log('üîç [WEATHER] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
            return [];
        }
        
        const current = data.current_condition[0];
        const today = data.weather[0];
        
        console.log('üîç [WEATHER] –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ');
        
        return [{
            title: `üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ ${city}`,
            snippet: `–°–µ–π—á–∞—Å: ${current.temp_C}¬∞C, ${current.weatherDesc[0].value}. –ú–∞–∫—Å: ${today.maxtempC}¬∞C, –º–∏–Ω: ${today.mintempC}¬∞C. –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${current.humidity}%, –≤–µ—Ç–µ—Ä: ${current.windspeedKmph} –∫–º/—á`,
            url: `http://wttr.in/${encodeURIComponent(city)}`,
            source: 'wttr.in'
        }];
        
    } catch (error) {
        console.log('üîç [WEATHER] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–≥–æ–¥—ã:', error.message);
        return [];
    }
}

/**
 * –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ RSS (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
 */
async function searchNews(query) {
    try {
        console.log('üîç [NEWS] –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è:', query);
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö RSS –ª–µ–Ω—Ç
        const newsFeeds = [
            'https://lenta.ru/rss',
            'https://www.rbc.ru/rss/news'
        ];
        
        for (const feedUrl of newsFeeds) {
            try {
                const response = await fetch(feedUrl, {
                    timeout: 5000,
                    headers: {
                        'User-Agent': 'BOOOMERANGS-Search/1.0'
                    }
                });
                
                if (response.ok) {
                    console.log('üîç [NEWS] –ü–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–Ω—É—é –ª–µ–Ω—Ç—É');
                    return [{
                        title: 'üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏',
                        snippet: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∞–π—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
                        url: feedUrl,
                        source: 'News RSS'
                    }];
                }
            } catch (err) {
                continue;
            }
        }
        
        return [];
        
    } catch (error) {
        console.log('üîç [NEWS] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:', error.message);
        return [];
    }
}

/**
 * –û–±—â–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
 */
async function searchGeneral(query) {
    try {
        console.log('üîç [GENERAL] –û–±—â–∏–π –ø–æ–∏—Å–∫ –¥–ª—è:', query);
        
        return [{
            title: `üîç –ü–æ–∏—Å–∫: ${query}`,
            snippet: `–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}". –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.`,
            url: `https://duckduckgo.com/?q=${encodeURIComponent(query)}`,
            source: 'GeneralSearch'
        }];
        
    } catch (error) {
        console.log('üîç [GENERAL] –û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞:', error.message);
        return [];
    }
}

/**
 * –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
async function searchStoreDetails(query) {
    try {
        console.log('üîç [STORES] –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è:', query);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const cityMatch = query.match(/(–≤|–æ–∫–æ–ª–æ|—Ä—è–¥–æ–º)\s+([–∞-—è—ë\s\-]+)/i);
        const city = cityMatch ? cityMatch[2].trim().toLowerCase() : '';
        
        const results = [];
        
        // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ OpenStreetMap —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã –æ–¥–µ–∂–¥—ã
        if (city) {
            const searches = [
                `–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã ${city}`,
                `—Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä ${city}`,
                `shopping mall ${city}`,
                `clothing store ${city}`
            ];
            
            for (const searchTerm of searches) {
                try {
                    const osmUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchTerm)}&limit=8&addressdetails=1&countrycodes=ru&extratags=1`;
                    
                    const response = await fetch(osmUrl, {
                        headers: { 'User-Agent': 'BOOOMERANGS-Business-Search/1.0' }
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        console.log(`üîç [STORES] OSM "${searchTerm}": ${data.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
                        
                        data.forEach(place => {
                            const name = place.display_name.split(',')[0];
                            const fullAddress = place.display_name;
                            
                            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                            let description = `üìç ${fullAddress}`;
                            
                            if (place.extratags?.phone) {
                                description += `\nüìû ${place.extratags.phone}`;
                            }
                            if (place.extratags?.website) {
                                description += `\nüåê ${place.extratags.website}`;
                            }
                            if (place.extratags?.opening_hours) {
                                description += `\nüïê ${place.extratags.opening_hours}`;
                            }
                            
                            results.push({
                                title: `üè™ ${name}`,
                                description: description,
                                url: `https://www.openstreetmap.org/?mlat=${place.lat}&mlon=${place.lon}&zoom=16`,
                                source: 'OpenStreetMap Business'
                            });
                        });
                    }
                } catch (error) {
                    console.log(`üîç [STORES] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ "${searchTerm}":`, error.message);
                }
            }
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const uniqueResults = results.filter((item, index, self) => 
            index === self.findIndex(t => t.title === item.title)
        );
        
        console.log(`üîç [STORES] –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: ${uniqueResults.length}`);
        return uniqueResults.slice(0, 10);
        
    } catch (error) {
        console.log('üîç [STORES] –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error.message);
        return [];
    }
}

/**
 * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
 */
async function searchDuckDuckGo(query) {
    try {
        const searchQuery = encodeURIComponent(query);
        const url = `https://api.duckduckgo.com/?q=${searchQuery}&format=json&no_redirect=1&no_html=1&skip_disambig=1`;
        
        console.log('üîç [DDG] –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo...');
        
        const response = await fetch(url, {
            headers: {
                'User-Agent': 'BOOOMERANGS-Search/1.0'
            },
            timeout: 5000
        });
        
        if (!response.ok) {
            throw new Error('DuckDuckGo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        const data = await response.json();
        const results = [];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if (data.Answer) {
            results.push({
                title: 'üîç –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç',
                description: data.Answer,
                url: data.AbstractURL || `https://duckduckgo.com/?q=${searchQuery}`,
                source: 'DuckDuckGo'
            });
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
        if (data.RelatedTopics && data.RelatedTopics.length > 0) {
            data.RelatedTopics.slice(0, 3).forEach(topic => {
                if (topic.Text && topic.FirstURL) {
                    results.push({
                        title: 'üìÑ ' + topic.Text.split(' - ')[0],
                        description: topic.Text,
                        url: topic.FirstURL,
                        source: 'DuckDuckGo'
                    });
                }
            });
        }
        
        console.log(`üîç [DDG] –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
        return results;
        
    } catch (error) {
        console.log('üîç [DDG] –û—à–∏–±–∫–∞:', error.message);
        return [];
    }
}

/**
 * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
 */
async function searchRussianServices(query) {
    try {
        console.log('üîç [RUS] –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã...');
        
        const cityMatch = query.match(/(–≤|–æ–∫–æ–ª–æ|—Ä—è–¥–æ–º)\s+([–∞-—è—ë\s\-]+)/i);
        const city = cityMatch ? cityMatch[2].trim() : '–†–æ—Å—Å–∏–∏';
        
        const results = [
            {
                title: `üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã: –º–∞–≥–∞–∑–∏–Ω—ã –≤ ${city}`,
                description: `–ù–∞–π–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –æ–¥–µ–∂–¥—ã –≤ ${city} —Å –∞–¥—Ä–µ—Å–∞–º–∏, —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏ –∏ –æ—Ç–∑—ã–≤–∞–º–∏`,
                url: `https://yandex.ru/maps/?text=${encodeURIComponent(query)}`,
                source: 'Yandex Maps'
            },
            {
                title: `üè™ 2–ì–ò–°: —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –≤ ${city}`,
                description: `–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –æ–¥–µ–∂–¥—ã –≤ ${city} - –∞–¥—Ä–µ—Å–∞, –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã`,
                url: `https://2gis.ru/search/${encodeURIComponent(query)}`,
                source: '2GIS'
            }
        ];
        
        console.log(`üîç [RUS] –°–æ–∑–¥–∞–Ω–æ —Å—Å—ã–ª–æ–∫: ${results.length}`);
        return results;
        
    } catch (error) {
        console.log('üîç [RUS] –û—à–∏–±–∫–∞:', error.message);
        return [];
    }
}

export {
    searchRealTimeInfo,
    searchPlaces,
    searchWeather,
    searchNews
};