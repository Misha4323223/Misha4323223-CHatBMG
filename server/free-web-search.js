/**
 * –ú–æ—â–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ API –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import fetch from 'node-fetch';

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
async function searchRealTimeInfo(query) {
    try {
        console.log('üîç [SEARCH] === –ù–ê–ß–ò–ù–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö ===');
        console.log('üîç [SEARCH] –ó–∞–ø—Ä–æ—Å:', query);
        
        const results = [];
        const searchTerms = query.toLowerCase();
        
        // 1. –ü–æ–∏—Å–∫ –º–µ—Å—Ç (–º–∞–≥–∞–∑–∏–Ω—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –∫–∞—Ñ–µ)
        if (searchTerms.includes('–º–∞–≥–∞–∑–∏–Ω') || searchTerms.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω') || 
            searchTerms.includes('–∫–∞—Ñ–µ') || searchTerms.includes('–≥–¥–µ') || 
            searchTerms.includes('–∞–¥—Ä–µ—Å') || searchTerms.includes('–Ω–∞–π–¥–∏') ||
            searchTerms.includes('–æ–¥–µ–∂–¥–∞') || searchTerms.includes('—Ç–æ—Ä–≥–æ–≤—ã–π')) {
            const placeResults = await searchPlaces(query);
            results.push(...placeResults);
        }
        
        // 2. –ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã
        if (searchTerms.includes('–ø–æ–≥–æ–¥–∞') || searchTerms.includes('—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞') ||
            searchTerms.includes('–ø—Ä–æ–≥–Ω–æ–∑')) {
            const weatherResults = await searchWeather(query);
            results.push(...weatherResults);
        }
        
        // 3. –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        if (searchTerms.includes('–Ω–æ–≤–æ—Å—Ç') || searchTerms.includes('—Å–æ–±—ã—Ç–∏') ||
            searchTerms.includes('—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç')) {
            const newsResults = await searchNews(query);
            results.push(...newsResults);
        }
        
        // 4. –û–±—â–∏–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if (results.length === 0) {
            const webResults = await searchGeneral(query);
            results.push(...webResults);
        }
        
        console.log('üîç [SEARCH] –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', results.length);
        
        return {
            success: results.length > 0,
            results: results,
            provider: 'FreeSearch'
        };
        
    } catch (error) {
        console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'FreeSearch'
        };
    }
}

/**
 * –ü–æ–∏—Å–∫ –º–µ—Å—Ç —á–µ—Ä–µ–∑ OpenStreetMap (–ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
 */
async function searchPlaces(query) {
    try {
        console.log('üîç [PLACES] –ü–æ–∏—Å–∫ –º–µ—Å—Ç –¥–ª—è:', query);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const cityMatch = query.match(/(–≤|–æ–∫–æ–ª–æ|—Ä—è–¥–æ–º|–≤ –≥–æ—Ä–æ–¥–µ)\s+([–∞-—è—ë\w]+)/i);
        const city = cityMatch ? cityMatch[2] : '–ú–æ—Å–∫–≤–∞';
        
        const searchQuery = encodeURIComponent(`${query} ${city}`);
        const url = `https://nominatim.openstreetmap.org/search?q=${searchQuery}&format=json&limit=5&addressdetails=1`;
        
        const response = await fetch(url, {
            headers: {
                'User-Agent': 'BOOOMERANGS-Search/1.0'
            }
        });
        
        if (!response.ok) {
            console.log('üîç [PLACES] OpenStreetMap –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return [];
        }
        
        const data = await response.json();
        console.log('üîç [PLACES] –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç OSM:', data.length);
        
        return data.slice(0, 3).map(place => ({
            title: place.display_name.split(',')[0],
            snippet: `üìç ${place.display_name}`,
            url: `https://www.openstreetmap.org/#map=18/${place.lat}/${place.lon}`,
            source: 'OpenStreetMap'
        }));
        
    } catch (error) {
        console.log('üîç [PLACES] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç:', error.message);
        return [];
    }
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ wttr.in (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å)
 */
async function searchWeather(query) {
    try {
        console.log('üîç [WEATHER] –ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã –¥–ª—è:', query);
        
        const cityMatch = query.match(/(–≤|–¥–ª—è|–≤ –≥–æ—Ä–æ–¥–µ)\s+([–∞-—è—ë\w]+)/i);
        const city = cityMatch ? cityMatch[2] : 'Moscow';
        
        const url = `http://wttr.in/${encodeURIComponent(city)}?format=j1`;
        
        const response = await fetch(url, {
            headers: {
                'User-Agent': 'curl/7.68.0'
            }
        });
        
        if (!response.ok) {
            console.log('üîç [WEATHER] wttr.in –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return [];
        }
        
        const data = await response.json();
        
        if (!data.current_condition || !data.weather) {
            console.log('üîç [WEATHER] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
            return [];
        }
        
        const current = data.current_condition[0];
        const today = data.weather[0];
        
        console.log('üîç [WEATHER] –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ');
        
        return [{
            title: `üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ ${city}`,
            snippet: `–°–µ–π—á–∞—Å: ${current.temp_C}¬∞C, ${current.weatherDesc[0].value}. –ú–∞–∫—Å: ${today.maxtempC}¬∞C, –º–∏–Ω: ${today.mintempC}¬∞C. –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${current.humidity}%, –≤–µ—Ç–µ—Ä: ${current.windspeedKmph} –∫–º/—á`,
            url: `http://wttr.in/${encodeURIComponent(city)}`,
            source: 'wttr.in'
        }];
        
    } catch (error) {
        console.log('üîç [WEATHER] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–≥–æ–¥—ã:', error.message);
        return [];
    }
}

/**
 * –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ RSS (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
 */
async function searchNews(query) {
    try {
        console.log('üîç [NEWS] –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è:', query);
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö RSS –ª–µ–Ω—Ç
        const newsFeeds = [
            'https://lenta.ru/rss',
            'https://www.rbc.ru/rss/news'
        ];
        
        for (const feedUrl of newsFeeds) {
            try {
                const response = await fetch(feedUrl, {
                    timeout: 5000,
                    headers: {
                        'User-Agent': 'BOOOMERANGS-Search/1.0'
                    }
                });
                
                if (response.ok) {
                    console.log('üîç [NEWS] –ü–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–Ω—É—é –ª–µ–Ω—Ç—É');
                    return [{
                        title: 'üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏',
                        snippet: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∞–π—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
                        url: feedUrl,
                        source: 'News RSS'
                    }];
                }
            } catch (err) {
                continue;
            }
        }
        
        return [];
        
    } catch (error) {
        console.log('üîç [NEWS] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:', error.message);
        return [];
    }
}

/**
 * –û–±—â–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
 */
async function searchGeneral(query) {
    try {
        console.log('üîç [GENERAL] –û–±—â–∏–π –ø–æ–∏—Å–∫ –¥–ª—è:', query);
        
        return [{
            title: `üîç –ü–æ–∏—Å–∫: ${query}`,
            snippet: `–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}". –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.`,
            url: `https://duckduckgo.com/?q=${encodeURIComponent(query)}`,
            source: 'GeneralSearch'
        }];
        
    } catch (error) {
        console.log('üîç [GENERAL] –û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞:', error.message);
        return [];
    }
}

export {
    searchRealTimeInfo,
    searchPlaces,
    searchWeather,
    searchNews
};