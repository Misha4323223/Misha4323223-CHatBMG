/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ –∏ DTF –ø–µ—á–∞—Ç–∏
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞—Å—Ç—Ä–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–∏–ª–µ
 */

const sharp = require('sharp');
const potrace = require('potrace');
const fs = require('fs').promises;
const path = require('path');

// –ò–º–ø–æ—Ä—Ç fetch —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä—Å–∏–∏ Node.js
let fetch;
try {
  fetch = require('node-fetch');
} catch (error) {
  // Fallback –¥–ª—è –±–æ–ª–µ–µ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π Node.js
  fetch = globalThis.fetch;
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è SVG
const chatFreeProvider = require('./chatfree-provider');

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
async function ensureDirectories() {
  const dirs = ['temp', 'output', 'output/svg', 'output/print'];
  for (const dir of dirs) {
    try {
      await fs.mkdir(path.join(process.cwd(), dir), { recursive: true });
    } catch (error) {
      // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
  }
}

/**
 * AI-–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SVG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 */
async function analyzeImageWithAI(imageBuffer, userRequest) {
  try {
    console.log(`ü§ñ [SVG-AI] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI...`);
    
    const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–µ –∏ –ø–µ—á–∞—Ç–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–∏–ª–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userRequest}"

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ SVG –¥–ª—è –ø–µ—á–∞—Ç–∏:

1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –¥–∏–∑–∞–π–Ω–∞ (–ª–æ–≥–æ—Ç–∏–ø, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è, —Ç–µ–∫—Å—Ç, –ø–∞—Ç—Ç–µ—Ä–Ω)
2. –†–µ–∫–æ–º–µ–Ω–¥—É–π –º–µ—Ç–æ–¥ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ (–ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç—É—Ä, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —Å–º–µ—à–∞–Ω–Ω—ã–π)
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è –ø–µ—á–∞—Ç–∏
4. –û–ø—Ä–µ–¥–µ–ª–∏ –ª—É—á—à–∏–π —Ç–∏–ø –ø–µ—á–∞—Ç–∏ (—à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è –∏–ª–∏ DTF)
5. –î–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "designType": "–ª–æ–≥–æ—Ç–∏–ø|–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è|—Ç–µ–∫—Å—Ç|–ø–∞—Ç—Ç–µ—Ä–Ω",
  "traceMethod": "simple|detailed|mixed",
  "printType": "screenprint|dtf|both",
  "colorReduction": true|false,
  "maxColors": —á–∏—Å–ª–æ,
  "recommendations": "—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
}`;

    const aiResponse = await chatFreeProvider.getChatFreeResponse(prompt, {
      systemPrompt: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–µ –∏ –ø–µ—á–∞—Ç–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–∏–ª–µ. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.",
      temperature: 0.3
    });

    if (aiResponse.success && aiResponse.response) {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const jsonMatch = aiResponse.response.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const analysis = JSON.parse(jsonMatch[0]);
          console.log(`‚úÖ [SVG-AI] AI –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω:`, analysis);
          return analysis;
        }
      } catch (parseError) {
        console.log(`‚ö†Ô∏è [SVG-AI] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`);
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    return {
      designType: "–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è",
      traceMethod: "detailed",
      printType: "both",
      colorReduction: true,
      maxColors: 6,
      recommendations: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    };

  } catch (error) {
    console.error(`‚ùå [SVG-AI] –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:`, error);
    return {
      designType: "–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è",
      traceMethod: "detailed", 
      printType: "both",
      colorReduction: true,
      maxColors: 6,
      recommendations: "–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ AI –∞–Ω–∞–ª–∏–∑–∞"
    };
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL –∏–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞
 */
async function loadImage(imageSource) {
  try {
    if (imageSource.startsWith('http')) {
      const response = await fetch(imageSource);
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      return await response.buffer();
    } else {
      return await fs.readFile(imageSource);
    }
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`);
  }
}

/**
 * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function prepareImageForVectorization(imageBuffer, options = {}) {
  const {
    width = 1024,
    height = 1024,
    contrast = 1.2,
    brightness = 0.1,
    threshold = 128
  } = options;

  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    let processedBuffer = await sharp(imageBuffer)
      .resize(width, height, { fit: 'inside', withoutEnlargement: true })
      .grayscale()
      .normalize()
      .modulate({ brightness: 1 + brightness })
      .linear(contrast, -(128 * contrast) + 128)
      .threshold(threshold)
      .png()
      .toBuffer();

    return processedBuffer;
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`);
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ (–≤—ã—Å–æ–∫–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π, –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã)
 */
async function createScreenPrintSVG(imageBuffer, outputPath, options = {}) {
  const {
    simplify = true,
    threshold = 180,
    strokeWidth = 0.5
  } = options;

  try {
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ - –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã
    const preparedBuffer = await prepareImageForVectorization(imageBuffer, {
      threshold,
      contrast: 1.5,
      brightness: 0.2
    });

    return new Promise((resolve, reject) => {
      potrace.trace(preparedBuffer, {
        threshold: threshold,
        optTolerance: simplify ? 0.4 : 0.2,
        turnPolicy: potrace.Potrace.TURNPOLICY_MINORITY,
        turdSize: 2,
        optCurve: true,
        alphaMax: 1.0,
        color: '#000000'
      }, (err, svg) => {
        if (err) {
          reject(new Error(`–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏: ${err.message}`));
          return;
        }

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
        const optimizedSVG = svg
          .replace(/<svg[^>]*>/, `<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 1024 1024">`)
          .replace(/fill="[^"]*"/g, 'fill="#000000"')
          .replace(/stroke="[^"]*"/g, `stroke="#000000" stroke-width="${strokeWidth}"`);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
        const finalSVG = optimizedSVG.replace(
          '<svg',
          `<!-- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ -->
          <!-- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –æ–¥–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å, –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫—Ä–∞—Å–æ–∫ 100% -->
          <svg`
        );

        resolve({
          svg: finalSVG,
          path: outputPath,
          type: 'screenprint'
        });
      });
    });
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏: ${error.message}`);
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ SVG –¥–ª—è DTF –ø–µ—á–∞—Ç–∏ (–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —Ü–≤–µ—Ç–Ω–æ–π)
 */
async function createDTFSVG(imageBuffer, outputPath, options = {}) {
  const {
    preserveColors = true,
    threshold = 120,
    strokeWidth = 0.3
  } = options;

  try {
    let preparedBuffer;
    
    if (preserveColors) {
      // –î–ª—è DTF —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ —Ü–≤–µ—Ç–æ–≤
      preparedBuffer = await sharp(imageBuffer)
        .resize(1024, 1024, { fit: 'inside', withoutEnlargement: true })
        .normalize()
        .sharpen()
        .png()
        .toBuffer();
    } else {
      preparedBuffer = await prepareImageForVectorization(imageBuffer, {
        threshold,
        contrast: 1.3,
        brightness: 0.1
      });
    }

    return new Promise((resolve, reject) => {
      potrace.trace(preparedBuffer, {
        threshold: threshold,
        optTolerance: 0.2,
        turnPolicy: potrace.Potrace.TURNPOLICY_MINORITY,
        turdSize: 1,
        optCurve: true,
        alphaMax: 1.0,
        color: preserveColors ? 'auto' : '#000000'
      }, (err, svg) => {
        if (err) {
          reject(new Error(`–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è DTF: ${err.message}`));
          return;
        }

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SVG –¥–ª—è DTF –ø–µ—á–∞—Ç–∏
        let optimizedSVG = svg
          .replace(/<svg[^>]*>/, `<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 1024 1024">`)
          .replace(/stroke-width="[^"]*"/g, `stroke-width="${strokeWidth}"`);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è DTF
        const finalSVG = optimizedSVG.replace(
          '<svg',
          `<!-- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è DTF –ø–µ—á–∞—Ç–∏ -->
          <!-- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ø–æ–ª–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å, –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ -->
          <svg`
        );

        resolve({
          svg: finalSVG,
          path: outputPath,
          type: 'dtf'
        });
      });
    });
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SVG –¥–ª—è DTF: ${error.message}`);
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã –¥–ª—è –ø–µ—á–∞—Ç–∏
 */
async function generateColorScheme(imageBuffer) {
  try {
    const { dominant } = await sharp(imageBuffer)
      .resize(100, 100)
      .raw()
      .toBuffer({ resolveWithObject: true });

    // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤
    const colors = new Map();
    const buffer = dominant;
    
    for (let i = 0; i < buffer.length; i += 3) {
      const r = buffer[i];
      const g = buffer[i + 1];
      const b = buffer[i + 2];
      const hex = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
      
      colors.set(hex, (colors.get(hex) || 0) + 1);
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const sortedColors = Array.from(colors.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 8)
      .map(([color]) => color);

    return {
      primary: sortedColors[0] || '#000000',
      secondary: sortedColors[1] || '#333333',
      accent: sortedColors[2] || '#666666',
      palette: sortedColors
    };
  } catch (error) {
    return {
      primary: '#000000',
      secondary: '#333333',
      accent: '#666666',
      palette: ['#000000', '#333333', '#666666']
    };
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 */
async function convertImageToPrintSVG(imageSource, outputName, printType = 'both', userRequest = '') {
  await ensureDirectories();
  
  const id = Date.now().toString(36) + Math.random().toString(36).substring(2, 9);
  const baseName = outputName || `print-design-${id}`;
  
  try {
    console.log(`üé® [SVG-PRINT] –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ${printType} –ø–µ—á–∞—Ç–∏`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageBuffer = await loadImage(imageSource);
    console.log(`üìÅ [SVG-PRINT] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageBuffer.length} –±–∞–π—Ç`);
    
    // AI-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    const aiAnalysis = await analyzeImageWithAI(imageBuffer, userRequest);
    console.log(`ü§ñ [SVG-PRINT] AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: ${aiAnalysis.recommendations}`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
    const colorScheme = await generateColorScheme(imageBuffer);
    console.log(`üé® [SVG-PRINT] –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: ${colorScheme.palette.length} —Ü–≤–µ—Ç–æ–≤`);
    
    const results = {
      id,
      name: baseName,
      colorScheme,
      files: [],
      recommendations: {},
      aiAnalysis: aiAnalysis
    };

    // –°–æ–∑–¥–∞–µ–º SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    if (printType === 'screenprint' || printType === 'both') {
      const screenPrintPath = path.join('output', 'svg', `${baseName}-screenprint.svg`);
      const screenResult = await createScreenPrintSVG(imageBuffer, screenPrintPath);
      
      await fs.writeFile(screenResult.path, screenResult.svg);
      console.log(`‚úÖ [SVG-PRINT] SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ–∑–¥–∞–Ω: ${screenResult.path}`);
      
      results.files.push({
        type: 'screenprint',
        format: 'svg',
        path: screenResult.path,
        url: `/output/svg/${baseName}-screenprint.svg`,
        size: screenResult.svg.length
      });
      
      results.recommendations.screenprint = {
        colors: 1,
        technique: '–û–¥–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è',
        notes: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∏—Ä–∞–∂–µ–π, –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã, –≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å'
      };
    }

    // –°–æ–∑–¥–∞–µ–º SVG –¥–ª—è DTF –ø–µ—á–∞—Ç–∏
    if (printType === 'dtf' || printType === 'both') {
      const dtfPath = path.join('output', 'svg', `${baseName}-dtf.svg`);
      const dtfResult = await createDTFSVG(imageBuffer, dtfPath, { preserveColors: true });
      
      await fs.writeFile(dtfResult.path, dtfResult.svg);
      console.log(`‚úÖ [SVG-PRINT] SVG –¥–ª—è DTF —Å–æ–∑–¥–∞–Ω: ${dtfResult.path}`);
      
      results.files.push({
        type: 'dtf',
        format: 'svg',
        path: dtfResult.path,
        url: `/output/svg/${baseName}-dtf.svg`,
        size: dtfResult.svg.length
      });
      
      results.recommendations.dtf = {
        colors: colorScheme.palette.length,
        technique: 'DTF –ø–æ–ª–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å',
        notes: '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–æ–≤, —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º, –º–∞–ª—ã–µ —Ç–∏—Ä–∞–∂–∏'
      };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
    const colorSchemePath = path.join('output', 'print', `${baseName}-colors.json`);
    await fs.writeFile(colorSchemePath, JSON.stringify(colorScheme, null, 2));
    
    results.files.push({
      type: 'colorscheme',
      format: 'json',
      path: colorSchemePath,
      url: `/output/print/${baseName}-colors.json`,
      size: JSON.stringify(colorScheme).length
    });

    console.log(`üéâ [SVG-PRINT] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${results.files.length} —Ñ–∞–π–ª–æ–≤`);
    
    return {
      success: true,
      result: results
    };

  } catch (error) {
    console.error(`‚ùå [SVG-PRINT] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:`, error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–µ—á–∞—Ç–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
 */
function detectPrintTypeFromRequest(message) {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('—à–µ–ª–∫–æ–≥—Ä–∞—Ñ') || lowerMessage.includes('screenprint') || lowerMessage.includes('—Ç—Ä–∞—Ñ–∞—Ä–µ—Ç')) {
    return 'screenprint';
  }
  
  if (lowerMessage.includes('dtf') || lowerMessage.includes('—Ü–∏—Ñ—Ä–æ–≤') || lowerMessage.includes('—Ç–µ—Ä–º–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä')) {
    return 'dtf';
  }
  
  return 'both'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ SVG –¥–ª—è –ø–µ—á–∞—Ç–∏
 */
function isPrintConversionRequest(message) {
  const printKeywords = [
    '–ø—Ä–∏–Ω—Ç', '—Ñ—É—Ç–±–æ–ª–∫–∞', '–ø–µ—á–∞—Ç—å', 'svg', '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '—à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è', 
    'dtf', '–ø–µ—á–∞—Ç—å –Ω–∞ —Ç–∫–∞–Ω–∏', 'screenprint', '—Ç–µ—Ä–º–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä', '—Ç—Ä–∞—Ñ–∞—Ä–µ—Ç',
    '–¥–∏–∑–∞–π–Ω –¥–ª—è', '–ø—Ä–∏–Ω—Ç –Ω–∞', '–æ–¥–µ–∂–¥–∞', 'textile', '–º–∞–π–∫–∞', '—Ä—É–±–∞—à–∫–∞'
  ];
  
  const conversionKeywords = [
    '–∫–æ–Ω–≤–µ—Ä—Ç', '–ø—Ä–µ–æ–±—Ä–∞–∑—É–π', '—Å–¥–µ–ª–∞–π svg', '–≤ –≤–µ–∫—Ç–æ—Ä', '—Å–æ—Ö—Ä–∞–Ω–∏ –≤ svg',
    '—Å–æ—Ö—Ä–∞–Ω–∏ svg', '—ç–∫—Å–ø–æ—Ä—Ç –≤ svg', '—Å–¥–µ–ª–∞–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–º'
  ];
  
  const lowerMessage = message.toLowerCase();
  
  const hasPrintKeyword = printKeywords.some(keyword => lowerMessage.includes(keyword));
  const hasConversionKeyword = conversionKeywords.some(keyword => lowerMessage.includes(keyword));
  
  console.log(`üîç [SVG-PRINT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—á–∞—Ç—å:`, {
    message: lowerMessage.substring(0, 50),
    hasPrintKeyword,
    hasConversionKeyword,
    foundKeywords: [...printKeywords, ...conversionKeywords].filter(keyword => lowerMessage.includes(keyword))
  });
  
  return hasPrintKeyword || hasConversionKeyword;
}

module.exports = {
  convertImageToPrintSVG,
  detectPrintTypeFromRequest,
  isPrintConversionRequest,
  generateColorScheme
};