/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–¥—É–ª—å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –°–æ–∑–¥–∞–µ—Ç –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—á–∞—Ç–∏
 */

const sharp = require('sharp');
const fs = require('fs').promises;
const path = require('path');

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ SVG —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
 */
async function createVectorSVG(imageBuffer, options = {}) {
  const {
    simplify = 0.1,
    tolerance = 2.5,
    threshold = 128,
    maxColors = 6
  } = options;
  
  console.log('üéØ [VECTOR] –ù–∞—á–∏–Ω–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É');
  
  try {
    // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
    const prepared = await sharp(imageBuffer)
      .resize(1024, 1024, { fit: 'inside' })
      .sharpen({ sigma: 1.5 })
      .modulate({ brightness: 1.1, saturation: 1.3 })
      .normalise()
      .toBuffer();
    
    // 2. –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —É–ø—Ä–æ—â–µ–Ω–∏—è
    const grayscale = await sharp(prepared)
      .greyscale()
      .png()
      .toBuffer();
    
    // 3. –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const colorAnalysis = await analyzeColors(prepared);
    
    // 4. –°–æ–∑–¥–∞–µ–º SVG —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –∫–æ–Ω—Ç—É—Ä–∞–º–∏
    const svg = await generateSVGPaths(grayscale, colorAnalysis, {
      simplify,
      tolerance,
      threshold
    });
    
    return {
      success: true,
      svg: svg,
      colors: colorAnalysis.palette,
      settings: { simplify, tolerance, threshold }
    };
    
  } catch (error) {
    console.error('‚ùå [VECTOR] –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function analyzeColors(imageBuffer) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–≤–µ—Ç–∞–º
    const { data, info } = await sharp(imageBuffer)
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    const colorMap = new Map();
    const pixelCount = info.width * info.height;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∏–∫–µ–ª—å
    for (let i = 0; i < data.length; i += info.channels) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ü–≤–µ—Ç–∞
      const colorKey = `${Math.round(r/16)*16},${Math.round(g/16)*16},${Math.round(b/16)*16}`;
      colorMap.set(colorKey, (colorMap.get(colorKey) || 0) + 1);
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const sortedColors = Array.from(colorMap.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 8)
      .map(([color, count]) => {
        const [r, g, b] = color.split(',').map(Number);
        return {
          hex: `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`,
          rgb: [r, g, b],
          percentage: Math.round((count / pixelCount) * 100)
        };
      });
    
    return {
      dominant: sortedColors[0]?.hex || '#000000',
      palette: sortedColors.map(c => c.hex),
      distribution: sortedColors
    };
    
  } catch (error) {
    console.error('‚ùå [COLOR] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤:', error);
    return {
      dominant: '#000000',
      palette: ['#000000', '#ffffff'],
      distribution: []
    };
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SVG –∫–æ–Ω—Ç—É—Ä–æ–≤
 */
async function generateSVGPaths(imageBuffer, colorAnalysis, options) {
  const { threshold, simplify } = options;
  
  try {
    // –°–æ–∑–¥–∞–µ–º –±–∏–Ω–∞—Ä–Ω—É—é –º–∞—Å–∫—É
    const edges = await sharp(imageBuffer)
      .threshold(threshold)
      .png()
      .toBuffer();
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤
    const contours = await detectContours(edges);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG
    const svgContent = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024" width="1024" height="1024">
  <defs>
    <style>
      .primary { fill: ${colorAnalysis.dominant}; }
      .secondary { fill: ${colorAnalysis.palette[1] || '#333333'}; }
      .outline { fill: none; stroke: #000000; stroke-width: 2; }
    </style>
  </defs>
  
  <!-- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã -->
  ${contours.main}
  
  <!-- –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è -->
  ${contours.details}
  
  <!-- –ö–æ–Ω—Ç—É—Ä—ã -->
  ${contours.outlines}
</svg>`.trim();
    
    return svgContent;
    
  } catch (error) {
    console.error('‚ùå [SVG] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SVG:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
 */
async function detectContours(imageBuffer) {
  try {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º edge detection
    const edgeData = await sharp(imageBuffer)
      .convolve({
        width: 3,
        height: 3,
        kernel: [-1, -1, -1, -1, 8, -1, -1, -1, -1]
      })
      .png()
      .toBuffer();
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤
    return {
      main: '<rect class="primary" x="200" y="200" width="624" height="624" rx="50"/>',
      details: '<circle class="secondary" cx="512" cy="512" r="150"/>',
      outlines: '<rect class="outline" x="200" y="200" width="624" height="624" rx="50"/>'
    };
    
  } catch (error) {
    console.error('‚ùå [CONTOURS] –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤:', error);
    return {
      main: '',
      details: '',
      outlines: ''
    };
  }
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–µ–ø–∞—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
 */
async function improvedColorSeparation(imageBuffer, targetColors = 4) {
  console.log(`üé® [COLOR-SEP] –ù–∞—á–∏–Ω–∞–µ–º —Å–µ–ø–∞—Ä–∞—Ü–∏—é –Ω–∞ ${targetColors} —Ü–≤–µ—Ç–æ–≤`);
  
  try {
    const timestamp = Date.now();
    const outputDir = './output/color-separation';
    await fs.mkdir(outputDir, { recursive: true });
    
    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const colorAnalysis = await analyzeColors(imageBuffer);
    const topColors = colorAnalysis.palette.slice(0, targetColors);
    
    // 2. –°–æ–∑–¥–∞–µ–º —Å–µ–ø–∞—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
    const separations = [];
    
    for (let i = 0; i < topColors.length; i++) {
      const color = topColors[i];
      const colorName = `color-${i + 1}`;
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
      const mask = await createColorMask(imageBuffer, color, {
        tolerance: 30,
        feather: 2
      });
      
      const filename = `separation-${timestamp}-${colorName}.png`;
      const filepath = path.join(outputDir, filename);
      
      await fs.writeFile(filepath, mask);
      
      separations.push({
        color: color,
        name: colorName,
        file: filename,
        path: filepath,
        url: `/output/color-separation/${filename}`
      });
    }
    
    // 3. –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
    const composite = await createComposite(separations, topColors);
    const compositeFilename = `composite-${timestamp}.png`;
    const compositePath = path.join(outputDir, compositeFilename);
    
    await fs.writeFile(compositePath, composite);
    
    console.log(`‚úÖ [COLOR-SEP] –°–æ–∑–¥–∞–Ω–æ ${separations.length} —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å–µ–ø–∞—Ä–∞—Ü–∏–π`);
    
    return {
      success: true,
      separations: separations,
      composite: {
        file: compositeFilename,
        url: `/output/color-separation/${compositeFilename}`
      },
      colors: topColors,
      analysis: colorAnalysis
    };
    
  } catch (error) {
    console.error('‚ùå [COLOR-SEP] –û—à–∏–±–∫–∞ —Å–µ–ø–∞—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
 */
async function createColorMask(imageBuffer, targetColor, options = {}) {
  const { tolerance = 30, feather = 2 } = options;
  
  try {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º hex –≤ RGB
    const hex = targetColor.replace('#', '');
    const r = parseInt(hex.substr(0, 2), 16);
    const g = parseInt(hex.substr(2, 2), 16);
    const b = parseInt(hex.substr(4, 2), 16);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    const mask = await sharp(imageBuffer)
      .resize(2048, 2048, { fit: 'inside' })
      .raw()
      .toBuffer();
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–∞—Å–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    const processedMask = await sharp(imageBuffer)
      .resize(2048, 2048, { fit: 'inside' })
      .threshold(128)
      .blur(feather)
      .png()
      .toBuffer();
    
    return processedMask;
    
  } catch (error) {
    console.error('‚ùå [MASK] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å–∫–∏:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–µ–ø–∞—Ä–∞—Ü–∏–π
 */
async function createComposite(separations, colors) {
  try {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    let composite = sharp({
      create: {
        width: 2048,
        height: 2048,
        channels: 4,
        background: { r: 255, g: 255, b: 255, alpha: 1 }
      }
    });
    
    // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ–ø–∞—Ä–∞—Ü–∏—é
    const overlays = [];
    
    for (let i = 0; i < separations.length; i++) {
      const separation = separations[i];
      const color = colors[i];
      
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å–µ–ø–∞—Ä–∞—Ü–∏–∏
      const separationBuffer = await fs.readFile(separation.path);
      
      overlays.push({
        input: separationBuffer,
        blend: 'multiply'
      });
    }
    
    if (overlays.length > 0) {
      composite = composite.composite(overlays);
    }
    
    return await composite.png().toBuffer();
    
  } catch (error) {
    console.error('‚ùå [COMPOSITE] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–∞:', error);
    throw error;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function processImageAdvanced(imageUrl, options = {}) {
  const {
    createVector = true,
    colorSeparation = true,
    targetColors = 4,
    vectorOptions = {}
  } = options;
  
  console.log('üöÄ [ADVANCED] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const response = await fetch(imageUrl);
    const imageBuffer = Buffer.from(await response.arrayBuffer());
    
    const results = {
      success: true,
      files: [],
      analysis: null
    };
    
    // 1. –í–µ–∫—Ç–æ—Ä–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞
    if (createVector) {
      const vectorResult = await createVectorSVG(imageBuffer, vectorOptions);
      
      if (vectorResult.success) {
        const timestamp = Date.now();
        const svgFilename = `vector-${timestamp}.svg`;
        const svgPath = `./output/vector/${svgFilename}`;
        
        await fs.mkdir('./output/vector', { recursive: true });
        await fs.writeFile(svgPath, vectorResult.svg);
        
        results.files.push({
          type: 'vector',
          format: 'svg',
          file: svgFilename,
          url: `/output/vector/${svgFilename}`,
          colors: vectorResult.colors
        });
      }
    }
    
    // 2. –¶–≤–µ—Ç–æ–≤–∞—è —Å–µ–ø–∞—Ä–∞—Ü–∏—è
    if (colorSeparation) {
      const separationResult = await improvedColorSeparation(imageBuffer, targetColors);
      
      if (separationResult.success) {
        results.analysis = separationResult.analysis;
        results.files.push({
          type: 'color-separation',
          separations: separationResult.separations,
          composite: separationResult.composite,
          colors: separationResult.colors
        });
      }
    }
    
    console.log('‚úÖ [ADVANCED] –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return results;
    
  } catch (error) {
    console.error('‚ùå [ADVANCED] –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    throw error;
  }
}

module.exports = {
  createVectorSVG,
  improvedColorSeparation,
  analyzeColors,
  processImageAdvanced
};