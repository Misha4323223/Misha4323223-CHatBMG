/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 * –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö, –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

const axios = require('axios');

// –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
const FREE_PROVIDERS = {
    // –ü—Ä–æ—Å—Ç—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    'ChatFree': {
        url: 'https://chatfree.cc/api/chat',
        model: 'gpt-3.5-turbo',
        headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
    },
    'GPT4Free': {
        url: 'https://gpt4free.online/api/chat',
        model: 'gpt-4',
        headers: {
            'Content-Type': 'application/json',
            'Origin': 'https://gpt4free.online'
        }
    },
    'FreeGPT': {
        url: 'https://freegpt.one/api/openai/v1/chat/completions',
        model: 'gpt-3.5-turbo',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer free-key'
        }
    },
    'AIChat': {
        url: 'https://api.aichat.online/chat',
        model: 'gpt-4',
        headers: {
            'Content-Type': 'application/json',
            'Referer': 'https://aichat.online'
        }
    },
    'YouChat': {
        url: 'https://you.com/api/streamingSearch',
        model: 'gpt-4',
        headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'Mozilla/5.0 (compatible; YouBot/1.0)'
        }
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
 */
async function queryFreeProvider(providerName, message, timeout = 15000) {
    const provider = FREE_PROVIDERS[providerName];
    if (!provider) {
        throw new Error(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${providerName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –∫ ${providerName}...`);

    try {
        const requestData = {
            messages: [
                { role: 'user', content: message }
            ],
            model: provider.model,
            temperature: 0.7,
            max_tokens: 2000
        };

        const response = await axios.post(provider.url, requestData, {
            headers: provider.headers,
            timeout: timeout,
            validateStatus: function (status) {
                return status < 500; // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–¥—ã –¥–æ 500
            }
        });

        if (response.data && response.data.choices && response.data.choices[0]) {
            const content = response.data.choices[0].message.content;
            console.log(`‚úÖ ${providerName} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª`);
            return {
                success: true,
                response: content,
                provider: providerName,
                model: provider.model
            };
        } else if (response.data && response.data.response) {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            console.log(`‚úÖ ${providerName} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª (—Ñ–æ—Ä–º–∞—Ç 2)`);
            return {
                success: true,
                response: response.data.response,
                provider: providerName,
                model: provider.model
            };
        } else {
            throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
        }

    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ ${providerName}: ${error.message}`);
        return {
            success: false,
            error: error.message,
            provider: providerName
        };
    }
}

/**
 * –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */
async function getFreeProviderResponse(message, preferredProvider = null) {
    const providerList = preferredProvider 
        ? [preferredProvider, ...Object.keys(FREE_PROVIDERS).filter(p => p !== preferredProvider)]
        : Object.keys(FREE_PROVIDERS);

    console.log(`üéØ –ü—Ä–æ–±—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: ${providerList.join(', ')}`);

    for (const providerName of providerList) {
        try {
            const result = await queryFreeProvider(providerName, message);
            if (result.success) {
                return result;
            }
        } catch (error) {
            console.log(`‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${providerName} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
            continue;
        }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    return {
        success: false,
        error: '–í—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
        response: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        provider: 'FallbackSystem'
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */
async function checkAllProviders() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...');
    const results = {};

    for (const providerName of Object.keys(FREE_PROVIDERS)) {
        try {
            const result = await queryFreeProvider(providerName, '–¢–µ—Å—Ç', 5000);
            results[providerName] = result.success;
            console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${providerName}: ${result.success ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
        } catch (error) {
            results[providerName] = false;
            console.log(`‚ùå ${providerName}: ${error.message}`);
        }
    }

    return results;
}

module.exports = {
    getFreeProviderResponse,
    queryFreeProvider,
    checkAllProviders,
    FREE_PROVIDERS
};