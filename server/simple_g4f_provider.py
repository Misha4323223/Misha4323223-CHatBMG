#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""

import g4f
import logging
import time
from flask import Flask, request, jsonify, Response
from flask_cors import CORS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

app = Flask(__name__)
CORS(app)

def get_simple_response(message, provider_name=None):
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ g4f
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        working_providers = ['You', 'DDG', 'HuggingChat', 'DeepInfra']
        
        if provider_name and provider_name in working_providers:
            selected_provider = provider_name
        else:
            selected_provider = working_providers[0]  # You
        
        logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {selected_provider}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ g4f
        response = g4f.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": message}],
            provider=getattr(g4f.Provider, selected_provider)
        )
        
        return {
            "success": True,
            "response": str(response),
            "provider": selected_provider,
            "model": "gpt-3.5-turbo"
        }
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {selected_provider}: {str(e)}")
        
        # Fallback –Ω–∞ –¥–µ–º–æ –æ—Ç–≤–µ—Ç
        return {
            "success": False,
            "response": f"–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI —á–∞—Ç. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'. –°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ.",
            "provider": "demo",
            "model": "fallback",
            "error": str(e)
        }

@app.route('/')
def index():
    return "BOOOMERANGS Simple G4F API —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/python/test', methods=['POST'])
def test():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    try:
        data = request.json or {}
        message = data.get('message', '–ü—Ä–∏–≤–µ—Ç!')
        
        result = get_simple_response(message, "You")
        return jsonify(result)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {str(e)}")
        return jsonify({
            "error": str(e),
            "response": f"–¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}",
            "provider": "test-error"
        }), 500

@app.route('/python/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    try:
        data = request.json or {}
        message = data.get('message', '')
        provider = data.get('provider', 'You')
        
        if not message:
            return jsonify({"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        result = get_simple_response(message, provider)
        return jsonify(result)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {str(e)}")
        return jsonify({
            "error": str(e),
            "response": f"–û—à–∏–±–∫–∞: {str(e)}",
            "provider": "error"
        }), 500

if __name__ == '__main__':
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ BOOOMERANGS G4F —Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(host='0.0.0.0', port=5005, debug=False)