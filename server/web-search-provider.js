/**
 * Web Search Provider - –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö API –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 */

// –ò–º–ø–æ—Ä—Ç fetch –¥–ª—è Node.js —Å—Ä–µ–¥—ã  
import fetch from 'node-fetch';

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param {string} query - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} –ù—É–∂–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫
 */
function needsWebSearch(query) {
    const searchKeywords = [
        // –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        '—Å–µ–π—á–∞—Å', '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞', '–∑–∞–≤—Ç—Ä–∞', '—Ç–µ–∫—É—â–∏–π', '–∞–∫—Ç—É–∞–ª—å–Ω—ã–π', '–ø–æ—Å–ª–µ–¥–Ω–∏–π',
        '—Å–≤–µ–∂–∏–π', '–Ω–æ–≤—ã–π', '–Ω–µ–¥–∞–≤–Ω–∏–π', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π',
        
        // –ù–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è
        '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–æ–±—ã—Ç–∏—è', '–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç', '—Å–ª—É—á–∏–ª–æ—Å—å', '–ø—Ä–æ–∏–∑–æ—à–ª–æ',
        
        // –ü–æ–≥–æ–¥–∞
        '–ø–æ–≥–æ–¥–∞', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '–≤–µ—Ç–µ—Ä', '–ø—Ä–æ–≥–Ω–æ–∑',
        
        // –§–∏–Ω–∞–Ω—Å—ã
        '–∫—É—Ä—Å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–∫–æ—Ç–∏—Ä–æ–≤–∫–∏', '–∞–∫—Ü–∏–∏', '–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ', '—Ä—É–±–ª—å',
        
        // –ü–æ–∏—Å–∫ –º–µ—Å—Ç –∏ –æ–±—ä–µ–∫—Ç–æ–≤
        '–≥–¥–µ –Ω–∞–π—Ç–∏', '–≥–¥–µ –∫—É–ø–∏—Ç—å', '–∞–¥—Ä–µ—Å', '–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
        '—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏', '–æ—Ç–∫—Ä—ã—Ç –ª–∏', '–∑–∞–∫—Ä—ã—Ç –ª–∏', '–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã',
        
        // –û–Ω–ª–∞–π–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        '—Å—Ç–∞—Ç—É—Å', '–¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏', '—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–π—Ç', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
    ];
    
    const lowerQuery = query.toLowerCase();
    return searchKeywords.some(keyword => lowerQuery.includes(keyword));
}

/**
 * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo Instant Answer API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 */
async function searchDuckDuckGo(query) {
    try {
        console.log('üîç [SEARCH] === –ù–ê–ß–ò–ù–ê–ï–ú DUCKDUCKGO –ü–û–ò–°–ö ===');
        console.log('üîç [SEARCH] –¢–∏–ø fetch:', typeof fetch);
        console.log('üîç [SEARCH] Fetch –æ–±—ä–µ–∫—Ç:', fetch);
        
        const encodedQuery = encodeURIComponent(query);
        const url = `https://api.duckduckgo.com/?q=${encodedQuery}&format=json&no_html=1&skip_disambig=1`;
        console.log('üîç [SEARCH] URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', url);
        
        const response = await fetch(url, {
            headers: {
                'User-Agent': 'BOOOMERANGS-Search/1.0'
            }
        });
        
        console.log('üîç [SEARCH] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
        
        if (!response.ok) {
            throw new Error(`DuckDuckGo API error: ${response.status}`);
        }
        
        const data = await response.json();
        
        let results = [];
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        if (data.Abstract) {
            results.push({
                title: data.Heading || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                snippet: data.Abstract,
                url: data.AbstractURL,
                source: 'DuckDuckGo'
            });
        }
        
        // –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
        if (data.RelatedTopics && data.RelatedTopics.length > 0) {
            data.RelatedTopics.slice(0, 3).forEach(topic => {
                if (topic.Text) {
                    results.push({
                        title: topic.FirstURL ? '–°–≤—è–∑–∞–Ω–Ω–∞—è —Ç–µ–º–∞' : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                        snippet: topic.Text,
                        url: topic.FirstURL,
                        source: 'DuckDuckGo'
                    });
                }
            });
        }
        
        return {
            success: true,
            results: results,
            provider: 'DuckDuckGo'
        };
        
    } catch (error) {
        console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ DuckDuckGo:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'DuckDuckGo'
        };
    }
}

/**
 * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API Wikipedia
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 */
async function searchWikipedia(query) {
    try {
        // –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π
        const searchUrl = `https://ru.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(query)}`;
        
        const response = await fetch(searchUrl, {
            headers: {
                'User-Agent': 'BOOOMERANGS-Search/1.0'
            },
            timeout: 5000
        });
        
        if (!response.ok) {
            throw new Error(`Wikipedia API error: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.extract) {
            return {
                success: true,
                results: [{
                    title: data.title,
                    snippet: data.extract,
                    url: data.content_urls?.desktop?.page,
                    source: 'Wikipedia'
                }],
                provider: 'Wikipedia'
            };
        }
        
        return {
            success: false,
            error: 'No results found',
            provider: 'Wikipedia'
        };
        
    } catch (error) {
        console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ Wikipedia:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'Wikipedia'
        };
    }
}

/**
 * –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π API
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
 */
async function searchNews(query) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π RSS –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        const rssFeeds = [
            'https://lenta.ru/rss',
            'https://www.rbc.ru/rss/news'
        ];
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ RSS (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
        for (const feedUrl of rssFeeds) {
            try {
                const response = await fetch(feedUrl, {
                    timeout: 5000,
                    headers: {
                        'User-Agent': 'BOOOMERANGS-Search/1.0'
                    }
                });
                
                if (response.ok) {
                    return {
                        success: true,
                        results: [{
                            title: '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏',
                            snippet: '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∞–π—Ç—ã –Ω–∞–ø—Ä—è–º—É—é.',
                            url: feedUrl,
                            source: 'News RSS'
                        }],
                        provider: 'News'
                    };
                }
            } catch (err) {
                continue;
            }
        }
        
        return {
            success: false,
            error: 'No news sources available',
            provider: 'News'
        };
        
    } catch (error) {
        console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ News:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'News'
        };
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 */
async function performWebSearch(query, options = {}) {
    console.log(`üîç [SEARCH] –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è: "${query}"`);
    
    const searchProviders = [];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if (query.toLowerCase().includes('–Ω–æ–≤–æ—Å—Ç–∏') || query.toLowerCase().includes('—Å–æ–±—ã—Ç–∏')) {
        searchProviders.push(() => searchNews(query));
    }
    
    // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∏
    searchProviders.push(
        () => searchDuckDuckGo(query),
        () => searchWikipedia(query)
    );
    
    const allResults = [];
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const searchPromises = searchProviders.map(async (searchFunc) => {
        try {
            const result = await searchFunc();
            if (result.success && result.results.length > 0) {
                allResults.push(...result.results);
            }
            return result;
        } catch (error) {
            console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞:', error);
            return { success: false, error: error.message };
        }
    });
    
    await Promise.allSettled(searchPromises);
    
    if (allResults.length === 0) {
        return {
            success: false,
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ',
            results: []
        };
    }
    
    console.log(`üîç [SEARCH] –ù–∞–π–¥–µ–Ω–æ ${allResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    
    return {
        success: true,
        results: allResults.slice(0, 5), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        searchQuery: query
    };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è AI
 * @param {Object} searchResults - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è AI
 */
function formatSearchResultsForAI(searchResults) {
    if (!searchResults.success || searchResults.results.length === 0) {
        return '';
    }
    
    let formatted = '\nüì° –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:\n';
    
    searchResults.results.forEach((result, index) => {
        formatted += `\n${index + 1}. **${result.title}** (${result.source})\n`;
        formatted += `   ${result.snippet}\n`;
        if (result.url) {
            formatted += `   üîó ${result.url}\n`;
        }
    });
    
    formatted += '\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n';
    
    return formatted;
}

module.exports = {
    needsWebSearch,
    performWebSearch,
    formatSearchResultsForAI,
    searchDuckDuckGo,
    searchWikipedia,
    searchNews
};