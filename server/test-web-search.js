/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞
 */

const { needsWebSearch, performWebSearch, formatSearchResultsForAI } = require('./web-search-provider');

async function testWebSearch() {
    console.log('üîç –¢–ï–°–¢–ò–†–£–ï–ú –í–ï–ë-–ü–û–ò–°–ö...');
    
    const testQueries = [
        '–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ',
        '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
        '–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è',
        '–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ' // –Ω–µ –¥–æ–ª–∂–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫
    ];
    
    for (const query of testQueries) {
        console.log(`\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${query}" ---`);
        
        const needsSearch = needsWebSearch(query);
        console.log('–ù—É–∂–µ–Ω –ø–æ–∏—Å–∫:', needsSearch);
        
        if (needsSearch) {
            try {
                const results = await performWebSearch(query);
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', results.success ? `${results.results.length} –Ω–∞–π–¥–µ–Ω–æ` : '–û—à–∏–±–∫–∞');
                
                if (results.success) {
                    const formatted = formatSearchResultsForAI(results);
                    console.log('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è AI:', formatted.substring(0, 200) + '...');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message);
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testWebSearch().then(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç –≤–µ–±-–ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');
}).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
});