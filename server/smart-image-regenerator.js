/**
 * –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */

const sharp = require('sharp');

/**
 * –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function analyzeImageColors(imageBuffer) {
  try {
    const image = sharp(imageBuffer);
    const { width, height } = await image.metadata();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const { data } = await image.raw().toBuffer({ resolveWithObject: true });
    
    const colorCounts = {};
    const sampleStep = 10; // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 10-–π –ø–∏–∫—Å–µ–ª—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    
    for (let y = 0; y < height; y += sampleStep) {
      for (let x = 0; x < width; x += sampleStep) {
        const pixelIndex = (y * width + x) * 3;
        const r = data[pixelIndex];
        const g = data[pixelIndex + 1];
        const b = data[pixelIndex + 2];
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ü–≤–µ—Ç–∞
        const colorKey = `${Math.floor(r/20)*20}-${Math.floor(g/20)*20}-${Math.floor(b/20)*20}`;
        colorCounts[colorKey] = (colorCounts[colorKey] || 0) + 1;
      }
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞
    const sortedColors = Object.entries(colorCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([color]) => {
        const [r, g, b] = color.split('-').map(Number);
        return { r, g, b };
      });
    
    return sortedColors;
    
  } catch (error) {
    console.error('‚ùå [REGENERATOR] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤:', error);
    return [{ r: 128, g: 128, b: 128 }];
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ü–≤–µ—Ç–∞–º
 */
function determineImageStyle(colors) {
  const mainColor = colors[0];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É
  const isDark = colors.every(c => (c.r + c.g + c.b) / 3 < 120);
  const isBright = colors.some(c => (c.r + c.g + c.b) / 3 > 200);
  const hasWarmColors = colors.some(c => c.r > c.g && c.r > c.b);
  const hasCoolColors = colors.some(c => c.b > c.r && c.b > c.g);
  
  let style = '';
  
  if (isDark) {
    style += 'dark atmosphere, moody lighting, ';
  } else if (isBright) {
    style += 'bright, well-lit, cheerful, ';
  }
  
  if (hasWarmColors && !hasCoolColors) {
    style += 'warm color palette, ';
  } else if (hasCoolColors && !hasWarmColors) {
    style += 'cool color palette, ';
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
  const avgSaturation = colors.reduce((sum, c) => {
    const max = Math.max(c.r, c.g, c.b);
    const min = Math.min(c.r, c.g, c.b);
    return sum + (max - min) / max;
  }, 0) / colors.length;
  
  if (avgSaturation > 0.5) {
    style += 'vibrant colors, ';
  } else {
    style += 'muted colors, ';
  }
  
  return style;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function extractKeywordsFromUrl(imageUrl) {
  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
    const decodedUrl = decodeURIComponent(imageUrl);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ URL Pollinations
    const promptMatch = decodedUrl.match(/prompt\/(.+?)(?:\?|$)/);
    if (!promptMatch) return [];
    
    const prompt = promptMatch[1];
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
    const words = prompt.split(/[^\w\u0400-\u04FF]+/) // –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
      .filter(word => word.length > 2)
      .filter(word => !['high', 'quality', 'detailed', 'professional', 'draw', 'create'].includes(word.toLowerCase()));
    
    return words;
    
  } catch (error) {
    console.error('‚ùå [REGENERATOR] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error);
    return [];
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 */
function createModifiedDescription(originalKeywords, objectToRemove, imageStyle) {
  // –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
  const removePatterns = [
    objectToRemove,
    objectToRemove.slice(0, -1), // —É–±–∏—Ä–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    objectToRemove + '–æ–º',
    objectToRemove + '–∞–º–∏',
    objectToRemove + '–∏'
  ];
  
  let filteredKeywords = originalKeywords.filter(keyword => {
    const lowerKeyword = keyword.toLowerCase();
    return !removePatterns.some(pattern => 
      lowerKeyword.includes(pattern.toLowerCase()) || 
      pattern.toLowerCase().includes(lowerKeyword)
    );
  });
  
  // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ
  if (filteredKeywords.length < 2 && originalKeywords.length > 0) {
    filteredKeywords = originalKeywords.slice(0, 2);
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  let newDescription = filteredKeywords.join(' ');
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  newDescription += `, ${imageStyle}`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
  newDescription += ' high quality, detailed, professional';
  
  return newDescription;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
async function regenerateImageWithoutObject(imageUrl, objectToRemove) {
  try {
    console.log(`üîÑ [REGENERATOR] –ù–∞—á–∏–Ω–∞–µ–º —É–º–Ω—É—é —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é`);
    console.log(`üéØ [REGENERATOR] –£–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç: ${objectToRemove}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageUtils = require('./image-utils');
    const imageBuffer = await imageUtils.loadImageFromUrl(imageUrl);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª—å
    const colors = await analyzeImageColors(imageBuffer);
    const style = determineImageStyle(colors);
    
    console.log(`üé® [REGENERATOR] –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${style}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ URL
    const keywords = extractKeywordsFromUrl(imageUrl);
    console.log(`üî§ [REGENERATOR] –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${keywords.join(', ')}`);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const newDescription = createModifiedDescription(keywords, objectToRemove, style);
    console.log(`üìù [REGENERATOR] –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${newDescription}`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const aiImageGenerator = require('./ai-image-generator');
    const result = await aiImageGenerator.generateImage(newDescription, 'realistic');
    
    if (result.success) {
      return {
        success: true,
        imageUrl: result.imageUrl,
        message: `–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ "${objectToRemove}", —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞`,
        originalKeywords: keywords,
        newDescription: newDescription,
        style: style
      };
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
    
  } catch (error) {
    console.error('‚ùå [REGENERATOR] –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message,
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞'
    };
  }
}

module.exports = {
  regenerateImageWithoutObject,
  analyzeImageColors,
  determineImageStyle,
  extractKeywordsFromUrl
};