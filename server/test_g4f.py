import g4f

# –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
g4f.debug.logging = True

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥ —Å–µ–±—è)
messages = [
    {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞–π —è—Å–Ω–æ –∏ –ø–æ –¥–µ–ª—É."},
    {"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Å–º–æ—Å–µ."}
]

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
models = {
    "Phind": g4f.Provider.Phind,
    "Poe": g4f.Provider.Poe,
    "Gemini": g4f.Provider.Gemini
}

# –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
for name, provider in models.items():
    print(f"\nüîπ –û—Ç–≤–µ—Ç –æ—Ç: {name}\n" + "-" * 40)
    try:
        response = g4f.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ò–ª–∏ "gemini-pro" –¥–ª—è Gemini
            provider=provider,
            messages=messages,
            stream=False
        )
        print(response)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å {name}: {e}")