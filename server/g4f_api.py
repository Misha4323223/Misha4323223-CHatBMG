#!/usr/bin/env python3
"""
G4F API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–∞—Å—Ç–æ—è—â–∏–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Qwen, ChatGPT, Gemini, Phind
"""

import asyncio
import json
import sys
from flask import Flask, request, jsonify
from flask_cors import CORS

try:
    import g4f
    from g4f.client import Client
    print("‚úÖ G4F –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    available_providers = g4f.Provider.__all__ if hasattr(g4f.Provider, '__all__') else []
    print(f"üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {len(available_providers)}")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ G4F: {e}")
    sys.exit(1)

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
PROVIDERS = {
    'qwen': ['You', 'Bing', 'ChatGpt'],
    'chatgpt': ['ChatGpt', 'You', 'Bing'],
    'gemini': ['Gemini', 'You', 'Bing'],
    'phind': ['Phind', 'ChatGpt', 'You'],
    'general': ['You', 'Bing', 'ChatGpt', 'Gemini']
}

class G4FManager:
    def __init__(self):
        self.client = Client()
        print("üöÄ G4F –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def get_response(self, message, provider_type='general', max_tokens=500):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        providers = PROVIDERS.get(provider_type, PROVIDERS['general'])
        
        for provider_name in providers:
            try:
                print(f"üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ g4f
                response = g4f.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": message}],
                    provider=getattr(g4f.Provider, provider_name, None)
                )
                
                if response and isinstance(response, str) and len(response.strip()) > 10:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {provider_name}")
                    return {
                        'success': True,
                        'response': response.strip(),
                        'provider': provider_name,
                        'model': 'gpt-3.5-turbo'
                    }
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ {provider_name}: {str(e)}")
                continue
        
        return {
            'success': False,
            'error': '–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
            'provider': 'None'
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
g4f_manager = G4FManager()

@app.route('/chat', methods=['POST'])
async def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        provider_type = data.get('provider', 'general')
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        print(f"üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {message[:50]}...")
        print(f"üéØ –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider_type}")
        
        result = await g4f_manager.get_response(message, provider_type)
        return jsonify(result)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /chat: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'provider': 'Error'
        }), 500

@app.route('/providers', methods=['GET'])
def get_providers():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    return jsonify({
        'providers': list(PROVIDERS.keys()),
        'status': 'active'
    })

@app.route('/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'status': 'healthy',
        'g4f_version': g4f.__version__ if hasattr(g4f, '__version__') else 'unknown'
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ G4F API —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("  POST /chat - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π AI")
    print("  GET /providers - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("  GET /health - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞")
    
    app.run(host='0.0.0.0', port=5001, debug=False)