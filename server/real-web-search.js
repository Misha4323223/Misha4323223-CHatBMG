/**
 * –ù–∞—Å—Ç–æ—è—â–∏–π –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */

const fetch = require('node-fetch');

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–µ–±-–ø–æ–∏—Å–∫–∞
 */
async function searchRealBusinesses(query) {
    console.log('üîç [REAL-SEARCH] –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è:', query);
    
    const results = [];
    
    // 1. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo Instant Answer API
    try {
        const ddgResults = await searchDuckDuckGo(query);
        results.push(...ddgResults);
    } catch (error) {
        console.log('üîç [REAL-SEARCH] DuckDuckGo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }
    
    // 2. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ OpenStreetMap —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    try {
        const osmResults = await searchOpenStreetMap(query);
        results.push(...osmResults);
    } catch (error) {
        console.log('üîç [REAL-SEARCH] OSM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }
    
    // 3. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ API —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    try {
        const yandexResults = await searchYandexPlaces(query);
        results.push(...yandexResults);
    } catch (error) {
        console.log('üîç [REAL-SEARCH] Yandex –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }
    
    console.log(`üîç [REAL-SEARCH] –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    return results.slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
}

/**
 * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
 */
async function searchDuckDuckGo(query) {
    try {
        const searchQuery = encodeURIComponent(query);
        const url = `https://api.duckduckgo.com/?q=${searchQuery}&format=json&no_redirect=1&no_html=1&skip_disambig=1`;
        
        console.log('üîç [DDG] –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo...');
        
        const response = await fetch(url, {
            headers: {
                'User-Agent': 'BOOOMERANGS-Search/1.0'
            },
            timeout: 5000
        });
        
        if (!response.ok) {
            throw new Error('DuckDuckGo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        const data = await response.json();
        const results = [];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if (data.Answer) {
            results.push({
                title: 'üîç –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç',
                description: data.Answer,
                url: data.AbstractURL || `https://duckduckgo.com/?q=${searchQuery}`,
                source: 'DuckDuckGo Instant'
            });
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
        if (data.RelatedTopics && data.RelatedTopics.length > 0) {
            data.RelatedTopics.slice(0, 3).forEach(topic => {
                if (topic.Text && topic.FirstURL) {
                    results.push({
                        title: 'üìÑ ' + topic.Text.split(' - ')[0],
                        description: topic.Text,
                        url: topic.FirstURL,
                        source: 'DuckDuckGo'
                    });
                }
            });
        }
        
        console.log(`üîç [DDG] –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
        return results;
        
    } catch (error) {
        console.log('üîç [DDG] –û—à–∏–±–∫–∞:', error.message);
        return [];
    }
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ OpenStreetMap
 */
async function searchOpenStreetMap(query) {
    try {
        console.log('üîç [OSM] –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ OpenStreetMap...');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const searchVariants = [
            query,
            query.replace(/–º–∞–≥–∞–∑–∏–Ω/gi, 'shop'),
            query.replace(/–æ–¥–µ–∂–¥–∞/gi, 'clothes'),
            query + ' —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä'
        ];
        
        const allResults = [];
        
        for (const searchTerm of searchVariants) {
            const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(searchTerm)}&format=json&limit=5&addressdetails=1&countrycodes=ru&extratags=1`;
            
            try {
                const response = await fetch(url, {
                    headers: {
                        'User-Agent': 'BOOOMERANGS-Business-Search/1.0'
                    },
                    timeout: 3000
                });
                
                if (response.ok) {
                    const data = await response.json();
                    console.log(`üîç [OSM] –í–∞—Ä–∏–∞–Ω—Ç "${searchTerm}" - –Ω–∞–π–¥–µ–Ω–æ: ${data.length}`);
                    
                    data.forEach(place => {
                        const name = place.display_name.split(',')[0];
                        const address = place.display_name;
                        
                        let description = `üìç ${address}`;
                        if (place.extratags?.phone) description += `\nüìû ${place.extratags.phone}`;
                        if (place.extratags?.website) description += `\nüåê ${place.extratags.website}`;
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É
                        let icon = 'üìç';
                        const lowerName = name.toLowerCase();
                        if (lowerName.includes('–º–∞–≥–∞–∑–∏–Ω') || place.type === 'shop') icon = 'üè™';
                        else if (lowerName.includes('—Ü–µ–Ω—Ç—Ä')) icon = 'üè¢';
                        
                        allResults.push({
                            title: `${icon} ${name}`,
                            description: description,
                            url: `https://www.openstreetmap.org/#map=18/${place.lat}/${place.lon}`,
                            source: 'OpenStreetMap',
                            coordinates: `${place.lat}, ${place.lon}`
                        });
                    });
                }
            } catch (err) {
                console.log(`üîç [OSM] –û—à–∏–±–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ "${searchTerm}":`, err.message);
            }
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const uniqueResults = allResults.filter((result, index, self) => 
            index === self.findIndex(r => r.title === result.title)
        );
        
        console.log(`üîç [OSM] –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${uniqueResults.length}`);
        return uniqueResults.slice(0, 5);
        
    } catch (error) {
        console.log('üîç [OSM] –û—à–∏–±–∫–∞:', error.message);
        return [];
    }
}

/**
 * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–µ API —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */
async function searchYandexPlaces(query) {
    try {
        console.log('üîç [YANDEX] –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã...');
        
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        const results = [];
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
        const cityMatch = query.match(/(–≤|–æ–∫–æ–ª–æ|—Ä—è–¥–æ–º)\s+([–∞-—è—ë\s\-]+)/i);
        const city = cityMatch ? cityMatch[2].trim() : '–†–æ—Å—Å–∏–∏';
        
        const searchLinks = [
            {
                title: `üó∫Ô∏è –ü–æ–∏—Å–∫ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö: –º–∞–≥–∞–∑–∏–Ω—ã –≤ ${city}`,
                description: `–ù–∞–π–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –æ–¥–µ–∂–¥—ã –≤ ${city} —Å –∞–¥—Ä–µ—Å–∞–º–∏, —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏ –∏ –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö`,
                url: `https://yandex.ru/maps/?text=${encodeURIComponent(query)}`,
                source: 'Yandex Maps'
            },
            {
                title: `üè™ 2–ì–ò–°: —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –≤ ${city}`,
                description: `–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –æ–¥–µ–∂–¥—ã –≤ ${city} - –∞–¥—Ä–µ—Å–∞, –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã`,
                url: `https://2gis.ru/search/${encodeURIComponent(query)}`,
                source: '2GIS'
            },
            {
                title: `üõçÔ∏è –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: ${city}`,
                description: `–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –æ–¥–µ–∂–¥—ã –≤ ${city} —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏`,
                url: `https://www.list-org.com/search?type=company&q=${encodeURIComponent(query)}`,
                source: '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫'
            }
        ];
        
        results.push(...searchLinks);
        
        console.log(`üîç [YANDEX] –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: ${results.length}`);
        return results;
        
    } catch (error) {
        console.log('üîç [YANDEX] –û—à–∏–±–∫–∞:', error.message);
        return [];
    }
}

module.exports = {
    searchRealBusinesses
};