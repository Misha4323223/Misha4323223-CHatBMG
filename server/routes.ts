import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import multer from 'multer';
import path from 'path';
import fs from 'fs';

export async function registerRoutes(app: Express): Promise<Server> {
  // –ë–∞–∑–æ–≤—ã–µ API –¥–ª—è —á–∞—Ç–∞
  app.get('/api/chat-sessions/:username', async (req, res) => {
    try {
      const { username } = req.params;
      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);
      
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      res.json({ sessions: [] });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π' });
    }
  });

  // API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π —Ä–æ—É—Ç–µ—Ä
  app.post('/api/ai/smart-chat', async (req, res) => {
    try {
      const { message, userId, sessionId } = req.body;
      
      console.log(`üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message?.substring(0, 50)}...`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ä–æ—É—Ç–µ—Ä —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
      const { default: smartRouter } = await import('./smart-router-old.js');
      
      let response;
      if (typeof smartRouter.routeMessage === 'function') {
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ä–æ—É—Ç–µ—Ä —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏...');
        response = await smartRouter.routeMessage(message);
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞');
      } else {
        // Fallback –∫ G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
        const { default: g4fProvider } = await import('./g4f-provider.js');
        console.log('üîÑ Fallback –∫ G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É...');
        response = await g4fProvider.getChatResponse(message, { provider: 'auto' });
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
      }
      
      res.json(response);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' 
      });
    }
  });

  // –°—Ç—Ä–∏–º–∏–Ω–≥ endpoint –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  app.get('/api/streaming/chat', async (req, res) => {
    try {
      const message = req.query.message as string;
      const sessionId = req.query.sessionId as string;
      
      if (!message) {
        return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
      }
      
      console.log('üöÄ –°–¢–†–ò–ú–ò–ù–ì –ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù!');
      console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞:', message);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSE –∑–∞–≥–æ–ª–æ–≤–∫–∏
      res.writeHead(200, {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Cache-Control'
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π —Ä–æ—É—Ç–µ—Ä
      const { default: smartRouter } = await import('./smart-router-old.js');
      console.log('üîç –ó–∞–≥—Ä—É–∂–µ–Ω smartRouter:', typeof smartRouter);
      
      let response;
      try {
        if (typeof smartRouter.routeMessage === 'function') {
          console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ä–æ—É—Ç–µ—Ä —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏...');
          response = await smartRouter.routeMessage(message);
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞');
        } else {
          // Fallback –∫ G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
          const { default: g4fProvider } = await import('./g4f-provider.js');
          console.log('üîÑ Fallback –∫ G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É...');
          response = await g4fProvider.getChatResponse(message, { provider: 'auto' });
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
        }
      } catch (error) {
        console.log('‚ùå –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç...');
        response = {
          success: true,
          response: '–î–µ–º–æ-–æ—Ç–≤–µ—Ç –æ—Ç BOOOMERANGS AI. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.',
          provider: 'DEMO'
        };
      }
      
      if (response.success) {
        const fullText = response.response;
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥:', fullText.substring(0, 50) + '...');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ —á–∞—Å—Ç—è–º
        const chunkSize = 3;
        let currentIndex = 0;
        
        const sendNextChunk = async () => {
          if (currentIndex < fullText.length) {
            const chunk = fullText.slice(currentIndex, currentIndex + chunkSize);
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º chunk: "${chunk}"`);
            
            res.write(`data: ${JSON.stringify({ 
              type: 'chunk', 
              content: chunk,
              provider: response.provider 
            })}\n\n`);
            currentIndex += chunkSize;
            setTimeout(sendNextChunk, 50);
          } else {
            console.log('‚úÖ –°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
            
            res.write(`data: ${JSON.stringify({ 
              type: 'complete',
              provider: response.provider,
              category: response.category || 'general'
            })}\n\n`);
            res.end();
          }
        };
        
        sendNextChunk();
      } else {
        res.write(`data: ${JSON.stringify({ type: 'error', message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞' })}\n\n`);
        res.end();
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞:', error);
      res.write(`data: ${JSON.stringify({ type: 'error', message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })}\n\n`);
      res.end();
    }
  });

  // API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.post('/api/analyze-image', async (req, res) => {
    try {
      console.log('üñºÔ∏è –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      
      res.json({
        success: true,
        analysis: {
          description: '–î–µ–º–æ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          objects: ['–¥–µ–º–æ –æ–±—ä–µ–∫—Ç'],
          colors: ['—Å–∏–Ω–∏–π', '–±–µ–ª—ã–π'],
          mood: '–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ'
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞' });
    }
  });

  // API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.post('/api/generate-image', async (req, res) => {
    try {
      const { prompt } = req.body;
      console.log(`üé® –ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${prompt}`);
      
      res.json({
        success: true,
        imageUrl: '/demo-image.jpg',
        prompt: prompt
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏' });
    }
  });

  // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
  app.get('/api/status', (req, res) => {
    res.json({
      status: 'running',
      message: '–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞!',
      timestamp: new Date().toISOString(),
      version: '2.0-clean'
    });
  });

  // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
  const httpServer = createServer(app);
  return httpServer;
}