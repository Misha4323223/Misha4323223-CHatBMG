import express, { type Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { setupWebSocket } from "./ws";
import { setupProxyMiddleware } from "./middleware/proxy";
import { authMiddleware } from "./middleware/auth";
import { z } from "zod";
import { authSchema, messageSchema } from "@shared/schema";

// –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const Logger = {
  info: (message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    console.log(`üîµ [${timestamp}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  success: (message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    console.log(`‚úÖ [${timestamp}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  error: (message: string, error?: any) => {
    const timestamp = new Date().toISOString();
    console.error(`‚ùå [${timestamp}] ${message}`, error ? error : '');
  },
  warning: (message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    console.warn(`‚ö†Ô∏è [${timestamp}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  ai: (message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    console.log(`ü§ñ [${timestamp}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
import * as path from 'path';
import { fileURLToPath } from 'url';
import { createRequire } from 'module';
import multer from 'multer';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const require = createRequire(__filename);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB –ª–∏–º–∏—Ç
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
    }
  }
});
const svgGenerator = require('./svg-generator');
const g4fHandlers = require('./g4f-handlers');
const directAiRoutes = require('./direct-ai-routes');
const deepspeekProvider = require('./deepspeek-provider');
const chatFreeProvider = require('./chatfree-provider');

export async function registerRoutes(app: Express): Promise<Server> {
  // Create HTTP server
  const httpServer = createServer(app);
  
  // Setup WebSocket server
  setupWebSocket(httpServer, storage);
  
  // Setup proxy middleware
  setupProxyMiddleware(app);
  
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  app.use(express.static(path.join(process.cwd())));
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.use('/image-generator', (req, res) => {
    res.redirect('/api/svg');
  });
  
  // API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.use('/api/svg', svgGenerator);
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å AI
  const aiImageGenerator = require('./ai-image-generator');

  // API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
  app.post("/api/ai-image/generate", async (req, res) => {
    try {
      const { prompt, style = 'realistic' } = req.body;
      
      if (!prompt) {
        return res.status(400).json({ 
          success: false, 
          error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (prompt)'
        });
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const result = await aiImageGenerator.generateImage(prompt, style);
      
      res.json(result);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      res.status(500).json({ 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      });
    }
  });
  
  // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
  app.use('/output', (req, res, next) => {
    const outputPath = path.join(__dirname, '..', 'output');
    res.sendFile(req.path, { root: outputPath });
  });
  
  // –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  app.get('/test', (req, res) => {
    res.sendFile('test-page.html', { root: '.' });
  });
  
  // –î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.get('/demo', (req, res) => {
    res.sendFile('demo.html', { root: '.' });
  });
  
  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  app.get('/', (req, res) => {
    res.sendFile('index.html', { root: '.' });
  });
  
  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏
  app.get('/debug', (req, res) => {
    res.sendFile('debug-info.html', { root: '.' });
  });

  // G4F —á–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  app.get('/g4f-chat', (req, res) => {
    res.sendFile('g4f-chat.html', { root: '.' });
  });
  
  // –ü—Ä–æ—Å—Ç–æ–π G4F —Ç–µ—Å—Ç
  app.get('/simple-g4f', (req, res) => {
    res.sendFile('simple-g4f.html', { root: '.' });
  });
  
  // –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç G4F
  app.get('/direct-g4f', (req, res) => {
    res.sendFile('direct-g4f-test.html', { root: '.' });
  });
  
  // –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è G4F —á–∞—Ç–∞
  app.get('/standalone', (req, res) => {
    res.sendFile('standalone-g4f.html', { root: '.' });
  });
  
  // BOOOMERANGS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  app.get('/booom', (req, res) => {
    res.sendFile('booomerangs-main.html', { root: '.' });
  });
  
  // BOOOMERANGS –Ω–æ–≤—ã–π –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
  app.get('/ai', (req, res) => {
    res.sendFile('booomerangs-direct.html', { root: '.' });
  });
  
  // BOOOMERANGS –Ω–æ–≤—ã–π –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  app.get('/new', (req, res) => {
    res.sendFile('booomerangs-new.html', { root: '.' });
  });
  
  // BOOOMERANGS —á–∞—Ç —Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ (–ø—Ä—è–º–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
  app.get('/chat-ai', (req, res) => {
    res.sendFile('booomerangs-chat.html', { root: '.' });
  });
  
  // BOOOMERANGS —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—á–∞—Ç + –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
  app.get('/unified', (req, res) => {
    res.sendFile('public/unified-interface.html', { root: '.' });
  });
  
  // BOOOMERANGS —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.get('/fixed', (req, res) => {
    res.sendFile('public/fixed-interface.html', { root: '.' });
  });
  
  // BOOOMERANGS —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  app.get('/image-generator', (req, res) => {
    res.sendFile('public/image-generator.html', { root: '.' });
  });
  
  // BOOOMERANGS AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.get('/ai-images', (req, res) => {
    res.sendFile('public/ai-image-app.html', { root: '.' });
  });
  
  // BOOOMERANGS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º
  app.get('/booom-streaming', (req, res) => {
    res.sendFile('booomerangs-app-streaming-fixed.html', { root: '.' });
  });
  
  // BOOOMERANGS —Å Qwen AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
  app.get('/qwen', (req, res) => {
    res.sendFile('booomerangs-qwen.html', { root: '.' });
  });
  
  // BOOOMERANGS —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º –æ—Ç–≤–µ—Ç–æ–≤
  app.get('/streaming', (req, res) => {
    res.sendFile('booomerangs-streaming.html', { root: '.' });
  });
  
  // BOOOMERANGS –±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞)
  app.get('/quick', (req, res) => {
    res.sendFile('booomerangs-quick.html', { root: '.' });
  });
  
  // BOOOMERANGS —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞)
  app.get('/stable', (req, res) => {
    res.sendFile('booomerangs-stable.html', { root: '.' });
  });
  
  // BOOOMERANGS —Å Flask-—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º (—Å–∞–º–∞—è –Ω–∞–¥–µ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  app.get('/flask', (req, res) => {
    res.sendFile('booomerangs-flask-stream.html', { root: '.' });
  });
  
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —É–º–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–∞ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
  app.get('/smart-chat', (req, res) => {
    res.sendFile('booomerangs-smart-chat.html', { root: '.' });
  });
  
  // –ö–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  app.get('/team-chat', (req, res) => {
    res.sendFile('team-chat.html', { root: '.' });
  });
  
  // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
  app.use('/api/g4f', g4fHandlers);
  
  // API —Å –ø—Ä—è–º—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
  app.use('/api/direct-ai', directAiRoutes);
  
  // API —Å Python-–≤–µ—Ä—Å–∏–µ–π G4F –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
  
  // –û—Å–Ω–æ–≤–Ω–æ–π API –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä—è–º–æ –≤ routes.ts (—Å—Ç—Ä–æ–∫–∞ 1322)
  
  // API –¥–ª—è Flask-—Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–Ω–∞–¥–µ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
  const flaskStreamBridge = require('./stream-flask-bridge');
  app.use('/api/flask-stream', flaskStreamBridge);
  
  // API –¥–ª—è DeepSpeek - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  const deepspeekRoutes = require('./deepspeek-routes');
  app.use('/api/deepspeek', deepspeekRoutes);
  
  // API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
  
  // API –¥–ª—è Ollama - –ª–æ–∫–∞–ª—å–Ω—ã–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  const ollamaProvider = require('./ollama-provider');
  app.use('/api/ollama', ollamaProvider);
  
  // API –¥–ª—è ChatFree –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  app.use('/api/chatfree', chatFreeProvider);
  
  // API –¥–ª—è FreeChat (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
  
  // API –¥–ª—è Claude –æ—Ç Anthropic —á–µ—Ä–µ–∑ Python G4F
  const claudeProvider = require('./claude-provider');
  app.use('/api/claude', claudeProvider);
  
  // API –¥–ª—è DeepInfra - –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
  const deepInfraProvider = require('./deepinfra-provider');
  app.use('/api/deepinfra', deepInfraProvider);
  
  // API –¥–ª—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const multimodalProvider = require('./multimodal-provider');
  app.use('/api/multimodal', multimodalProvider);
  
  // API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
  
  // API –¥–ª—è —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
  const smartRouter = require('./smart-router');
  app.use('/api/smart', smartRouter);

  // API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
  const chatHistory = require('./chat-history');
  const { insertChatSessionSchema, insertAiMessageSchema } = require('@shared/schema');

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
  app.post('/api/chat/sessions', async (req, res) => {
    try {
      const { userId, title } = req.body;
      
      if (!userId || !title) {
        return res.status(400).json({ 
          success: false, 
          error: 'userId –∏ title –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
      }

      const session = await chatHistory.createChatSession(userId, title);
      res.json({ success: true, session });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é' 
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  app.get('/api/chat/sessions', async (req, res) => {
    try {
      const userId = 1; // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const sessions = await chatHistory.getUserChatSessions(userId);
      res.json({ success: true, sessions });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏' 
      });
    }
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
  app.delete('/api/chat/sessions/:sessionId', async (req, res) => {
    try {
      const sessionId = parseInt(req.params.sessionId);
      console.log(`üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ${sessionId}`);
      
      const deleteResult = await chatHistory.deleteSession(sessionId);
      
      if (deleteResult) {
        console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞`);
        res.json({ success: true, message: '–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞' });
      } else {
        console.log(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞`);
        res.json({ success: true, message: '–°–µ—Å—Å–∏—è —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞' });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é' 
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get('/api/chat/sessions/:userId', async (req, res) => {
    try {
      const userId = parseInt(req.params.userId);
      const sessions = await chatHistory.getUserChatSessions(userId);
      res.json({ success: true, sessions });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏' 
      });
    }
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º AI –æ—Ç–≤–µ—Ç–æ–º
  app.post('/api/chat/sessions/:sessionId/messages', async (req, res) => {
    console.log('üö®üö®üö® –í–´–ó–í–ê–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö /api/chat/sessions/:sessionId/messages');
    console.log('üö® –ó–ê–ü–†–û–° –ö /api/chat/sessions/:sessionId/messages');
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
    console.log('üÜî ID —Å–µ—Å—Å–∏–∏:', req.params.sessionId);
    try {
      const sessionId = parseInt(req.params.sessionId);
      const messageData = { 
        ...req.body, 
        sessionId,
        timestamp: new Date().toISOString()
      };
      
      console.log('üíæ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageData);
      console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      const userMessage = await chatHistory.saveMessage(messageData);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI
      if (messageData.sender === 'user') {
        console.log('ü§ñ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', messageData.content);
        try {
          // –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –∑–∞–Ω–æ–≤–æ
          delete require.cache[require.resolve('./smart-router')];
          const smartRouter = require('./smart-router');
          const aiResponse = await smartRouter.getChatResponse(messageData.content, {
            userId: `session_${sessionId}`
          });
          
          console.log('üéØ AI –æ—Ç–≤–µ—Ç–∏–ª:', aiResponse);
          
          if (aiResponse && aiResponse.response) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ —Ç—É –∂–µ —Å–µ—Å—Å–∏—é
            const aiMessageData = {
              sessionId,
              content: aiResponse.response,
              sender: 'ai',
              provider: aiResponse.provider,
              timestamp: new Date().toISOString()
            };
            
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –ë–î:', aiMessageData);
            await chatHistory.saveMessage(aiMessageData);
            console.log('‚úÖ –û—Ç–≤–µ—Ç AI —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏—é');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É');
            res.json({ 
              success: true, 
              message: userMessage,
              aiResponse: aiResponse.response,
              provider: aiResponse.provider
            });
            return;
          } else {
            console.log('‚ö†Ô∏è AI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç');
          }
        } catch (aiError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ AI:', aiError);
        }
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± AI –æ—Ç–≤–µ—Ç–µ
      res.json({ 
        success: true, 
        message: userMessage,
        hasAiResponse: messageData.sender === 'user'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' 
      });
    }
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º AI –æ—Ç–≤–µ—Ç–æ–º (—Å—Ç–∞—Ä—ã–π –ø—É—Ç—å)
  app.post('/api/chat/messages', async (req, res) => {
    console.log('üö® –°–¢–ê–†–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –ò–°–ü–û–õ–¨–ó–£–ï–¢ /api/chat/messages');
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
    try {
      const messageData = req.body;
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å:', messageData);
      const message = await chatHistory.saveMessage(messageData);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI
      if (messageData.sender === 'user') {
        console.log('ü§ñ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', messageData.content);
        try {
          const smartRouter = require('./smart-router');
          const conversationMemory = require('./conversation-memory');
          
          // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–π
          const userId = `session_${messageData.sessionId || 'default'}`;
          const contextInfo = conversationMemory.getMessageContext(userId, messageData.content);
          
          console.log('üß† –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', {
            hasIntent: !!contextInfo.intent,
            isSearchQuery: contextInfo.intent?.isSearchQuery,
            location: contextInfo.intent?.location,
            contextLength: contextInfo.context?.length || 0
          });
          
          const aiResponse = await smartRouter.getChatResponse(messageData.content, {
            userId: userId,
            context: contextInfo.context,
            preferredProvider: contextInfo.currentProvider
          });
          
          console.log('üéØ AI –æ—Ç–≤–µ—Ç–∏–ª:', aiResponse);
          
          if (aiResponse && aiResponse.response) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
            const aiMessageData = {
              ...messageData,
              content: aiResponse.response,
              sender: 'ai',
              provider: aiResponse.provider,
              timestamp: new Date().toISOString()
            };
            
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI:', aiMessageData);
            await chatHistory.saveMessage(aiMessageData);
            console.log('‚úÖ –û—Ç–≤–µ—Ç AI —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —á–∞—Ç');
          }
        } catch (aiError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ AI:', aiError);
        }
      }
      
      res.json({ success: true, message });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' 
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏
  app.get('/api/chat/sessions/:sessionId/messages', async (req, res) => {
    try {
      const sessionId = parseInt(req.params.sessionId);
      console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}...`);
      
      const messages = await chatHistory.getSessionMessages(sessionId);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);
      
      // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ API
      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
      res.setHeader('Pragma', 'no-cache');
      res.setHeader('Expires', '0');
      
      res.json({ success: true, messages });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è' 
      });
    }
  });

  // API –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { users, messages } = require('@shared/schema');
  const { eq } = require('drizzle-orm');
  
  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  app.post('/api/auth/login', async (req, res) => {
    try {
      const { username, password } = req.body;
      
      if (!username || !password) {
        return res.status(400).json({ 
          success: false, 
          error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
      }

      const { db } = require('./db');
      const [user] = await db
        .select()
        .from(users)
        .where(eq(users.username, username));
        
      if (!user || user.password !== password) {
        return res.status(401).json({ 
          success: false, 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
        });
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω
      const token = `${user.id}_${Date.now()}_${Math.random().toString(36)}`;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
      await db
        .update(users)
        .set({ token, isOnline: true })
        .where(eq(users.id, user.id));
      
      res.json({ 
        success: true, 
        user: {
          id: user.id,
          username: user.username,
          displayName: user.displayName,
          token
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });
  
  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  app.post('/api/auth/logout', async (req, res) => {
    try {
      const { token } = req.body;
      
      if (token) {
        const { db } = require('./db');
        await db
          .update(users)
          .set({ token: null, isOnline: false })
          .where(eq(users.token, token));
      }
      
      res.json({ success: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  app.get('/api/auth/user', async (req, res) => {
    try {
      const token = req.headers.authorization?.replace('Bearer ', '');
      
      if (!token) {
        return res.status(401).json({ success: false, error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
      }

      const { db } = require('./db');
      const [user] = await db
        .select()
        .from(users)
        .where(eq(users.token, token));
        
      if (!user) {
        return res.status(401).json({ success: false, error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
      }
      
      res.json({ 
        success: true, 
        user: {
          id: user.id,
          username: user.username,
          displayName: user.displayName
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });

  // API –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º–ø–æ—Ä—Ç —É–∂–µ –≤—ã—à–µ)
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  app.post('/api/messages', async (req, res) => {
    try {
      const { senderId, receiverId, text } = req.body;
      
      if (!senderId || !receiverId || !text) {
        return res.status(400).json({ 
          success: false, 
          error: 'senderId, receiverId –∏ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
      }

      const { db } = require('./db');
      const [message] = await db
        .insert(messages)
        .values({ senderId, receiverId, text })
        .returning();
        
      res.json({ success: true, message });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  app.get('/api/messages/:userId1/:userId2', async (req, res) => {
    try {
      const { userId1, userId2 } = req.params;
      const { db } = require('./db');
      const { or, and, eq, desc } = require('drizzle-orm');
      
      const conversation = await db
        .select()
        .from(messages)
        .where(
          or(
            and(eq(messages.senderId, parseInt(userId1)), eq(messages.receiverId, parseInt(userId2))),
            and(eq(messages.senderId, parseInt(userId2)), eq(messages.receiverId, parseInt(userId1)))
          )
        )
        .orderBy(desc(messages.timestamp));
        
      res.json({ success: true, messages: conversation });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏' });
    }
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get('/api/conversations/:userId', async (req, res) => {
    try {
      const { userId } = req.params;
      const { db } = require('./db');
      const { or, eq, desc } = require('drizzle-orm');
      
      const conversations = await db
        .select()
        .from(messages)
        .where(
          or(
            eq(messages.senderId, parseInt(userId)),
            eq(messages.receiverId, parseInt(userId))
          )
        )
        .orderBy(desc(messages.timestamp));
        
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      const conversationMap = new Map();
      conversations.forEach(msg => {
        const partnerId = msg.senderId === parseInt(userId) ? msg.receiverId : msg.senderId;
        if (!conversationMap.has(partnerId)) {
          conversationMap.set(partnerId, {
            partnerId,
            lastMessage: msg,
            timestamp: msg.timestamp
          });
        }
      });
      
      res.json({ success: true, conversations: Array.from(conversationMap.values()) });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤' });
    }
  });
  
  // API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const imageUpload = require('./image-upload');
  app.use('/api/upload', imageUpload);
  
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
  app.use('/uploads', (req, res, next) => {
    const uploadPath = path.join(process.cwd(), 'uploads');
    res.sendFile(req.path, { root: uploadPath }, (err) => {
      if (err) next('route');
    });
  });
  
  // Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ python_provider_routes.js
  // –£–î–ê–õ–ï–ù–û –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ G4F API
  async function callG4F(message: string, provider: string) {
    const startTime = Date.now();
    Logger.ai(`–ù–∞—á–∏–Ω–∞–µ–º AI –∑–∞–ø—Ä–æ—Å`, { provider, messageLength: message.length });
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä—è–º–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      const directAiProvider = require('./direct-ai-provider');
      
      // –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä qwen, –∏—Å–ø–æ–ª—å–∑—É–µ–º AItianhu –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Qwen AI
      // –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä chatfree, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      let actualProvider = provider;
      
      if (provider === 'qwen') {
        actualProvider = 'AItianhu';
      } else if (provider === 'claude') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude —á–µ—Ä–µ–∑ Python G4F
        try {
          console.log(`–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Claude —á–µ—Ä–µ–∑ Python G4F...`);
          const claudeProvider = require('./claude-provider');
          const claudeResponse = await claudeProvider.getClaudeResponse(message);
          
          if (claudeResponse.success) {
            const duration = Date.now() - startTime;
            Logger.success(`Claude –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ`, { 
              duration: `${duration}ms`, 
              responseLength: claudeResponse.response?.length || 0 
            });
            return claudeResponse;
          } else {
            throw new Error(claudeResponse.error || '–û—à–∏–±–∫–∞ Claude');
          }
        } catch (error) {
          Logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Claude`, error);
          actualProvider = 'AItianhu'; // –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        }
      } else if (provider === 'ollama') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Ollama —á–µ—Ä–µ–∑ Python G4F
        try {
          console.log(`Ollama —á–µ—Ä–µ–∑ Python G4F –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º smart-router`);
          const ollamaResponse = null; // –û—Ç–∫–ª—é—á–µ–Ω–æ
          
          if (ollamaResponse) {
            return {
              success: true,
              response: ollamaResponse,
              provider: 'Ollama',
              model: 'llama3'
            };
          } else {
            throw new Error('Ollama –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Python G4F');
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Ollama —á–µ—Ä–µ–∑ Python:`, error);
          
          // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π Ollama –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
          try {
            const ollamaProvider = require('./ollama-provider');
            const isOllamaAvailable = await ollamaProvider.checkOllamaAvailability();
            
            if (isOllamaAvailable) {
              const ollamaDirectResponse = await ollamaProvider.getOllamaResponse(message);
              if (ollamaDirectResponse.success) {
                return ollamaDirectResponse;
              }
            }
          } catch (localError) {
            console.error(`‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π Ollama —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, localError);
          }
          
          // –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
          actualProvider = 'AItianhu';
        }
      } else if (provider === 'chatfree') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è ChatFree —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        try {
          const chatFreeImproved = require('./chatfree-improved');
          console.log(`–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é ChatFree...`);
          
          const chatFreeResponse = await chatFreeImproved.getChatFreeResponse(message, {
            systemPrompt: "–í—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ—á–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –∏—Å–ø–æ–ª—å–∑—É—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω."
          });
          
          if (chatFreeResponse.success) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ ChatFree –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞`);
            return chatFreeResponse;
          } else {
            // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            const simpleChatFree = require('./simple-chatfree');
            const simpleResponse = await simpleChatFree.getChatFreeResponse(message);
            
            if (simpleResponse.success) {
              console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ ChatFree –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞`);
              return simpleResponse;
            }
            
            throw new Error(chatFreeResponse.error || '–û—à–∏–±–∫–∞ ChatFree');
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ ChatFree:`, error);
          actualProvider = 'AItianhu'; // –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
      const response = await directAiProvider.getChatResponse(message, { provider: actualProvider });
      
      return {
        success: true,
        response: response,
        provider: actualProvider
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ G4F:`, error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }
  
  // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å BOOOMERANGS AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Qwen –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤)
  app.post('/api/ai/chat', upload.single('image'), async (req, res) => {
    try {
      const { message, provider } = req.body;
      const uploadedImage = req.file;
      
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: message="${message}", uploadedImage=${uploadedImage ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
      
      if (!message && !uploadedImage) {
        return res.status(400).json({ 
          success: false, 
          error: '–°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã' 
        });
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      let finalMessage = message || '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—à–∏ —á—Ç–æ –Ω–∞ –Ω–µ–º –≤–∏–¥–Ω–æ';
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞–ø—Ä—è–º—É—é
      const directAiProvider = require('./direct-ai-provider');
      const { AI_PROVIDERS } = directAiProvider;
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      const pythonProviderRoutes = require('./python_provider_routes');
      
      // üß† –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –†–ê–ó–ì–û–í–û–†–ê
      console.log('üß† [STREAM] === –ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–ó–ê –ö–û–ù–¢–ï–ö–°–¢–ê ===');
      console.log('üß† [STREAM] req.body:', JSON.stringify(req.body, null, 2));
      
      const conversationMemory = require('./conversation-memory');
      const userId = req.body.userId || `session_${req.body.sessionId || 'stream'}`;
      console.log('üß† [STREAM] userId –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', userId);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–π
      console.log('üß† [STREAM] –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', finalMessage);
      const contextInfo = conversationMemory.getMessageContext(userId, finalMessage);
      
      console.log('üß† [STREAM] –î–ï–¢–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', {
        hasIntent: !!contextInfo.intent,
        intent: contextInfo.intent,
        isSearchQuery: contextInfo.intent?.isSearchQuery,
        location: contextInfo.intent?.location,
        contextLength: contextInfo.context?.length || 0,
        context: contextInfo.context?.substring(0, 200) + '...',
        messageHistory: contextInfo.messageHistory?.length || 0
      });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      if (contextInfo.context && contextInfo.context.trim()) {
        const originalMessage = finalMessage;
        finalMessage = contextInfo.context + finalMessage;
        console.log('üß† [STREAM] –ö–û–ù–¢–ï–ö–°–¢ –î–û–ë–ê–í–õ–ï–ù!');
        console.log('üß† [STREAM] –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', originalMessage);
        console.log('üß† [STREAM] –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:', finalMessage.substring(0, 300) + '...');
      } else {
        console.log('üß† [STREAM] –ö–û–ù–¢–ï–ö–°–¢ –ù–ï –î–û–ë–ê–í–õ–ï–ù - –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π');
      }
      console.log('üß† [STREAM] === –ö–û–ù–ï–¶ –ê–ù–ê–õ–ò–ó–ê –ö–û–ù–¢–ï–ö–°–¢–ê ===');
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
      const demoResponse = generateDemoResponse(finalMessage);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      let selectedProvider = provider || contextInfo.currentProvider || 'AItianhu';
      let base64Image = null;
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
      if (uploadedImage) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        base64Image = uploadedImage.buffer.toString('base64');
        const imageDataUrl = `data:${uploadedImage.mimetype};base64,${base64Image}`;
        
        // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π vision
        selectedProvider = 'multimodal'; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        
        finalMessage = `${finalMessage}\n\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${imageDataUrl}`;
        console.log(`üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${uploadedImage.originalname} (${Math.round(uploadedImage.size / 1024)}KB)`);
      }
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ DeepSpeek/Phind
      const techKeywords = [
        "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "javascript", "python", "java", "c++", "c#", 
        "coding", "programming", "code", "–∞–ª–≥–æ—Ä–∏—Ç–º", "algorithm", "—Ñ—É–Ω–∫—Ü–∏—è", "function",
        "api", "—Å–µ—Ä–≤–µ—Ä", "server", "backend", "frontend", "—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥", "–±—ç–∫–µ–Ω–¥",
        "database", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "sql", "nosql", "json", "html", "css",
        "git", "github", "docker", "kubernetes", "devops"
      ];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º
      const isTechnicalQuestion = techKeywords.some(keyword => finalMessage.toLowerCase().includes(keyword));
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ª—é–±—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      if (uploadedImage) {
        console.log(`üñºÔ∏è –ù–ê–ô–î–ï–ù–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï! –†–∞–∑–º–µ—Ä: ${uploadedImage.size} –±–∞–π—Ç, —Ç–∏–ø: ${uploadedImage.mimetype}`);
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        const multimodalProvider = require('./multimodal-provider');
        
        try {
          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          const imageAnalyzer = require('./image-analyzer');
          
          console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          const analysisResult = await imageAnalyzer.analyzeImage(uploadedImage.buffer, uploadedImage.originalname);
          
          const imageInfo = {
            filename: uploadedImage.originalname,
            size: Math.round(uploadedImage.size / 1024),
            type: uploadedImage.mimetype
          };

          const smartResponse = `üñºÔ∏è **AI –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**

üìÅ **–§–∞–π–ª:** ${imageInfo.filename}
üìè **–†–∞–∑–º–µ—Ä:** ${imageInfo.size}KB
üé® **–§–æ—Ä–º–∞—Ç:** ${imageInfo.type.includes('jpeg') ? 'JPEG —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è' : imageInfo.type.includes('png') ? 'PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª'}

${analysisResult.success ? `ü§ñ **–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:**
${analysisResult.description}

üîß **–°–µ—Ä–≤–∏—Å:** ${analysisResult.service}
üìä **–¢–æ—á–Ω–æ—Å—Ç—å:** ${Math.round(analysisResult.confidence * 100)}%` : `‚ö†Ô∏è **–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:**
${analysisResult.description}`}

${message ? `\nüí≠ **–í–∞—à –∑–∞–ø—Ä–æ—Å:** ${message}` : ''}

*üöÄ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –ø–æ–º–æ—â—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤!*`;

          return res.json({
            success: true,
            response: smartResponse,
            provider: analysisResult.success ? analysisResult.service : 'Fallback Analyzer',
            model: analysisResult.success ? `AI Vision (${Math.round(analysisResult.confidence * 100)}% —Ç–æ—á–Ω–æ—Å—Ç—å)` : 'Local Analysis'
          });
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω—ã–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
        }
      }

      // –î–ª—è DeepSpeek –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (provider === 'deepspeek') {
        console.log(`üìä –î–ª—è DeepSpeek –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSpeek
        const deepspeekProvider = require('./deepspeek-provider');
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é DeepSpeek –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        try {
          const deepspeekResponse = await deepspeekProvider.getDeepSpeekResponse(message);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
          if (deepspeekResponse.success) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç DeepSpeek`);
            
            return res.json({
              success: true,
              response: deepspeekResponse.response,
              provider: 'DeepSpeek',
              model: 'DeepSpeek AI'
            });
          } else {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            throw new Error(deepspeekResponse.error || '–û—à–∏–±–∫–∞ DeepSpeek');
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ DeepSpeek:`, error);
          
          // –ï—Å–ª–∏ DeepSpeek –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º Qwen/Phind –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
          selectedProvider = isTechnicalQuestion ? 'Phind' : 'AItianhu';
          console.log(`‚ö†Ô∏è DeepSpeek –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ ${selectedProvider}`);
        }
      }
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      if (isTechnicalQuestion && !provider) {
        selectedProvider = 'Phind';
        console.log(`üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä Phind`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama –∫–∞–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      if (!provider) {
        try {
          const ollamaProvider = require('./ollama-provider');
          const isOllamaAvailable = await ollamaProvider.checkOllamaAvailability();
          
          if (isOllamaAvailable) {
            console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π Ollama, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä`);
            selectedProvider = 'Ollama';
          }
        } catch (error) {
          console.log(`Lok–∞–ª—å–Ω—ã–π Ollama –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã`);
        }
      }
      
      // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python G4F —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª—é–±–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º callPythonAI
        console.log(`–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${selectedProvider}...`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é callPythonAI
        const aiResponse = await pythonProviderRoutes.callPythonAI(message, selectedProvider);
        
        if (aiResponse) {
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${selectedProvider}`);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
          let modelName = "AI";
          if (selectedProvider.includes('Qwen') || selectedProvider === 'AItianhu') {
            modelName = "Qwen AI";
          } else if (selectedProvider === 'Phind') {
            modelName = "Phind AI";
          } else {
            modelName = selectedProvider;
          }
            
          return res.json({
            success: true,
            response: aiResponse,
            provider: selectedProvider,
            model: modelName
          });
        }
      } catch (pythonError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:`, 
                  pythonError instanceof Error ? pythonError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
      }
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ
      if (provider && AI_PROVIDERS && AI_PROVIDERS[provider]) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
          const selectedProvider = AI_PROVIDERS[provider];
          console.log(`–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${selectedProvider.name} (${provider})...`);
          
          // –î–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –º—ã —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
          if (provider === 'DEMO') {
            return res.json({
              success: true,
              response: demoResponse,
              provider: 'BOOOMERANGS-Demo',
              model: 'demo-mode'
            });
          }
          
          // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
          const timeout = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –º–∞–∫—Å–∏–º—É–º –Ω–∞ –æ—Ç–≤–µ—Ç
          
          // –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
          const requestData = selectedProvider.prepareRequest(message);
          
          // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
          try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), timeout);
            
            const fetchPromise = fetch(selectedProvider.url, {
              method: 'POST',
              headers: selectedProvider.headers || { 'Content-Type': 'application/json' },
              body: JSON.stringify(requestData),
              signal: controller.signal
            });
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            const fetchWithTimeout = Promise.race([
              fetchPromise,
              new Promise((_, reject) => 
                setTimeout(() => reject(new Error(`–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (${timeout}ms)`)), timeout)
              )
            ]);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞
            let responseTimedOut = false;
            const responseTimer = setTimeout(() => {
              responseTimedOut = true;
              console.log(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${selectedProvider.name}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç`);
              return res.json({
                success: true,
                response: demoResponse,
                provider: 'BOOOMERANGS-Live',
                model: 'instant-response'
              });
            }, timeout);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            fetchWithTimeout
              .then(async (response: any) => {
                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è AbortController
                clearTimeout(timeoutId);
                
                // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                if (responseTimedOut) return;
                
                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
                clearTimeout(responseTimer);
                
                if (!response.ok) {
                  throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
                }
                
                try {
                  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
                  const responseText = await selectedProvider.extractResponse(response);
                  
                  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ${selectedProvider.name}`);
                  
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                  return res.json({
                    success: true,
                    response: responseText,
                    provider: selectedProvider.name,
                    model: provider
                  });
                } catch (extractError) {
                  console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${selectedProvider.name}:`, 
                              extractError instanceof Error ? extractError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                  
                  // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
                  return res.json({
                    success: true,
                    response: demoResponse,
                    provider: 'BOOOMERANGS-Live',
                    model: 'instant-response'
                  });
                }
              })
              .catch((error) => {
                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è AbortController
                clearTimeout(timeoutId);
                
                // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                if (responseTimedOut) return;
                
                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
                clearTimeout(responseTimer);
                
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ${selectedProvider.name}:`, 
                            error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
                return res.json({
                  success: true,
                  response: demoResponse,
                  provider: 'BOOOMERANGS-Live',
                  model: 'instant-response'
                });
              });
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ —è–≤–Ω–æ–≥–æ return, —Ç.–∫. –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –ø—Ä–æ–º–∏—Å–æ–≤
            return;
          } catch (fetchError) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${selectedProvider.name}:`, 
                      fetchError instanceof Error ? fetchError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
          }
        } catch (error) {
          console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É ${provider}:`, 
                    error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
          
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
        }
      }
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
      return res.json({
        success: true,
        response: demoResponse,
        provider: 'BOOOMERANGS-Live',
        model: 'instant-response'
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏
      return res.json({
        success: true,
        response: "–Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        provider: 'BOOOMERANGS-Fallback',
        model: 'error-recovery'
      });
    }
  });
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–æ–≤
  function generateDemoResponse(message: string) {
    const lowerMessage = message.toLowerCase();
    let response;
    
    if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
      response = '–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç BOOOMERANGS. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?';
    } else if (lowerMessage.includes('–∫–∞–∫ –¥–µ–ª–∞') || lowerMessage.includes('–∫–∞–∫ —Ç—ã')) {
      response = '–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê –∫–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?';
    } else if (lowerMessage.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏') || lowerMessage.includes('–∫–∞—Ä—Ç–∏–Ω–∫')) {
      response = '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π" –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.';
    } else if (lowerMessage.includes('booomerangs')) {
      response = 'BOOOMERANGS - —ç—Ç–æ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π AI-—Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ API-–∫–ª—é—á–µ–π.';
    } else {
      const backupResponses = [
        `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! BOOOMERANGS –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ AI –º–æ–¥–µ–ª—è–º –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–ª–∞—Ç–Ω—ã—Ö API –∫–ª—é—á–µ–π.`,
        `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! BOOOMERANGS –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—Ä–∞—É–∑–µ—Ä–∞.`,
        `BOOOMERANGS - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –±–µ–∑ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.`
      ];
      response = backupResponses[Math.floor(Math.random() * backupResponses.length)];
    }
    
    return {
      response,
      provider: 'BOOOMERANGS-Demo',
      model: 'demo-mode'
    };
  }

  // Streaming API endpoint –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  app.post("/api/stream", async (req, res) => {
    console.log('üî• [DEBUG] –ù–ê–ß–ê–õ–û /api/stream');
    console.log('üî• [DEBUG] req.body –ü–û–õ–ù–û–°–¢–¨–Æ:', JSON.stringify(req.body, null, 2));
    
    const { message, provider = 'Qwen_Qwen_2_5_Max', sessionId } = req.body;
    
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è: "${message}"`);
    console.log(`üî• [DEBUG] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: message="${message}", provider="${provider}", sessionId="${sessionId}"`);
    
    // üîç –î–û–ë–ê–í–õ–Ø–ï–ú –†–ï–ê–õ–¨–ù–´–ô –í–ï–ë-–ü–û–ò–°–ö –ü–ï–†–ï–î AI
    console.log('üî•üî•üî• [ROUTES-DEBUG] –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –ü–û–ò–°–ö–ê');
    let enrichedMessage = message;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º keywords –¥–ª—è –ø–æ–∏—Å–∫–∞
    const searchKeywords = ['–º–∞–≥–∞–∑–∏–Ω', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–≥–¥–µ', '–∞–¥—Ä–µ—Å', '–Ω–∞–π–¥–∏', '–æ–¥–µ–∂–¥–∞', '—Ç–æ—Ä–≥–æ–≤—ã–π', '–∞–ø—Ç–µ–∫–∞', '–±–∞–Ω–∫', '—Å–∞–ª–æ–Ω', '—Ü–µ–Ω—Ç—Ä'];
    const requiresSearch = searchKeywords.some(keyword => message.toLowerCase().includes(keyword));
    
    console.log('üî•üî•üî• [DEBUG] requiresSearch =', requiresSearch);
    console.log('üî•üî•üî• [DEBUG] searchKeywords –Ω–∞–π–¥–µ–Ω—ã:', searchKeywords.filter(keyword => message.toLowerCase().includes(keyword)));
    
    if (requiresSearch) {
      console.log('üî•üî•üî• [ROUTES] –ó–ê–ü–£–°–ö–ê–ï–ú –í–ï–ë-–ü–û–ò–°–ö!!!');
      try {
        const { searchRealTimeInfo } = require('./free-web-search');
        console.log('üî•üî•üî• [DEBUG] searchRealTimeInfo –∑–∞–≥—Ä—É–∂–µ–Ω');
        const searchResponse = await searchRealTimeInfo(message);
        console.log('üî•üî•üî• [ROUTES] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã:', searchResponse);
        const searchResults = searchResponse?.results || [];
        
        if (searchResults && searchResults.length > 0) {
          let searchInfo = '\n\nüîç **–ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:**\n\n';
          searchResults.forEach((result, index) => {
            searchInfo += `${index + 1}. **${result.title}** (${result.source})\n`;
            searchInfo += `   ${result.snippet}\n`;
            searchInfo += `   üîó ${result.url}\n\n`;
          });
          searchInfo += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n';
          enrichedMessage = searchInfo + message;
          console.log('üî•üî•üî• [ROUTES] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–≥–∞—â–µ–Ω–æ –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
        }
      } catch (error) {
        console.log('üî•üî•üî• [ROUTES] –û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞:', error.message);
      }
    }
    
    // üß† –ü–†–û–°–¢–´–ï –ü–ê–¢–¢–ï–†–ù–´ –î–õ–Ø –ë–´–°–¢–†–û–ô –ü–†–û–í–ï–†–ö–ò
    const imagePatterns = [
      /—Å–æ–∑–¥–∞–π/i, /–Ω–∞—Ä–∏—Å—É–π/i, /—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π/i, /–¥–∏–∑–∞–π–Ω/i, /–ø—Ä–∏–Ω—Ç/i,
      /—É–±–µ—Ä–∏/i, /—É–¥–∞–ª–∏/i, /–¥–æ–±–∞–≤—å/i, /–∏–∑–º–µ–Ω–∏/i, /–ø–æ–º–µ–Ω—è–π/i, /–∑–∞–º–µ–Ω–∏/i, /–±–µ–∑/i
    ];
    const isImageGeneration = imagePatterns.some(pattern => pattern.test(message));
    
    console.log('üß† [SMART] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', message);
    console.log('üß† [SMART] –†–µ–∑—É–ª—å—Ç–∞—Ç:', isImageGeneration);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    if (isImageGeneration) {
      console.log('üé® [STREAM] –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!');
      
      res.writeHead(200, {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Cache-Control'
      });
      
      try {
        console.log('üé® [STREAM] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
        res.write(`data: ${JSON.stringify({ 
          text: 'üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å...', 
          provider: 'AI_Image_Generator' 
        })}\n\n`);
        
        const aiImageGenerator = require('./ai-image-generator');
        const result = await aiImageGenerator.generateImage(message, 'realistic');
        
        if (result.success) {
          console.log('üé® [STREAM] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ:', result.imageUrl);
          
          res.write(`data: ${JSON.stringify({ 
            text: `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –í–æ—Ç –≤–∞—à –¥–∏–∑–∞–π–Ω:\n![–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${result.imageUrl})`,
            provider: 'AI_Image_Generator'
          })}\n\n`);
          
          res.write(`data: ${JSON.stringify({
            finished: true
          })}\n\n`);
        }
        
        res.end();
        return;
        
      } catch (error) {
        console.error('üé® [STREAM] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
        res.write(`data: ${JSON.stringify({ 
          text: `üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞.`,
          provider: 'AI_Image_Generator'
        })}\n\n`);
        res.end();
        return;
      }
    }
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º...
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Server-Sent Events
    res.writeHead(200, {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive',
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Headers': 'Cache-Control'
    });
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    if (isImageGeneration) {
      try {
        console.log('üé® [STREAM] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
        res.write(`data: ${JSON.stringify({ 
          text: 'üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å...', 
          provider: 'AI_Image_Generator' 
        })}\n\n`);
        
        const imageGenerator = require('./ai-image-generator');
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const conversationMemory = require('./conversation-memory');
        const userId = `session_${sessionId || 'stream'}`;
        const contextInfo = conversationMemory.getMessageContext(userId, message);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–∏–Ω—Ç–æ–≤ —Ñ—É—Ç–±–æ–ª–æ–∫
        let style = 'realistic';
        let enhancedPrompt = message;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        let previousImageInfo = null;
        if (contextInfo.context) {
          const imageMatch = contextInfo.context.match(/!\[.*?\]\((https:\/\/[^)]+)\)/);
          if (imageMatch) {
            previousImageInfo = {
              url: imageMatch[1],
              description: contextInfo.context
            };
            console.log('üé® [STREAM] –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', previousImageInfo.url);
            
            // –î–ª—è –∫–æ–º–∞–Ω–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (/—É–±–µ—Ä–∏|—É–¥–∞–ª–∏|–∏–∑–º–µ–Ω–∏|–¥–æ–±–∞–≤—å|–±–µ–∑/i.test(message)) {
              enhancedPrompt = `–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ—Å–∞–º—É—Ä–∞—è: ${message}. –°–æ—Ö—Ä–∞–Ω–∏ –æ–±—â–∏–π —Å—Ç–∏–ª—å –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é, –Ω–æ –≤–Ω–µ—Å–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.`;
              console.log('üé® [STREAM] –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', enhancedPrompt);
            }
          }
        }
        
        if (message.toLowerCase().includes('—Ñ—É—Ç–±–æ–ª–∫–∞') || 
            message.toLowerCase().includes('–ø—Ä–∏–Ω—Ç') ||
            message.toLowerCase().includes('t-shirt') ||
            message.toLowerCase().includes('streetwear')) {
          style = 'artistic';
          enhancedPrompt = `–î–∏–∑–∞–π–Ω –ø—Ä–∏–Ω—Ç–∞ –¥–ª—è —Ñ—É—Ç–±–æ–ª–∫–∏: ${message}`;
        }
        
        const result = await imageGenerator.generateImage(enhancedPrompt, style, previousImageInfo);
        
        if (result.success) {
          res.write(`data: ${JSON.stringify({ 
            text: `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –í–æ—Ç –≤–∞—à –¥–∏–∑–∞–π–Ω:\n![–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${result.imageUrl})`,
            provider: 'AI_Image_Generator',
            finished: true
          })}\n\n`);
        } else {
          res.write(`data: ${JSON.stringify({ 
            text: `üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.`,
            provider: 'AI_Image_Generator',
            finished: true
          })}\n\n`);
        }
        
        res.end();
        return;
        
      } catch (error) {
        console.error('üé® [STREAM] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
        res.write(`data: ${JSON.stringify({ 
          text: `üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞.`,
          provider: 'AI_Image_Generator'
        })}\n\n`);
        res.end();
        return;
      }
    }
    
    // –°–¢–ê–†–´–ô –ö–û–î –ü–û–ò–°–ö–ê –£–î–ê–õ–ï–ù - –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –í–´–®–ï
    let finalMessage = enrichedMessage; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    // –í–ö–õ–Æ–ß–ê–ï–ú –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –î–õ–Ø –í–°–ï–• –ó–ê–ü–†–û–°–û–í
    console.log('üîç [UNIVERSAL] –ó–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...');
    console.log('üîç [UNIVERSAL] –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', message);
      
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    res.write(`data: ${JSON.stringify({ 
      searchStatus: 'searching', 
      message: '–ò—â—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...' 
    })}\n\n`);
    
    try {
      // –ú–û–©–ù–´–ô –ü–û–ò–°–ö –í –ò–ù–¢–ï–†–ù–ï–¢–ï –ß–ï–†–ï–ó PYTHON
      console.log('üîç [REAL_SEARCH] –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è:', message);
      
      const { spawn } = require('child_process');
      const searchProcess = spawn('python', ['server/real_web_search.py', message]);
      
      let searchData = '';
      let searchError = '';
      
      await new Promise((resolve, reject) => {
        searchProcess.stdout.on('data', (data) => {
          searchData += data.toString();
        });
        
        searchProcess.stderr.on('data', (data) => {
          searchError += data.toString();
          console.log('üîç [PYTHON_SEARCH]', data.toString().trim());
        });
        
        searchProcess.on('close', (code) => {
          if (code === 0) {
            resolve(searchData);
          } else {
            reject(new Error(`–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}: ${searchError}`));
          }
        });
        
        // –¢–∞–π–º–∞—É—Ç 15 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          searchProcess.kill();
          reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞'));
        }, 15000);
      });
      
      let searchResults = [];
      
      if (ddgResponse.ok) {
        const ddgData = await ddgResponse.json();
        console.log('üîç [DDG] –û—Ç–≤–µ—Ç DuckDuckGo –ø–æ–ª—É—á–µ–Ω');
        
        // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        if (ddgData.AbstractText) {
          searchResults.push({
            title: ddgData.AbstractSource || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            description: ddgData.AbstractText,
            url: ddgData.AbstractURL || '',
            source: 'DuckDuckGo Abstract'
          });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
        if (ddgData.RelatedTopics && ddgData.RelatedTopics.length > 0) {
          ddgData.RelatedTopics.slice(0, 3).forEach(topic => {
            if (topic.Text) {
              searchResults.push({
                title: topic.FirstURL ? topic.FirstURL.split('/').pop() : '–°–≤—è–∑–∞–Ω–Ω–∞—è —Ç–µ–º–∞',
                description: topic.Text,
                url: topic.FirstURL || '',
                source: 'DuckDuckGo Related'
              });
            }
          });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if (ddgData.Answer) {
          searchResults.push({
            title: '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç',
            description: ddgData.Answer,
            url: '',
            source: 'DuckDuckGo Instant'
          });
        }
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ –ø–æ–≥–æ–¥–µ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (message.toLowerCase().includes('–ø–æ–≥–æ–¥–∞')) {
        console.log('üîç [DIRECT] –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã...');
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const cityMatch = message.match(/–≤\s+([–∞-—è—ë]+)/i);
        const city = cityMatch ? cityMatch[1] : '–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫';
        
        const weatherResponse = await fetch(`https://wttr.in/${encodeURIComponent(city)}?format=j1`);
        if (weatherResponse.ok) {
          const weatherData = await weatherResponse.json();
          const current = weatherData.current_condition[0];
          const today = weatherData.weather[0];
          
          const searchResults = [{
            title: `üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ ${city}`,
            description: `–°–µ–π—á–∞—Å: ${current.temp_C}¬∞C, ${current.weatherDesc[0].value}. –ú–∞–∫—Å: ${today.maxtempC}¬∞C, –º–∏–Ω: ${today.mintempC}¬∞C. –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${current.humidity}%, –≤–µ—Ç–µ—Ä: ${current.windspeedKmph} –∫–º/—á`,
            temperature: `${current.temp_C}¬∞C`,
            weather: current.weatherDesc[0].value,
            source: 'wttr.in'
          }];
          
          console.log('üîç [DIRECT] –ù–∞–π–¥–µ–Ω–∞ –ø–æ–≥–æ–¥–∞:', searchResults[0].description);
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è AI
          let searchInfo = '\n\nüîç **–ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ì–û–î–ï:**\n\n';
          searchInfo += `**–ü–æ–≥–æ–¥–∞ –≤ ${city} —Å–µ–π—á–∞—Å:**\n`;
          searchInfo += `üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${current.temp_C}¬∞C\n`;
          searchInfo += `‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${current.weatherDesc[0].value}\n`;
          searchInfo += `üìà –ú–∞–∫—Å–∏–º—É–º —Å–µ–≥–æ–¥–Ω—è: ${today.maxtempC}¬∞C\n`;
          searchInfo += `üìâ –ú–∏–Ω–∏–º—É–º —Å–µ–≥–æ–¥–Ω—è: ${today.mintempC}¬∞C\n`;
          searchInfo += `üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${current.humidity}%\n`;
          searchInfo += `üí® –í–µ—Ç–µ—Ä: ${current.windspeedKmph} –∫–º/—á\n\n`;
          
          finalMessage = searchInfo;
          
          res.write(`data: ${JSON.stringify({ 
            searchStatus: 'found', 
            message: `–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –≤ ${city}`,
            resultsCount: 1
          })}\n\n`);
        } else {
          throw new Error('–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è AI
      if (searchResults.length > 0) {
        let searchInfo = '\n\nüîç **–ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:**\n\n';
        
        searchResults.forEach((result, index) => {
          searchInfo += `${index + 1}. **${result.title}**\n`;
          if (result.description) searchInfo += `   ${result.description}\n`;
          if (result.temperature) searchInfo += `   üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${result.temperature}\n`;
          if (result.weather) searchInfo += `   ‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: ${result.weather}\n`;
          if (result.url) searchInfo += `   üîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.url}\n`;
          searchInfo += `   üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: ${result.source}\n\n`;
        });
        
        finalMessage = searchInfo;
        console.log('üîç [SEARCH] –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', searchResults.length);
        console.log('üîç [SEARCH] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è AI:', searchInfo.substring(0, 500) + '...');
        
        res.write(`data: ${JSON.stringify({ 
          searchStatus: 'found', 
          message: `–ù–∞–π–¥–µ–Ω–æ ${searchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ`,
          resultsCount: searchResults.length
        })}\n\n`);
      } else {
        console.log('üîç [SEARCH] –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        res.write(`data: ${JSON.stringify({ 
          searchStatus: 'no_results', 
          message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
        })}\n\n`);
      }
      
    } catch (error) {
      console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message);
      res.write(`data: ${JSON.stringify({ 
        searchStatus: 'error', 
        message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ' 
      })}\n\n`);
    }
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
      res.write(`data: ${JSON.stringify({ provider: provider })}\n\n`);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Python G4F –Ω–∞–ø—Ä—è–º—É—é
      try {
        console.log('üêç [STREAMING] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Python G4F...');
        console.log('üîß [DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Python G4F –Ω–∞ localhost:5004...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –∏–ª–∏ node-fetch
        const fetch = globalThis.fetch || (await import('node-fetch')).default;
        
        console.log('üîç [DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Python G4F –û–ë–û–ì–ê–©–ï–ù–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π:', finalMessage.length);
        console.log('üîç [DEBUG] –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', finalMessage.includes('üîç **–ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:**'));
        console.log('üîç [DEBUG] –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤:', finalMessage.substring(0, 300));
        console.log('üîß [DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ http://localhost:5004/python/chat');
        console.log('üîß [DEBUG] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify({ message: finalMessage.substring(0, 100) + '...', provider: provider }));
        
        // –°–æ–∑–¥–∞–µ–º —á–µ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const aiPrompt = `–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –Ω–∞–π–¥–µ–Ω–Ω—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–∏–∂–µ. –ù–ï –¥–∞–≤–∞–π –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∏. –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞, —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤.

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}

${finalMessage.includes('üîç **–ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:**') ? finalMessage : message}

–û—Ç–≤–µ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –º–∞–≥–∞–∑–∏–Ω—ã - —É–∫–∞–∂–∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è, –∞–¥—Ä–µ—Å–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.`;

        const response = await fetch('http://localhost:5004/python/chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            message: aiPrompt,
            provider: provider 
          }),
          timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });
        
        console.log('üîß [DEBUG] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Python G4F. –°—Ç–∞—Ç—É—Å:', response.status);
        console.log('üîß [DEBUG] –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(response.headers.entries()));

        if (response.ok) {
          const data = await response.json();
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π –æ—Ç–≤–µ—Ç AI
          if (data.response && typeof data.response === 'string') {
            console.log('‚úÖ [STREAMING] Python G4F –æ—Ç–≤–µ—Ç–∏–ª:', {
              provider: data.provider || provider,
              textLength: data.response.length
            });
            
            const words = data.response.split(' ');
            for (let i = 0; i < words.length; i++) {
              const chunk = i === 0 ? words[i] : ' ' + words[i];
              res.write(`data: ${JSON.stringify({ text: chunk })}\n\n`);
              await new Promise(resolve => setTimeout(resolve, 50));
            }
            res.write(`data: ${JSON.stringify({ finished: true, provider: data.provider || provider })}\n\n`);
          } else {
            throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Python G4F');
          }
        } else {
          throw new Error(`Python G4F –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å ${response.status})`);
        }
      } catch (error) {
        console.log('‚ùå [STREAMING] –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Python G4F:');
        console.log('‚ùå [DEBUG] –¢–∏–ø –æ—à–∏–±–∫–∏:', error.name);
        console.log('‚ùå [DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
        console.log('‚ùå [DEBUG] –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
        console.log('‚ùå [DEBUG] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        console.log('‚ö†Ô∏è [STREAMING] Python G4F –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä');
        
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π JavaScript G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        try {
          console.log('üîÑ [STREAMING] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ JavaScript G4F...');
          const directProvider = require('./direct-ai-provider');
          const response = await directProvider.getChatResponse(message);
          
          if (response && response.length > 0) {
            const words = response.split(' ');
            for (let i = 0; i < words.length; i++) {
              const chunk = i === 0 ? words[i] : ' ' + words[i];
              res.write(`data: ${JSON.stringify({ text: chunk })}\n\n`);
              await new Promise(resolve => setTimeout(resolve, 50));
            }
            res.write(`data: ${JSON.stringify({ finished: true, provider: "JavaScript-G4F" })}\n\n`);
          } else {
            throw new Error('–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
          }
        } catch (fallbackError) {
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
          const responseText = "–ü—Ä–∏–≤–µ—Ç! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞ '—Å–æ–∑–¥–∞–π –ø—Ä–∏–Ω—Ç —Å–∞–º—É—Ä–∞—è'.";
          
          const words = responseText.split(' ');
          for (let i = 0; i < words.length; i++) {
            const chunk = i === 0 ? words[i] : ' ' + words[i];
            res.write(`data: ${JSON.stringify({ text: chunk })}\n\n`);
            await new Promise(resolve => setTimeout(resolve, 50));
          }
          res.write(`data: ${JSON.stringify({ finished: true, provider: "System" })}\n\n`);
        }
      }
      
      res.end();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      res.write(`data: ${JSON.stringify({ text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞", finished: true })}\n\n`);
      res.end();
    }
  });
  
  // Auth endpoint - validate token and return user
  app.post("/api/auth", async (req, res) => {
    try {
      // Validate request body
      const result = authSchema.safeParse(req.body);
      if (!result.success) {
        return res.status(400).json({ 
          message: "Invalid request", 
          errors: result.error.format() 
        });
      }
      
      const { token } = result.data;
      
      // Get user by token
      const user = await storage.getUserByToken(token);
      
      if (!user) {
        return res.status(401).json({ message: "Invalid access token" });
      }
      
      // Set user as online
      await storage.setUserOnlineStatus(user.id, true);
      
      // Add initials for the frontend
      const initials = user.username
        .split(' ')
        .map((n) => n[0])
        .join('')
        .toUpperCase()
        .substring(0, 2);
      
      return res.status(200).json({
        message: "Authentication successful",
        user: {
          ...user,
          initials
        }
      });
    } catch (error) {
      console.error("Auth error:", error);
      return res.status(500).json({ message: "Server error during authentication" });
    }
  });
  
  // Get all users
  app.get("/api/users", authMiddleware, async (req, res) => {
    try {
      const users = await storage.getAllUsers();
      
      // Add initials for each user
      const usersWithInitials = users.map(user => {
        const initials = user.username
          .split(' ')
          .map((n) => n[0])
          .join('')
          .toUpperCase()
          .substring(0, 2);
        
        return {
          ...user,
          initials
        };
      });
      
      return res.status(200).json(usersWithInitials);
    } catch (error) {
      console.error("Get users error:", error);
      return res.status(500).json({ message: "Server error while fetching users" });
    }
  });
  
  // Get messages between two users
  app.get("/api/messages/:userId", authMiddleware, async (req, res) => {
    try {
      const currentUserId = (req as any).userId;
      const otherUserId = parseInt(req.params.userId);
      
      if (isNaN(otherUserId)) {
        return res.status(400).json({ message: "Invalid user ID" });
      }
      
      // Get messages between users
      const messages = await storage.getMessagesBetweenUsers(currentUserId, otherUserId);
      
      // Get user details for sender info
      const users = await storage.getAllUsers();
      const usersMap = users.reduce((acc, user) => {
        const initials = user.username
          .split(' ')
          .map((n) => n[0])
          .join('')
          .toUpperCase()
          .substring(0, 2);
        
        acc[user.id] = {
          ...user,
          initials
        };
        return acc;
      }, {} as Record<number, any>);
      
      // Add sender details and format time
      const formattedMessages = messages.map(message => {
        const sender = usersMap[message.senderId];
        const time = new Date(message.timestamp).toLocaleTimeString([], { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        
        return {
          ...message,
          sender,
          time
        };
      });
      
      return res.status(200).json(formattedMessages);
    } catch (error) {
      console.error("Get messages error:", error);
      return res.status(500).json({ message: "Server error while fetching messages" });
    }
  });
  
  // Send a message
  app.post("/api/messages", authMiddleware, async (req, res) => {
    try {
      const currentUserId = (req as any).userId;
      
      // Validate request body
      const result = messageSchema.safeParse(req.body);
      if (!result.success) {
        return res.status(400).json({ 
          message: "Invalid request", 
          errors: result.error.format() 
        });
      }
      
      const { text, receiverId } = result.data;
      
      // Check if receiver exists
      const receiver = await storage.getUser(receiverId);
      if (!receiver) {
        return res.status(404).json({ message: "Receiver not found" });
      }
      
      // Create message
      const message = await storage.createMessage({
        senderId: currentUserId,
        receiverId,
        text
      });
      
      return res.status(201).json(message);
    } catch (error) {
      console.error("Send message error:", error);
      return res.status(500).json({ message: "Server error while sending message" });
    }
  });

  return httpServer;
}
