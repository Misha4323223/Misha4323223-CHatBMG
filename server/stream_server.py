"""
–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è BOOOMERANGS
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –º–æ–¥–µ–ª–µ–π G4F
"""
from flask import Flask, request, Response, jsonify
from flask_cors import CORS
import g4f
import json
import time
import threading
import random
import re
import string
import traceback

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–¥—Ö–æ–¥ —Å getattr –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
# –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ AttributeError
def get_provider(name):
    try:
        return getattr(g4f.Provider, name)
    except AttributeError:
        print(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ g4f")
        return None

providers = {}
for name in ["Qwen_Max", "Qwen_3", "You", "DeepInfra", "Gemini", "GeminiPro", "DeepAI"]:
    provider = get_provider(name)
    if provider:
        providers[name] = provider

# –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
provider_groups = {
    'primary': ['Qwen_Max', 'Qwen_3', 'You'],
    'secondary': ['DeepInfra', 'Gemini', 'GeminiPro'],
    'fallback': ['DeepAI']
}

app = Flask(__name__)
CORS(app)

def get_demo_response(message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    message_lower = message.lower()
    
    if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi']):
        return "–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?"
    elif any(word in message_lower for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', 'how are you']):
        return "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª–∏! –ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?"
    elif any(word in message_lower for word in ['–∏–∑–æ–±—Ä–∞–∂–µ–Ω', '–∫–∞—Ä—Ç–∏–Ω', 'image', 'picture']):
        return "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å, –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å!"
    elif 'booomerangs' in message_lower:
        return "BOOOMERANGS - —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π AI-—Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ú—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–ª–∞—Ç–Ω—ã—Ö API –∫–ª—é—á–µ–π!"
    else:
        random_responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! BOOOMERANGS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–∞–∂–µ –±–µ–∑ –ø–ª–∞—Ç–Ω—ã—Ö API –∫–ª—é—á–µ–π. –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏.",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! BOOOMERANGS –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –æ–±—â–∞—Ç—å—Å—è —Å AI, –Ω–æ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é, –∞ —Ç–∞–∫–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SVG.",
            "BOOOMERANGS —Å—Ç—Ä–µ–º–∏—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –≤—Å–µ—Ö. –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö."
        ]
        
        return random.choice(random_responses)

@app.route('/stream', methods=['POST'])
def stream_chat():
    """–ü–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç G4F –º–æ–¥–µ–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
    if request.method != 'POST':
        return Response('–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', status=405)
    
    try:
        data = request.get_json()
        message = data.get('message', '')
        provider_name = data.get('provider', 'Qwen_Max')
        timeout = data.get('timeout', 20000) / 1000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã
        
        if not message:
            return Response('–ù–µ —É–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ', status=400)
        
        print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {message[:30]}... –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        messages = [
            {"role": "system", "content": "–í—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç BOOOMERANGS. –û—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ-—Ä—É—Å—Å–∫–∏, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –î–∞–≤–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."},
            {"role": "user", "content": message}
        ]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        def generate():
            start_time = time.time()
            yielded_anything = False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            yield f"event: start\ndata: {json.dumps({'provider': provider_name})}\n\n"
            
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                if provider_name in providers:
                    provider = providers[provider_name]
                    
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥, –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
                        response_stream = g4f.ChatCompletion.create(
                            model="gpt-3.5-turbo",
                            messages=messages,
                            provider=provider,
                            stream=True,
                            timeout=timeout
                        )
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        response_text = ''
                        
                        for chunk in response_stream:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –∫–∞–∫ SSE —Å–æ–±—ã—Ç–∏–µ
                            response_text += chunk
                            
                            yield f"event: chunk\ndata: {json.dumps({'text': chunk, 'provider': provider_name})}\n\n"
                            yielded_anything = True
                            
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ
                        elapsed = time.time() - start_time
                        yield f"event: complete\ndata: {json.dumps({'text': response_text, 'provider': provider_name, 'elapsed': elapsed})}\n\n"
                    
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}: {str(e)}")
                        traceback.print_exc()
                        
                        # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
                        success = False
                        
                        for group_name in ['primary', 'secondary', 'fallback']:
                            if success:
                                break
                                
                            print(f"üîÑ –ü–µ—Ä–µ–±–æ—Ä –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {group_name}")
                            
                            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
                            providers_in_group = provider_groups.get(group_name, []).copy()
                            random.shuffle(providers_in_group)
                            
                            for provider_name in providers_in_group:
                                if provider_name in providers:
                                    provider = providers[provider_name]
                                    
                                    try:
                                        print(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}...")
                                        
                                        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                                        response = g4f.ChatCompletion.create(
                                            model="gpt-3.5-turbo",
                                            messages=messages,
                                            provider=provider,
                                            timeout=timeout
                                        )
                                        
                                        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
                                        print(f"‚úÖ {provider_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª")
                                        
                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                        elapsed = time.time() - start_time
                                        yield f"event: chunk\ndata: {json.dumps({'text': response, 'provider': provider_name})}\n\n"
                                        yield f"event: complete\ndata: {json.dumps({'text': response, 'provider': provider_name, 'elapsed': elapsed})}\n\n"
                                        success = True
                                        yielded_anything = True
                                        break
                                        
                                    except Exception as inner_e:
                                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}: {str(inner_e)}")
                        
                        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
                        if not success:
                            print("‚ö†Ô∏è –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç")
                            demo_response = get_demo_response(message)
                            yield f"event: fallback\ndata: {json.dumps({'text': demo_response, 'demo': True})}\n\n"
                            yield f"event: complete\ndata: {json.dumps({'text': demo_response, 'provider': 'BOOOMERANGS-Demo', 'elapsed': time.time() - start_time})}\n\n"
                            yielded_anything = True
                else:
                    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    error_message = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}"
                    yield f"event: error\ndata: {json.dumps({'error': error_message})}\n\n"
                    yielded_anything = True
            
            except Exception as e:
                error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
                print(error_message)
                traceback.print_exc()
                yield f"event: error\ndata: {json.dumps({'error': error_message})}\n\n"
                yielded_anything = True
            
            finally:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback
                if not yielded_anything:
                    demo_response = get_demo_response(message)
                    yield f"event: fallback\ndata: {json.dumps({'text': demo_response, 'demo': True})}\n\n"
                    yield f"event: complete\ndata: {json.dumps({'text': demo_response, 'provider': 'BOOOMERANGS-Demo', 'elapsed': time.time() - start_time})}\n\n"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        return Response(
            generate(),
            mimetype='text/event-stream',
            headers={
                'Cache-Control': 'no-cache',
                'Connection': 'keep-alive',
                'X-Accel-Buffering': 'no'
            }
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5001...")
    app.run(host='0.0.0.0', port=5001, debug=True)