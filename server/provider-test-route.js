/**
 * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */

const express = require('express');
const router = express.Router();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const chatFreeProvider = require('./chatfree-improved');
const chatFreeSimple = require('./simple-chatfree');
const freechatEnhanced = require('./freechat-enhanced');
const deepspeekProvider = require('./deepspeek-fixed');
const claudeProvider = require('./claude-provider');
const deepInfraProvider = require('./deepinfra-provider');
const multimodalProvider = require('./multimodal-provider');
const pythonProviderRoutes = require('./python_provider_routes');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 * @returns {Promise<Array>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function testAllProviders() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...');
  
  // –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  const providers = [
    { 
      name: 'ChatFree (—É–ª—É—á—à–µ–Ω–Ω—ã–π)', 
      test: async () => await chatFreeProvider.getChatFreeResponse('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ChatFree.'),
      status: 'pending'
    },
    { 
      name: 'ChatFree (–ø—Ä–æ—Å—Ç–æ–π)', 
      test: async () => await chatFreeSimple.getChatFreeResponse('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ ChatFree.'),
      status: 'pending'
    },
    { 
      name: 'FreeChat Enhanced', 
      test: async () => await freechatEnhanced.getChatFreeEnhancedResponse('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è FreeChat Enhanced.'),
      status: 'pending'
    },
    { 
      name: 'DeepSpeek', 
      test: async () => await deepspeekProvider.getDeepSpeekResponse('–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ JavaScript –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞?'),
      status: 'pending'
    },
    { 
      name: 'Claude (Anthropic)', 
      test: async () => await claudeProvider.getClaudeResponse('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Claude.'),
      status: 'pending'
    },
    { 
      name: 'DeepInfra', 
      test: async () => await deepInfraProvider.getDeepInfraResponse('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ DeepInfra.'),
      status: 'pending'
    },
    { 
      name: 'Python G4F - Qwen', 
      test: async () => {
        const response = await pythonProviderRoutes.callPythonAI('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è Qwen —á–µ—Ä–µ–∑ Python G4F.', 'Qwen_Qwen_2_5_Max');
        return { success: !!response, response };
      },
      status: 'pending'
    },
    { 
      name: 'Python G4F - Phind', 
      test: async () => {
        const response = await pythonProviderRoutes.callPythonAI('–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch API –≤ JavaScript?', 'Phind');
        return { success: !!response, response };
      },
      status: 'pending'
    },
    { 
      name: 'Python G4F - GeminiPro', 
      test: async () => {
        const response = await pythonProviderRoutes.callPythonAI('–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑ –æ –∫–æ—Å–º–æ—Å–µ.', 'GeminiPro');
        return { success: !!response, response };
      },
      status: 'pending'
    },
    { 
      name: 'Python G4F - You', 
      test: async () => {
        const response = await pythonProviderRoutes.callPythonAI('–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è –≤ –º–∏—Ä–µ?', 'You');
        return { success: !!response, response };
      },
      status: 'pending'
    },
    {
      name: '–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)',
      test: async () => {
        // –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        const testImageUrl = 'https://picsum.photos/200';
        const result = await multimodalProvider.analyzeImage(testImageUrl, '–û–ø–∏—à–∏, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?');
        return result;
      },
      status: 'pending'
    }
  ];
  
  const results = [];
  
  for (const provider of providers) {
    console.log(`‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ${provider.name}...`);
    
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('–¢–µ—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç (15 —Å–µ–∫—É–Ω–¥)')), 15000)
      );
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const result = await Promise.race([
        provider.test(),
        timeoutPromise
      ]);
      
      if (result && result.success) {
        console.log(`‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider.name} —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
        provider.status = 'working';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Ç–≤–µ—Ç–∞ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)
        const response = result.response || '';
        const shortResponse = typeof response === 'string' 
          ? response.substring(0, 100) + (response.length > 100 ? '...' : '')
          : '–ù–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç';
        
        results.push({
          name: provider.name,
          status: 'working',
          response: shortResponse,
          provider: result.provider || provider.name,
          model: result.model || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        });
      } else {
        throw new Error('–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
      }
    } catch (error) {
      console.error(`‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
      provider.status = 'failed';
      
      results.push({
        name: provider.name,
        status: 'failed',
        error: error.message
      });
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const workingCount = results.filter(r => r.status === 'working').length;
  const totalCount = providers.length;
  
  console.log(`\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:`);
  console.log(`‚úÖ –†–∞–±–æ—Ç–∞—é—Ç: ${workingCount} –∏–∑ ${totalCount} (${Math.round(workingCount/totalCount*100)}%)`);
  console.log(`‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç: ${totalCount - workingCount} –∏–∑ ${totalCount} (${Math.round((totalCount-workingCount)/totalCount*100)}%)`);
  
  return {
    stats: {
      total: totalCount,
      working: workingCount,
      failed: totalCount - workingCount,
      workingPercentage: Math.round(workingCount/totalCount*100)
    },
    results
  };
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
router.get('/all', async (req, res) => {
  try {
    const results = await testAllProviders();
    res.json(results);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${error.message}`
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
router.get('/single/:provider', async (req, res) => {
  const { provider } = req.params;
  
  try {
    let result;
    
    switch (provider) {
      case 'chatfree':
        result = await chatFreeProvider.getChatFreeResponse('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ChatFree.');
        break;
      case 'freechat':
        result = await freechatEnhanced.getChatFreeEnhancedResponse('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è FreeChat Enhanced.');
        break;
      case 'deepspeek':
        result = await deepspeekProvider.getDeepSpeekResponse('–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ JavaScript –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞?');
        break;
      case 'claude':
        result = await claudeProvider.getClaudeResponse('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Claude.');
        break;
      case 'deepinfra':
        result = await deepInfraProvider.getDeepInfraResponse('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DeepInfra.');
        break;
      case 'qwen':
        const qwenResponse = await pythonProviderRoutes.callPythonAI('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è Qwen.', 'Qwen_Qwen_2_5_Max');
        result = { success: !!qwenResponse, response: qwenResponse, provider: 'Qwen_Qwen_2_5_Max' };
        break;
      case 'phind':
        const phindResponse = await pythonProviderRoutes.callPythonAI('–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch API –≤ JavaScript?', 'Phind');
        result = { success: !!phindResponse, response: phindResponse, provider: 'Phind' };
        break;
      case 'gemini':
        const geminiResponse = await pythonProviderRoutes.callPythonAI('–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑.', 'GeminiPro');
        result = { success: !!geminiResponse, response: geminiResponse, provider: 'GeminiPro' };
        break;
      case 'you':
        const youResponse = await pythonProviderRoutes.callPythonAI('–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è?', 'You');
        result = { success: !!youResponse, response: youResponse, provider: 'You' };
        break;
      case 'multimodal':
        const testImageUrl = 'https://picsum.photos/200';
        result = await multimodalProvider.analyzeImage(testImageUrl, '–û–ø–∏—à–∏, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?');
        break;
      default:
        return res.status(400).json({
          success: false,
          error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}`
        });
    }
    
    if (result && result.success) {
      res.json({
        success: true,
        provider,
        result
      });
    } else {
      res.status(500).json({
        success: false,
        provider,
        error: '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
        result
      });
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${provider}:`, error);
    res.status(500).json({
      success: false,
      provider,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`
    });
  }
});

module.exports = router;