/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Hugging Face API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª–∏ Stable Diffusion –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Hugging Face
 */

import fetch from 'node-fetch';

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Hugging Face Inference API
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} model - –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é stable-diffusion)
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
async function generateImageWithHuggingFace(prompt, model = 'runwayml/stable-diffusion-v1-5') {
    const apiKey = process.env.HUGGINGFACE_API_KEY;
    
    if (!apiKey) {
        throw new Error('HUGGINGFACE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    try {
        console.log(`ü§ó [HuggingFace] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é: ${model}`);
        console.log(`üìù [HuggingFace] –ü—Ä–æ–º–ø—Ç: ${prompt}`);

        const response = await fetch(`https://api-inference.huggingface.co/models/${model}`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                inputs: prompt,
                parameters: {
                    num_inference_steps: 20,
                    guidance_scale: 7.5,
                    width: 512,
                    height: 512
                }
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`–û—à–∏–±–∫–∞ API Hugging Face: ${response.status} - ${errorText}`);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ Buffer
        const imageBuffer = await response.buffer();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const fs = await import('fs');
        const path = await import('path');
        
        const imageId = Date.now();
        const filename = `hf_generated_${imageId}.png`;
        const filepath = path.join(process.cwd(), 'public', 'generated', filename);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const outputDir = path.dirname(filepath);
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }
        
        fs.writeFileSync(filepath, imageBuffer);
        
        const imageUrl = `/generated/${filename}`;
        
        console.log(`‚úÖ [HuggingFace] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${imageUrl}`);
        
        return {
            success: true,
            imageUrl: imageUrl,
            provider: 'HuggingFace',
            model: model,
            filename: filename
        };

    } catch (error) {
        console.error(`‚ùå [HuggingFace] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`, error.message);
        return {
            success: false,
            error: error.message,
            provider: 'HuggingFace'
        };
    }
}

/**
 * –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Stable Diffusion –Ω–∞ Hugging Face
 */
const AVAILABLE_MODELS = [
    'runwayml/stable-diffusion-v1-5',
    'stabilityai/stable-diffusion-2-1',
    'stabilityai/stable-diffusion-xl-base-1.0',
    'CompVis/stable-diffusion-v1-4'
];

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
 */
function getAvailableModels() {
    return AVAILABLE_MODELS;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Hugging Face API
 */
async function checkHuggingFaceAvailability() {
    const apiKey = process.env.HUGGINGFACE_API_KEY;
    
    if (!apiKey) {
        return {
            available: false,
            reason: 'HUGGINGFACE_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        };
    }

    try {
        const response = await fetch('https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
            }
        });

        return {
            available: response.ok,
            reason: response.ok ? 'API –¥–æ—Å—Ç—É–ø–µ–Ω' : `–û—à–∏–±–∫–∞: ${response.status}`
        };
    } catch (error) {
        return {
            available: false,
            reason: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`
        };
    }
}

export {
    generateImageWithHuggingFace,
    getAvailableModels,
    checkHuggingFaceAvailability
};