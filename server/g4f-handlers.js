const express = require('express');
const router = express.Router();

// –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
const g4fProvider = require('./g4f-provider');
const freeChatProvider = require('./freechat-enhanced');
const deepspeekProvider = require('./deepspeek-fixed');

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞
function findDemoResponse(message) {
  const responses = [
    "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–æ–π —Ç–µ–º–æ–π.",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∑–∞–¥–∞—á–∞! –î–∞–≤–∞–π—Ç–µ —Ä–µ—à–∏–º –µ—ë –ø–æ—à–∞–≥–æ–≤–æ.",
    "–≠—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.",
    "–•–æ—Ä–æ—à–∏–π –∑–∞–ø—Ä–æ—Å! –Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
    "–ü–æ–Ω–∏–º–∞—é –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç—Ç–æ–π —Ç–µ–º–µ. –í–æ—Ç –º–æ–π –∞–Ω–∞–ª–∏–∑."
  ];
  
  const hash = message.split('').reduce((a, b) => {
    a = ((a << 5) - a) + b.charCodeAt(0);
    return a & a;
  }, 0);
  
  return responses[Math.abs(hash) % responses.length];
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç–∞
router.post('/chat', async (req, res) => {
  try {
    const { message, provider = 'auto', messages = [] } = req.body;
    
    if (!message && (!messages || messages.length === 0)) {
      return res.status(400).json({
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
      });
    }

    const userMessageText = message || (messages.length > 0 ? 
      messages.filter(m => m.role === 'user').pop()?.content : '');

    console.log(`–ó–∞–ø—Ä–æ—Å –∫ G4F: –ø—Ä–æ–≤–∞–π–¥–µ—Ä=${provider}, —Å–æ–æ–±—â–µ–Ω–∏–µ="${userMessageText?.substring(0, 50)}..."`);

    // –ü—Ä–æ–±—É–µ–º FreeChat Enhanced (—Å–∞–º—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π)
    try {
      console.log('üöÄ –ü—Ä–æ–±—É–µ–º FreeChat Enhanced...');
      const freeChatResponse = await freeChatProvider.getChatFreeEnhancedResponse(userMessageText);
      
      if (freeChatResponse && freeChatResponse.success && freeChatResponse.response) {
        console.log('‚úÖ FreeChat Enhanced –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!');
        return res.json({
          response: freeChatResponse.response,
          provider: freeChatResponse.provider || 'FreeChat Enhanced',
          model: freeChatResponse.model || 'Qwen_Qwen_2_5_Max'
        });
      }
    } catch (error) {
      console.log('‚ö†Ô∏è FreeChat Enhanced –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
    }

    // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –¥–µ–º–æ –æ—Ç–≤–µ—Ç—ã
    const demoResponse = findDemoResponse(userMessageText);
    return res.json({
      response: demoResponse,
      provider: 'booomerangs-demo',
      model: 'demo-mode'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ G4F API:', error);
    
    const demoResponse = findDemoResponse(req.body.message || '–æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å');
    return res.json({
      response: demoResponse,
      provider: 'booomerangs-demo',
      model: 'demo-mode'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
router.get('/providers', async (req, res) => {
  try {
    const providers = {
      'freechat': 'FreeChat Enhanced',
      'deepspeek': 'DeepSpeek',
      'demo': 'Demo Mode'
    };
    
    res.json({
      success: true,
      providers: providers,
      available: Object.keys(providers)
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤'
    });
  }
});

module.exports = router;