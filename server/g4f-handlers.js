// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ API –¥–ª—è G4F
const express = require('express');
const router = express.Router();
const g4fProvider = require('./g4f-provider');

// –ù–∞–±–æ—Ä –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è BOOOMERANGS –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
const DEMO_RESPONSES = [
  {
    prompt: "–ø—Ä–∏–≤–µ—Ç",
    response: "–ü—Ä–∏–≤–µ—Ç! ü™É –Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?"
  },
  {
    prompt: "–∫–∞–∫ –¥–µ–ª–∞",
    response: "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! üòä –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
  },
  {
    prompt: "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª",
    response: "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ BOOOMERANGS - –∫–æ–º–∞–Ω–¥–∞ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π! –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö –±–µ–∑ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. üöÄ"
  },
  {
    prompt: "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ booomerangs",
    response: "BOOOMERANGS - —ç—Ç–æ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI! üéØ\n\n‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI —á–∞—Ç (–∞–Ω–∞–ª–æ–≥ ChatGPT)\n‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∞–Ω–∞–ª–æ–≥ DALL-E)\n‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã\n‚Ä¢ –†–∞–±–æ—Ç–∞ –±–µ–∑ API –∫–ª—é—á–µ–π\n‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n–ú—ã –¥–µ–ª–∞–µ–º AI –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö! üí´"
  },
  {
    prompt: "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å",
    response: "–£ –º–µ–Ω—è –º–Ω–æ–≥–æ –∫—Ä—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! üé™\n\nüß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á\n‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç\n‚Ä¢ –û–±—ä—è—Å–Ω—è—é —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n\nüé® –í BOOOMERANGS —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ:\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ SVG —Ñ–æ—Ä–º–∞—Ç\n‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ —á–∞—Ç–µ\n\n–î–∞–≤–∞–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–ø—Ä–æ–±—É–µ–º! üöÄ"
  },
  {
    prompt: "–∫–∞–∫ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    response: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ BOOOMERANGS –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è! üé®\n\nüìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É 'üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä'\n2. –û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ\n3. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'\n4. –ì–æ—Ç–æ–≤–æ! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∏–∂–µ\n\nüí° –°–µ–∫—Ä–µ—Ç—ã –∫—Ä—É—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏: —Ü–≤–µ—Ç–∞, —Å—Ç–∏–ª—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏: '—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º', '–∞–∫–≤–∞—Ä–µ–ª—å', 'digital art'\n‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é: '–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω', '–ø–∞–Ω–æ—Ä–∞–º–∞'\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üöÄ"
  },
  {
    prompt: "–∫–æ–º–∞–Ω–¥–∞",
    response: "–ö–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç - —ç—Ç–æ —Å—É–ø–µ—Ä —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üë•\n\nüî• –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ –û–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n‚Ä¢ –û–±–º–µ–Ω –∏–¥–µ—è–º–∏ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏\n‚Ä¢ –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É 'üë• –ö–æ–º–∞–Ω–¥–∞' –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ! üí¨"
  },
  {
    prompt: "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    response: "BOOOMERANGS –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–µ–∫–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π! üõ†Ô∏è\n\n‚ö° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫:\n‚Ä¢ Frontend: React + TypeScript + Tailwind CSS\n‚Ä¢ Backend: Node.js + Express\n‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL + Drizzle ORM\n‚Ä¢ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: G4F + –º–Ω–æ–∂–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö API\n‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: Pollinations.ai, EMG-API\n\nüéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n‚Ä¢ –ë–µ–∑ API –∫–ª—é—á–µ–π\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤\n‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n‚Ä¢ WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
  },
  {
    prompt: "–ø–æ–º–æ—â—å",
    response: "–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! ü§ù –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:\n\nüí¨ –í —á–∞—Ç–µ:\n‚Ä¢ –û—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ü–æ–º–æ–≥—É —Å —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á\n‚Ä¢ –û–±—ä—è—Å–Ω—é —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏\n\nüé® –í –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ:\n‚Ä¢ –°–æ–∑–¥–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n‚Ä¢ –ü–æ–¥—Å–∫–∞–∂—É –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã\n\nüë• –í –∫–æ–º–∞–Ω–¥–Ω–æ–º —á–∞—Ç–µ:\n‚Ä¢ –ü–æ–∫–∞–∂—É –∫–∞–∫ –æ–±—â–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π\n\n–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç! üòä"
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞
function findDemoResponse(message) {
  // –ü—Ä–∏–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const normalizedMessage = message.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
  for (const demo of DEMO_RESPONSES) {
    if (normalizedMessage.includes(demo.prompt)) {
      return demo.response;
    }
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  return "–Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–Ω–µ—à–Ω–∏–µ AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ BOOOMERANGS –∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!";
}

// API endpoint –¥–ª—è —á–∞—Ç–∞ —Å –º–æ–¥–µ–ª—è–º–∏ G4F
router.post('/chat', async (req, res) => {
  try {
    const { 
      message, 
      messages = null,
      provider = null, // –ï—Å–ª–∏ null, –±—É–¥–µ—Ç –ø–µ—Ä–µ–±–æ—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
      model = null, 
      temperature = 0.7, 
      maxTokens = 800, 
      max_retries = 3 
    } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!message && (!messages || messages.length === 0)) {
      return res.status(400).json({ 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ',
        response: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
      });
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
    const userMessageText = messages ? 
      messages.filter(m => m.role === 'user').pop()?.content || message : 
      message;
    
    console.log(`–ó–∞–ø—Ä–æ—Å –∫ G4F: –ø—Ä–æ–≤–∞–π–¥–µ—Ä=${provider || 'auto'}, —Å–æ–æ–±—â–µ–Ω–∏–µ="${userMessageText.substring(0, 50)}..."`);
    
    // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –∑–∞—Ç–µ–º JavaScript –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    try {
      console.log('üêç –ü—Ä–æ–±—É–µ–º Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      try {
        const pythonResponse = await fetch('http://localhost:5000/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message: message,
            provider: provider || 'auto',
            model: model || null,
            temperature: temperature || 0.7,
            use_stream: false
          }),
          timeout: 8000
        });

        if (pythonResponse.ok) {
          const pythonResult = await pythonResponse.json();
          if (pythonResult.success && pythonResult.response) {
            console.log('‚úÖ Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ');
            return res.json({
              response: pythonResult.response,
              provider: pythonResult.provider || 'Python-G4F',
              model: pythonResult.model || 'auto',
              cached: false
            });
          }
        }
      } catch (pythonError) {
        console.log('‚ö†Ô∏è Python G4F –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º JavaScript –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã...');
      }
      
      // –ï—Å–ª–∏ Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º JavaScript –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
      console.log('üîß –ü—Ä–æ–±—É–µ–º JavaScript G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã...');
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
      let chatMessages;
      if (messages) {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        chatMessages = messages;
      } else {
        // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        chatMessages = [{ role: 'user', content: message }];
      }
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
      let selectedModel = model;
      if (provider && !model) {
        // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        selectedModel = g4fProvider.getModelForProvider(provider, model);
        console.log(`–î–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${provider} –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${selectedModel}`);
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É(–∞–º) —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º timeout
      const response = await Promise.race([
        g4fProvider.getResponse(message, {
          provider,
          model: selectedModel,
          temperature,
          maxTokens,
          maxRetries: max_retries,
          messages: chatMessages
        }),
        // –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ–º–æ-—Ä–µ–∂–∏–º—É
        new Promise((_, reject) => setTimeout(() => 
          reject(new Error('Timeout: –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç')), 5000))
      ]);
      
      // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      console.log(`–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ${response.provider} (–º–æ–¥–µ–ª—å: ${response.model})`);
      return res.json(response);
      
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ–º–æ-—Ä–µ–∂–∏–º:', error.message);
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç—ã
      const demoResponse = findDemoResponse(userMessageText);
      
      return res.json({
        response: demoResponse,
        provider: 'booomerangs-demo',
        model: 'demo-mode',
        message: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤'
      });
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ G4F API:', error);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    let demoResponse;
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMessage = message || 
        (messages && messages.length > 0 ? 
          messages.filter(m => m.role === 'user').pop()?.content : "");
      
      demoResponse = userMessage ? findDemoResponse(userMessage) : 
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!";
    } catch (e) {
      demoResponse = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.";
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    return res.json({
      response: demoResponse,
      provider: 'booomerangs-demo',
      model: 'demo-mode',
      message: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º –∏–∑-–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
router.get('/providers', async (req, res) => {
  try {
    const providers = g4fProvider.getProviders();
    const models = g4fProvider.PROVIDER_MODELS;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    const availabilityPromises = providers.map(async (provider) => {
      const available = await g4fProvider.checkProviderAvailability(provider);
      return {
        name: provider,
        available,
        model: models[provider] || null
      };
    });
    
    const providersInfo = await Promise.all(availabilityPromises);
    
    return res.json({
      providers: providersInfo,
      default: null // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:', error);
    return res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤',
      message: error.message
    });
  }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
router.get('/check/:providerName', async (req, res) => {
  try {
    const { providerName } = req.params;
    
    if (!providerName) {
      return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞' });
    }
    
    const available = await g4fProvider.checkProviderAvailability(providerName);
    
    return res.json({
      provider: providerName,
      available
    });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${req.params.providerName}:`, error);
    return res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞',
      message: error.message
    });
  }
});

// API –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
router.get('/test', (req, res) => {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–µ API –∫–ª—é—á–µ–π
  const allProviders = g4fProvider.getProviders();
  const keyRequiredProviders = g4fProvider.KEY_REQUIRED_PROVIDERS;
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, –∏—Å–∫–ª—é—á–∞—è —Ç—Ä–µ–±—É—é—â–∏–µ API –∫–ª—é—á–µ–π
  const freeProviders = allProviders.filter(
    provider => !keyRequiredProviders.includes(provider)
  );
  
  res.json({
    status: 'ok',
    message: 'G4F API —Ä–∞–±–æ—Ç–∞–µ—Ç',
    availableProviders: freeProviders,
    note: '–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–µ API –∫–ª—é—á–µ–π'
  });
});

module.exports = router;