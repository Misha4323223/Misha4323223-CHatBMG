#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""

import g4f
import logging
import time
import json
from flask import Flask, request, jsonify
from flask_cors import CORS

logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
PROVIDER_CONFIG = {
    'FreeGpt': 'gpt-4o-mini',
    'You': 'gpt-4o-mini', 
    'Blackbox': 'blackbox',
    'Liaobots': 'gpt-4o-mini',
    'DDG': 'gpt-4o-mini',
    'HuggingChat': 'llama-3.1-70b'
}

def get_g4f_response(message, provider_name='FreeGpt'):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏ –º–æ–¥–µ–ª—å
        if provider_name not in PROVIDER_CONFIG:
            provider_name = 'FreeGpt'
        
        model = PROVIDER_CONFIG[provider_name]
        provider = getattr(g4f.Provider, provider_name)
        
        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ {provider_name} —Å –º–æ–¥–µ–ª—å—é {model}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ G4F
        response = g4f.ChatCompletion.create(
            model=model,
            messages=[{"role": "user", "content": message}],
            provider=provider
        )
        
        result = str(response).strip()
        
        if result and len(result) > 5:
            return {
                "success": True,
                "response": result,
                "provider": provider_name,
                "model": model
            }
        else:
            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ {provider_name}: {str(e)}")
        
        # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        for backup_name, backup_model in PROVIDER_CONFIG.items():
            if backup_name != provider_name:
                try:
                    logging.info(f"–ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {backup_name}")
                    backup_provider = getattr(g4f.Provider, backup_name)
                    
                    response = g4f.ChatCompletion.create(
                        model=backup_model,
                        messages=[{"role": "user", "content": message}],
                        provider=backup_provider
                    )
                    
                    result = str(response).strip()
                    if result and len(result) > 5:
                        return {
                            "success": True,
                            "response": result,
                            "provider": f"{backup_name}_backup",
                            "model": backup_model
                        }
                        
                except Exception as backup_error:
                    logging.error(f"–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä {backup_name} —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {str(backup_error)}")
                    continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        return {
            "success": False,
            "response": f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä.",
            "provider": "fallback",
            "model": "demo",
            "error": str(e)
        }

@app.route('/')
def index():
    return f"G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {list(PROVIDER_CONFIG.keys())}"

@app.route('/python/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    try:
        data = request.json or {}
        message = data.get('message', '').strip()
        provider = data.get('provider', 'FreeGpt')
        
        if not message:
            return jsonify({"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        result = get_g4f_response(message, provider)
        return jsonify(result)
        
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return jsonify({
            "error": str(e),
            "response": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
            "provider": "error"
        }), 500

@app.route('/python/test', methods=['POST'])
def test():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    try:
        data = request.json or {}
        message = data.get('message', '–ü—Ä–∏–≤–µ—Ç! –¢–µ—Å—Ç–∏—Ä—É–µ–º G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã.')
        
        result = get_g4f_response(message, 'FreeGpt')
        return jsonify(result)
        
    except Exception as e:
        return jsonify({
            "error": str(e),
            "response": f"–¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}",
            "provider": "test-error"
        }), 500

@app.route('/providers', methods=['GET'])
def providers():
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    return jsonify({
        "providers": PROVIDER_CONFIG,
        "status": "ready"
    })

if __name__ == '__main__':
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
    app.run(host='0.0.0.0', port=5007, debug=False)