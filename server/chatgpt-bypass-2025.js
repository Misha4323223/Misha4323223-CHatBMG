/**
 * –°–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—Ö–æ–¥–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ ChatGPT (2025)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤–µ–π—à–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã OpenAI
 */

const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

class ChatGPTBypass2025 {
    constructor() {
        this.sessionToken = null;
        this.accessToken = null;
        this.deviceId = uuidv4();
        this.conversationId = null;
        
        // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ User-Agent —Å—Ç—Ä–æ–∫–∏ 2025
        this.userAgents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
        ];
    }

    getRandomUserAgent() {
        return this.userAgents[Math.floor(Math.random() * this.userAgents.length)];
    }

    // –ú–µ—Ç–æ–¥ 1: –ù–æ–≤—ã–π –æ–±—Ö–æ–¥ —á–µ—Ä–µ–∑ Cloudflare Worker
    async tryCloudflareWorkerBypass(message) {
        try {
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Cloudflare Worker –æ–±—Ö–æ–¥...');
            
            const response = await axios.post('https://chatgpt-proxy.workers.dev/api/chat', {
                message: message,
                stream: false
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': this.getRandomUserAgent(),
                    'Origin': 'https://chat.openai.com'
                },
                timeout: 30000
            });

            if (response.data && response.data.choices && response.data.choices[0]) {
                return {
                    success: true,
                    response: response.data.choices[0].message.content,
                    provider: 'CloudflareWorker',
                    model: 'gpt-3.5-turbo'
                };
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Cloudflare Worker –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        return null;
    }

    // –ú–µ—Ç–æ–¥ 2: –û–±—Ö–æ–¥ —á–µ—Ä–µ–∑ Edge Runtime
    async tryEdgeRuntimeBypass(message) {
        try {
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Edge Runtime...');
            
            const response = await axios.post('https://api.openai-proxy.live/v1/chat/completions', {
                model: 'gpt-3.5-turbo',
                messages: [
                    { role: 'user', content: message }
                ],
                stream: false
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': this.getRandomUserAgent(),
                    'Authorization': 'Bearer free-tier-access'
                },
                timeout: 25000
            });

            if (response.data && response.data.choices) {
                return {
                    success: true,
                    response: response.data.choices[0].message.content,
                    provider: 'EdgeRuntime',
                    model: 'gpt-3.5-turbo'
                };
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Edge Runtime –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        return null;
    }

    // –ú–µ—Ç–æ–¥ 3: –ù–æ–≤—ã–π –æ–±—Ö–æ–¥ —á–µ—Ä–µ–∑ Vercel Functions
    async tryVercelFunctionBypass(message) {
        try {
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Vercel Function...');
            
            const response = await axios.post('https://chatgpt-vercel-proxy.vercel.app/api/generate', {
                prompt: message,
                model: 'gpt-3.5-turbo'
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': this.getRandomUserAgent()
                },
                timeout: 20000
            });

            if (response.data && response.data.text) {
                return {
                    success: true,
                    response: response.data.text,
                    provider: 'VercelFunction',
                    model: 'gpt-3.5-turbo'
                };
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Vercel Function –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        return null;
    }

    // –ú–µ—Ç–æ–¥ 4: –û–±—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ API —à–ª—é–∑—ã
    async tryPublicGatewayBypass(message) {
        const gateways = [
            'https://api.chatanywhere.com.cn/v1/chat/completions',
            'https://api.chatanywhere.tech/v1/chat/completions',
            'https://api.chatanywhere.org/v1/chat/completions'
        ];

        for (const gateway of gateways) {
            try {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π —à–ª—é–∑: ${gateway}`);
                
                const response = await axios.post(gateway, {
                    model: 'gpt-3.5-turbo',
                    messages: [{ role: 'user', content: message }],
                    stream: false
                }, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer sk-free-access-token',
                        'User-Agent': this.getRandomUserAgent()
                    },
                    timeout: 15000
                });

                if (response.data && response.data.choices) {
                    return {
                        success: true,
                        response: response.data.choices[0].message.content,
                        provider: 'PublicGateway',
                        model: 'gpt-3.5-turbo'
                    };
                }
            } catch (error) {
                continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–ª—é–∑
            }
        }
        return null;
    }

    // –ú–µ—Ç–æ–¥ 5: –ü—Ä—è–º–æ–π –æ–±—Ö–æ–¥ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    async trySessionTokenBypass(message, sessionToken) {
        try {
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
            
            if (!sessionToken) {
                throw new Error('–°–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º access token –∏–∑ session token
            const authResponse = await axios.post('https://chat.openai.com/api/auth/session', {}, {
                headers: {
                    'Cookie': `__Secure-next-auth.session-token=${sessionToken}`,
                    'User-Agent': this.getRandomUserAgent()
                }
            });

            if (authResponse.data && authResponse.data.accessToken) {
                this.accessToken = authResponse.data.accessToken;

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                const chatResponse = await axios.post('https://chat.openai.com/backend-api/conversation', {
                    action: 'next',
                    messages: [{
                        id: uuidv4(),
                        author: { role: 'user' },
                        content: { content_type: 'text', parts: [message] }
                    }],
                    model: 'gpt-4',
                    timezone_offset_min: -180
                }, {
                    headers: {
                        'Authorization': `Bearer ${this.accessToken}`,
                        'Content-Type': 'application/json',
                        'User-Agent': this.getRandomUserAgent()
                    }
                });

                return {
                    success: true,
                    response: this.parseStreamResponse(chatResponse.data),
                    provider: 'SessionToken',
                    model: 'gpt-4'
                };
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Session token –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        }
        return null;
    }

    // –ü–∞—Ä—Å–µ—Ä –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    parseStreamResponse(data) {
        const lines = data.split('\n');
        for (const line of lines.reverse()) {
            if (line.startsWith('data: ') && line !== 'data: [DONE]') {
                try {
                    const json = JSON.parse(line.substring(6));
                    if (json.message && json.message.content && json.message.content.parts) {
                        return json.message.content.parts[0];
                    }
                } catch (e) {
                    continue;
                }
            }
        }
        return '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å';
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    async getResponse(message, options = {}) {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–∞—Å–∫–∞–¥–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ö–æ–¥–∞ ChatGPT...');
        
        const methods = [
            () => this.tryCloudflareWorkerBypass(message),
            () => this.tryEdgeRuntimeBypass(message),
            () => this.tryVercelFunctionBypass(message),
            () => this.tryPublicGatewayBypass(message)
        ];

        // –ï—Å–ª–∏ –µ—Å—Ç—å session token, –ø—Ä–æ–±—É–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
        if (options.sessionToken) {
            methods.unshift(() => this.trySessionTokenBypass(message, options.sessionToken));
        }

        for (const method of methods) {
            const result = await method();
            if (result && result.success) {
                console.log(`‚úÖ –£—Å–ø–µ—Ö —á–µ—Ä–µ–∑ ${result.provider}!`);
                return result;
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        return {
            success: false,
            error: '–í—Å–µ –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
        };
    }
}

module.exports = ChatGPTBypass2025;