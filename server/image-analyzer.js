/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è BOOOMERANGS AI Chat
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
 */

const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

/**
 * –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
async function analyzeImage(imagePath, originalName) {
    try {
        console.log('üñºÔ∏è –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', originalName);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const metadata = await sharp(imagePath).metadata();
        
        // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–∞
        const colorAnalysis = await analyzeColors(imagePath);
        
        // –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        const compositionAnalysis = analyzeComposition(metadata);
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const contentType = determineContentType(originalName, metadata);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        const description = generateDescription({
            metadata,
            colorAnalysis,
            compositionAnalysis,
            contentType,
            filename: originalName
        });
        
        console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω');
        
        return {
            success: true,
            description,
            details: {
                size: {
                    width: metadata.width,
                    height: metadata.height,
                    format: metadata.format
                },
                colors: colorAnalysis,
                composition: compositionAnalysis,
                contentType
            }
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        return {
            success: false,
            description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.',
            error: error.message
        };
    }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function analyzeColors(imagePath) {
    try {
        const { dominant } = await sharp(imagePath)
            .resize(50, 50)
            .raw()
            .toBuffer({ resolveWithObject: true });
            
        // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤
        const colors = [];
        const buffer = dominant;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 10-–π –ø–∏–∫—Å–µ–ª—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        for (let i = 0; i < buffer.length; i += 30) {
            const r = buffer[i];
            const g = buffer[i + 1];
            const b = buffer[i + 2];
            
            if (r !== undefined && g !== undefined && b !== undefined) {
                colors.push({ r, g, b });
            }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É
        const colorScheme = determineColorScheme(colors);
        
        return {
            scheme: colorScheme,
            dominantColors: colors.slice(0, 5) // –ü–µ—Ä–≤—ã–µ 5 —Ü–≤–µ—Ç–æ–≤
        };
        
    } catch (error) {
        console.log('‚ö†Ô∏è –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤');
        return {
            scheme: '—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è',
            dominantColors: []
        };
    }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
 */
function determineColorScheme(colors) {
    if (colors.length === 0) return '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è';
    
    const avgBrightness = colors.reduce((sum, color) => 
        sum + (color.r + color.g + color.b) / 3, 0) / colors.length;
    
    if (avgBrightness > 200) return '—Å–≤–µ—Ç–ª–∞—è';
    if (avgBrightness < 80) return '—Ç–µ–º–Ω–∞—è';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ—Å—Ç—å
    const isMonochrome = colors.every(color => 
        Math.abs(color.r - color.g) < 30 && 
        Math.abs(color.g - color.b) < 30
    );
    
    if (isMonochrome) return '–º–æ–Ω–æ—Ö—Ä–æ–º–Ω–∞—è';
    
    return '—Ü–≤–µ—Ç–Ω–∞—è';
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function analyzeComposition(metadata) {
    const { width, height } = metadata;
    const aspectRatio = width / height;
    
    let orientation;
    if (aspectRatio > 1.3) {
        orientation = '–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è';
    } else if (aspectRatio < 0.7) {
        orientation = '–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è';
    } else {
        orientation = '–∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è';
    }
    
    let format;
    if (width > 1920 || height > 1920) {
        format = '–≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ';
    } else if (width < 500 || height < 500) {
        format = '–Ω–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ';
    } else {
        format = '—Å—Ä–µ–¥–Ω–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ';
    }
    
    return {
        orientation,
        format,
        aspectRatio: Math.round(aspectRatio * 100) / 100
    };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
 */
function determineContentType(filename, metadata) {
    const name = filename.toLowerCase();
    
    if (name.includes('screenshot') || name.includes('—Å–Ω–∏–º–æ–∫')) {
        return '—Å–∫—Ä–∏–Ω—à–æ—Ç';
    }
    
    if (name.includes('photo') || name.includes('—Ñ–æ—Ç–æ') || name.includes('img')) {
        return '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è';
    }
    
    if (name.includes('diagram') || name.includes('chart') || name.includes('–≥—Ä–∞—Ñ–∏–∫')) {
        return '–¥–∏–∞–≥—Ä–∞–º–º–∞';
    }
    
    if (name.includes('logo') || name.includes('–ª–æ–≥–æ—Ç–∏–ø')) {
        return '–ª–æ–≥–æ—Ç–∏–ø';
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω
    const aspectRatio = metadata.width / metadata.height;
    if (aspectRatio > 2 || aspectRatio < 0.5) {
        return '–±–∞–Ω–Ω–µ—Ä –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
    }
    
    return '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function generateDescription({ metadata, colorAnalysis, compositionAnalysis, contentType, filename }) {
    const { width, height, format } = metadata;
    const { scheme } = colorAnalysis;
    const { orientation, format: resolutionFormat } = compositionAnalysis;
    
    let description = `üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è "${filename}":\n\n`;
    
    description += `üîç **–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n`;
    description += `‚Ä¢ –¢–∏–ø: ${contentType}\n`;
    description += `‚Ä¢ –†–∞–∑–º–µ—Ä: ${width}√ó${height} –ø–∏–∫—Å–µ–ª–µ–π\n`;
    description += `‚Ä¢ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}\n`;
    description += `‚Ä¢ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: ${orientation}\n`;
    description += `‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: ${resolutionFormat}\n\n`;
    
    description += `üé® **–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞:**\n`;
    description += `‚Ä¢ –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: ${scheme}\n\n`;
    
    description += `üìê **–ö–æ–º–ø–æ–∑–∏—Ü–∏—è:**\n`;
    description += `‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: ${compositionAnalysis.aspectRatio}:1\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    description += `\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n`;
    
    if (resolutionFormat === '–≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ') {
        description += `‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏\n`;
    } else if (resolutionFormat === '–Ω–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ') {
        description += `‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ–±-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n`;
    }
    
    if (scheme === '—Ç–µ–º–Ω–∞—è') {
        description += `‚Ä¢ –¢–µ–º–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ —Å–æ–∑–¥–∞–µ—Ç –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç\n`;
    } else if (scheme === '—Å–≤–µ—Ç–ª–∞—è') {
        description += `‚Ä¢ –°–≤–µ—Ç–ª–∞—è –≥–∞–º–º–∞ —Å–æ–∑–¥–∞–µ—Ç –ª–µ–≥–∫–æ–µ –∏ –≤–æ–∑–¥—É—à–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ\n`;
    }
    
    if (contentType === '—Å–∫—Ä–∏–Ω—à–æ—Ç') {
        description += `‚Ä¢ –≠—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç - –≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ —Ç–µ–∫—Å—Ç\n`;
    }
    
    return description;
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
function cleanupTempFile(filePath) {
    try {
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
            console.log('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω:', filePath);
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', error.message);
    }
}

export {
    analyzeImage,
    cleanupTempFile
};