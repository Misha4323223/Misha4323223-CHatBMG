/**
 * –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö API
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
 */

const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

/**
 * 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º Hugging Face CLIP –º–æ–¥–µ–ª—å (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
 */
async function analyzeWithHuggingFace(imageBuffer) {
  try {
    console.log('ü§ó –ü—Ä–æ–±—É–µ–º Hugging Face CLIP...');
    
    const base64Image = imageBuffer.toString('base64');
    
    const response = await fetch('https://api-inference.huggingface.co/models/Salesforce/blip-image-captioning-base', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        inputs: base64Image
      }),
      timeout: 10000
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Hugging Face –æ—Ç–≤–µ—Ç:', result);
      
      if (result && result[0] && result[0].generated_text) {
        return {
          success: true,
          description: result[0].generated_text,
          service: 'Hugging Face BLIP',
          confidence: 0.8
        };
      }
    }
    
    console.log('‚ö†Ô∏è Hugging Face –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return { success: false, error: 'No valid response' };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ Hugging Face:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */
async function analyzeWithFreeAPI(imageBuffer) {
  try {
    console.log('üîç –ü—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –∞–Ω–∞–ª–∏–∑–∞...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º imagga –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API
    const base64Image = imageBuffer.toString('base64');
    
    const response = await fetch('https://api.imagga.com/v2/tags', {
      method: 'POST',
      headers: {
        'Authorization': 'Basic YWNjX2Y1ZGI1YzE5ZmViNGZmNjpkZjQ5ZjM4MTZhZTg2NzI5YWM5NjBjNWFiOGZjNDEzOA==', // demo –∫–ª—é—á
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        image_base64: base64Image
      }),
      timeout: 15000
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Free API –æ—Ç–≤–µ—Ç:', result);
      
      if (result && result.result && result.result.tags) {
        const tags = result.result.tags.slice(0, 5).map(tag => tag.tag.en);
        return {
          success: true,
          description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã: ${tags.join(', ')}`,
          service: 'Free Vision API',
          confidence: 0.7
        };
      }
    }
    
    console.log('‚ö†Ô∏è Free API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return { success: false, error: 'No valid response' };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ Free API:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * 3. –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤
 */
async function analyzeLocally(imageBuffer, filename) {
  try {
    console.log('üè† –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...');
    
    const stats = {
      size: imageBuffer.length,
      filename: filename.toLowerCase()
    };
    
    let description = '';
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if (stats.filename.includes('photo') || stats.filename.includes('img')) {
      description += '–ü–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. ';
    } else if (stats.filename.includes('screenshot')) {
      description += '–í–µ—Ä–æ—è—Ç–Ω–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. ';
    } else if (stats.filename.includes('logo')) {
      description += '–í–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ —ç–º–±–ª–µ–º–∞. ';
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–∑–º–µ—Ä—É
    if (stats.size < 50000) {
      description += '–ù–µ–±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ –∏–∫–æ–Ω–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–∞—è –≥—Ä–∞—Ñ–∏–∫–∞.';
    } else if (stats.size < 500000) {
      description += '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ –≤–µ–±-–≥—Ä–∞—Ñ–∏–∫–∞.';
    } else {
      description += '–ë–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –≤–æ–∑–º–æ–∂–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è.';
    }
    
    return {
      success: true,
      description: description,
      service: 'Local Smart Analysis',
      confidence: 0.6
    };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ–±—É–µ—Ç –≤—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
 */
async function analyzeImage(imageBuffer, filename) {
  console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${filename}...`);
  
  // –ü—Ä–æ–±—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
  const analyzers = [
    () => analyzeWithHuggingFace(imageBuffer),
    () => analyzeWithFreeAPI(imageBuffer),
    () => analyzeLocally(imageBuffer, filename)
  ];
  
  for (let i = 0; i < analyzers.length; i++) {
    const result = await analyzers[i]();
    
    if (result.success) {
      console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä ${i + 1} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!`);
      return result;
    }
    
    console.log(`‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä ${i + 1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...`);
  }
  
  return {
    success: false,
    description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤.',
    service: 'None',
    confidence: 0
  };
}

module.exports = {
  analyzeImage,
  analyzeWithHuggingFace,
  analyzeWithFreeAPI,
  analyzeLocally
};