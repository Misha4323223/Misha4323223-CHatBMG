/**
 * –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö API
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
 */

const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

/**
 * 1. –ü—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
 */
async function analyzeWithPublicAPI(imageBuffer) {
  try {
    console.log('üîç –ü—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π Vision API...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const formData = new (require('form-data'))();
    formData.append('image', imageBuffer, 'image.jpg');
    
    const response = await fetch('https://api.api-ninjas.com/v1/imagetotext', {
      method: 'POST',
      body: formData,
      headers: {
        'X-Api-Key': 'demo_key', // –ò—Å–ø–æ–ª—å–∑—É–µ–º demo –∫–ª—é—á
      },
      timeout: 15000
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Public API –æ—Ç–≤–µ—Ç:', result);
      
      if (result && result.length > 0) {
        return {
          success: true,
          description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç: ${result.map(item => item.text).join(', ')}`,
          service: 'Public Vision API',
          confidence: 0.7
        };
      }
    }
    
    console.log('‚ö†Ô∏è Public API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return { success: false, error: 'No valid response' };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ Public API:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * 2. –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function analyzeWithAIProvider(imageBuffer, filename) {
  try {
    console.log('ü§ñ –ü—Ä–æ–±—É–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–∞—à–µ–º—É Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
    const response = await fetch('http://localhost:5004/python/chat', {
      method: 'POST', 
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—à–∏ —á—Ç–æ –Ω–∞ –Ω–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ. –§–∞–π–ª –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ${filename}. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤, –ª—é–¥–µ–π, –∂–∏–≤–æ—Ç–Ω—ã—Ö, —Ü–≤–µ—Ç–æ–≤ –∏ –¥–µ—Ç–∞–ª–µ–π.`,
        provider: 'Qwen_Qwen_2_5_Max'
      }),
      timeout: 20000
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ AI Provider –æ—Ç–≤–µ—Ç:', result);
      
      if (result && result.response) {
        return {
          success: true,
          description: result.response,
          service: 'Qwen AI Analysis',
          confidence: 0.85
        };
      }
    }
    
    console.log('‚ö†Ô∏è AI Provider –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return { success: false, error: 'No valid response' };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ AI Provider:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * 3. –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
 */
async function analyzeWithPixelAnalysis(imageBuffer) {
  try {
    console.log('üé® –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–≤–µ—Ç–∞—Ö –∏ —Ä–∞–∑–º–µ—Ä–∞—Ö
    const imageSize = imageBuffer.length;
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤ (–≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞)
    let colorGuess = '';
    const sample = imageBuffer.slice(0, 1000); // –ë–µ—Ä–µ–º –æ–±—Ä–∞–∑–µ—Ü
    
    let redCount = 0, greenCount = 0, blueCount = 0;
    for (let i = 0; i < sample.length; i += 3) {
      if (sample[i] > 150) redCount++;
      if (sample[i+1] > 150) greenCount++;
      if (sample[i+2] > 150) blueCount++;
    }
    
    if (redCount > greenCount && redCount > blueCount) {
      colorGuess = '–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –∫—Ä–∞—Å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–∞—Ç, —Ü–≤–µ—Ç—ã –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞. ';
    } else if (greenCount > redCount && greenCount > blueCount) {
      colorGuess = '–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –∑–µ–ª–µ–Ω—ã–µ —Ç–æ–Ω–∞ - –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–∏—Ä–æ–¥–∞, —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ —Ç—Ä–∞–≤–∞. ';
    } else if (blueCount > redCount && blueCount > greenCount) {
      colorGuess = '–ú–Ω–æ–≥–æ —Å–∏–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–±–æ, –≤–æ–¥–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç—ã —Å–∏–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞. ';
    } else {
      colorGuess = '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞. ';
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let complexityGuess = '';
    if (imageSize < 100000) {
      complexityGuess = '–ü—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–µ—Ç–∞–ª–µ–π.';
    } else if (imageSize < 1000000) {
      complexityGuess = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.';
    } else {
      complexityGuess = '–°–ª–æ–∂–Ω–æ–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤.';
    }
    
    return {
      success: true,
      description: `${colorGuess}${complexityGuess}`,
      service: 'Pixel Pattern Analysis',
      confidence: 0.65
    };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏–∫—Å–µ–ª–µ–π:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * 3. –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤
 */
async function analyzeLocally(imageBuffer, filename) {
  try {
    console.log('üè† –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...');
    
    const stats = {
      size: imageBuffer.length,
      filename: filename.toLowerCase()
    };
    
    let description = '';
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if (stats.filename.includes('photo') || stats.filename.includes('img')) {
      description += '–ü–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. ';
    } else if (stats.filename.includes('screenshot')) {
      description += '–í–µ—Ä–æ—è—Ç–Ω–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. ';
    } else if (stats.filename.includes('logo')) {
      description += '–í–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ —ç–º–±–ª–µ–º–∞. ';
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–∑–º–µ—Ä—É
    if (stats.size < 50000) {
      description += '–ù–µ–±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ –∏–∫–æ–Ω–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–∞—è –≥—Ä–∞—Ñ–∏–∫–∞.';
    } else if (stats.size < 500000) {
      description += '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ –≤–µ–±-–≥—Ä–∞—Ñ–∏–∫–∞.';
    } else {
      description += '–ë–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –≤–æ–∑–º–æ–∂–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è.';
    }
    
    return {
      success: true,
      description: description,
      service: 'Local Smart Analysis',
      confidence: 0.6
    };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ–±—É–µ—Ç –≤—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
 */
async function analyzeImage(imageBuffer, filename) {
  console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${filename}...`);
  
  // –ü—Ä–æ–±—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
  const analyzers = [
    () => analyzeWithAIProvider(imageBuffer, filename),
    () => analyzeWithPublicAPI(imageBuffer),
    () => analyzeWithPixelAnalysis(imageBuffer),
    () => analyzeLocally(imageBuffer, filename)
  ];
  
  for (let i = 0; i < analyzers.length; i++) {
    const result = await analyzers[i]();
    
    if (result.success) {
      console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä ${i + 1} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!`);
      return result;
    }
    
    console.log(`‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä ${i + 1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...`);
  }
  
  return {
    success: false,
    description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤.',
    service: 'None',
    confidence: 0
  };
}

module.exports = {
  analyzeImage,
  analyzeWithPublicAPI,
  analyzeWithAIProvider,
  analyzeWithPixelAnalysis,
  analyzeLocally
};