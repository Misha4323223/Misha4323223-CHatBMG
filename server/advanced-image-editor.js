/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –¥–µ—Ç–∞–ª–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

const sharp = require('sharp');
const fs = require('fs');

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 * @param {string} imageUrl - URL –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} objectDescription - –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function addObjectToImage(imageUrl, objectDescription) {
  try {
    console.log(`‚ûï [ADV-EDITOR] –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç: ${objectDescription}`);
    
    const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
    const imageResponse = await fetch(imageUrl);
    const imageBuffer = await imageResponse.buffer();
    
    const image = sharp(imageBuffer);
    const { width, height } = await image.metadata();
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é "–Ω–∞–∫–ª–∞–¥–∫—É" –æ–±—ä–µ–∫—Ç–∞ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ - —Ü–≤–µ—Ç–Ω—É—é —Ñ–∏–≥—É—Ä—É)
    const timestamp = Date.now();
    const outputPath = `./uploads/object-added-${timestamp}.png`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –æ–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ–∏–≥—É—Ä—É
    let overlayColor = { r: 255, g: 255, b: 0 }; // –∂–µ–ª—Ç—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let overlaySize = Math.min(width, height) * 0.15;
    
    if (objectDescription.includes('—Å–æ–ª–Ω—Ü–µ') || objectDescription.includes('sun')) {
      overlayColor = { r: 255, g: 255, b: 0 }; // –∂–µ–ª—Ç—ã–π
      overlaySize = Math.min(width, height) * 0.2;
    } else if (objectDescription.includes('—Ü–≤–µ—Ç') || objectDescription.includes('flower')) {
      overlayColor = { r: 255, g: 100, b: 150 }; // —Ä–æ–∑–æ–≤—ã–π
      overlaySize = Math.min(width, height) * 0.1;
    } else if (objectDescription.includes('–¥–µ—Ä–µ–≤–æ') || objectDescription.includes('tree')) {
      overlayColor = { r: 100, g: 200, b: 100 }; // –∑–µ–ª–µ–Ω—ã–π
      overlaySize = Math.min(width, height) * 0.25;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –Ω–∞–∫–ª–∞–¥–∫—É
    const overlay = sharp({
      create: {
        width: Math.round(overlaySize),
        height: Math.round(overlaySize),
        channels: 4,
        background: overlayColor
      }
    }).png();
    
    const overlayBuffer = await overlay.toBuffer();
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
    const left = Math.round(width - overlaySize - 50);
    const top = 50;
    
    await image
      .composite([{
        input: overlayBuffer,
        left: left,
        top: top,
        blend: 'over'
      }])
      .png()
      .toFile(outputPath);
    
    return {
      success: true,
      imageUrl: `/uploads/object-added-${timestamp}.png`,
      message: `–î–æ–±–∞–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç "${objectDescription}" –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`,
      type: 'object_addition'
    };
    
  } catch (error) {
    console.error('‚ùå [ADV-EDITOR] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    };
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞)
 * @param {string} imageUrl - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} areaDescription - –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function removeAreaFromImage(imageUrl, areaDescription) {
  try {
    console.log(`üóëÔ∏è [ADV-EDITOR] –£–¥–∞–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å: ${areaDescription}`);
    
    const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
    const imageResponse = await fetch(imageUrl);
    const imageBuffer = await imageResponse.buffer();
    
    const image = sharp(imageBuffer);
    const { width, height } = await image.metadata();
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–∞—Å–∫—É –¥–ª—è "—É–¥–∞–ª–µ–Ω–∏—è" –æ–±–ª–∞—Å—Ç–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏
    const timestamp = Date.now();
    const outputPath = `./uploads/removed-area-${timestamp}.png`;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–∞–∫ –∏–º–∏—Ç–∞—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
    const maskSize = Math.min(width, height) * 0.3;
    const x = Math.round((width - maskSize) / 2);
    const y = Math.round((height - maskSize) / 2);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—É—é –≤–µ—Ä—Å–∏—é
    const blurredImage = await sharp(imageBuffer)
      .blur(20)
      .toBuffer();
    
    // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ä–∞–∑–º—ã—Ç—É—é –æ–±–ª–∞—Å—Ç—å –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
    await image
      .composite([{
        input: blurredImage,
        left: x,
        top: y,
        blend: 'overlay'
      }])
      .png()
      .toFile(outputPath);
    
    return {
      success: true,
      imageUrl: `/uploads/removed-area-${timestamp}.png`,
      message: `–û–±–ª–∞—Å—Ç—å "${areaDescription}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (–ø—Ä–∏–º–µ–Ω–µ–Ω–æ —Ä–∞–∑–º—ã—Ç–∏–µ)`,
      type: 'area_removal'
    };
    
  } catch (error) {
    console.error('‚ùå [ADV-EDITOR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å'
    };
  }
}

/**
 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
 * @param {string} imageUrl - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} colorChange - –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function changeObjectColor(imageUrl, colorChange) {
  try {
    console.log(`üé® [ADV-EDITOR] –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç: ${colorChange}`);
    
    const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
    const imageResponse = await fetch(imageUrl);
    const imageBuffer = await imageResponse.buffer();
    
    const timestamp = Date.now();
    const outputPath = `./uploads/color-changed-${timestamp}.png`;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞
    let processedImage = sharp(imageBuffer);
    
    if (colorChange.includes('–∫—Ä–∞—Å–Ω') || colorChange.includes('red')) {
      processedImage = processedImage.tint({ r: 255, g: 200, b: 200 });
    } else if (colorChange.includes('—Å–∏–Ω') || colorChange.includes('blue')) {
      processedImage = processedImage.tint({ r: 200, g: 200, b: 255 });
    } else if (colorChange.includes('–∑–µ–ª–µ–Ω') || colorChange.includes('green')) {
      processedImage = processedImage.tint({ r: 200, g: 255, b: 200 });
    } else if (colorChange.includes('–∂–µ–ª—Ç') || colorChange.includes('yellow')) {
      processedImage = processedImage.tint({ r: 255, g: 255, b: 200 });
    } else {
      // –û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
      processedImage = processedImage.modulate({ saturation: 1.5 });
    }
    
    await processedImage.png().toFile(outputPath);
    
    return {
      success: true,
      imageUrl: `/uploads/color-changed-${timestamp}.png`,
      message: `–¶–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω: ${colorChange}`,
      type: 'color_change'
    };
    
  } catch (error) {
    console.error('‚ùå [ADV-EDITOR] –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –æ–±—ä–µ–∫—Ç–∞'
    };
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} request - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object} –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 */
function parseAdvancedEditRequest(request) {
  const lowerRequest = request.toLowerCase();
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
  if (lowerRequest.includes('–¥–æ–±–∞–≤—å') || lowerRequest.includes('–Ω–∞—Ä–∏—Å—É–π') || lowerRequest.includes('–ø–æ—Å—Ç–∞–≤—å')) {
    const objectMatch = request.match(/–¥–æ–±–∞–≤—å\s+(.+?)(?:\.|$|,)/i) || 
                       request.match(/–Ω–∞—Ä–∏—Å—É–π\s+(.+?)(?:\.|$|,)/i) ||
                       request.match(/–ø–æ—Å—Ç–∞–≤—å\s+(.+?)(?:\.|$|,)/i);
    const objectToAdd = objectMatch ? objectMatch[1] : '–Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç';
    
    return {
      type: 'add_object',
      object: objectToAdd,
      description: `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: ${objectToAdd}`
    };
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤/–æ–±–ª–∞—Å—Ç–µ–π
  if (lowerRequest.includes('—É–±–µ—Ä–∏') || lowerRequest.includes('—É–¥–∞–ª–∏') || lowerRequest.includes('—Å–∫—Ä–æ–π')) {
    const areaMatch = request.match(/—É–±–µ—Ä–∏\s+(.+?)(?:\.|$|,)/i) || 
                     request.match(/—É–¥–∞–ª–∏\s+(.+?)(?:\.|$|,)/i) ||
                     request.match(/—Å–∫—Ä–æ–π\s+(.+?)(?:\.|$|,)/i);
    const areaToRemove = areaMatch ? areaMatch[1] : '—É–∫–∞–∑–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å';
    
    return {
      type: 'remove_area',
      area: areaToRemove,
      description: `–£–¥–∞–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏: ${areaToRemove}`
    };
  }
  
  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
  if (lowerRequest.includes('–∏–∑–º–µ–Ω–∏ —Ü–≤–µ—Ç') || lowerRequest.includes('–ø–µ—Ä–µ–∫—Ä–∞—Å—å') || lowerRequest.includes('—Å–¥–µ–ª–∞–π')) {
    const colorMatch = request.match(/(?:–∏–∑–º–µ–Ω–∏ —Ü–≤–µ—Ç|–ø–µ—Ä–µ–∫—Ä–∞—Å—å|—Å–¥–µ–ª–∞–π)\s+(.+?)(?:\.|$|,)/i);
    const colorChange = colorMatch ? colorMatch[1] : '—Ü–≤–µ—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏';
    
    return {
      type: 'change_color',
      colorChange: colorChange,
      description: `–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞: ${colorChange}`
    };
  }
  
  return {
    type: 'unknown',
    description: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @param {string} imageUrl - URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} editRequest - –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function processAdvancedEdit(imageUrl, editRequest) {
  const request = parseAdvancedEditRequest(editRequest);
  
  console.log(`üîß [ADV-EDITOR] –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${request.description}`);
  
  switch (request.type) {
    case 'add_object':
      return await addObjectToImage(imageUrl, request.object);
      
    case 'remove_area':
      return await removeAreaFromImage(imageUrl, request.area);
      
    case 'change_color':
      return await changeObjectColor(imageUrl, request.colorChange);
      
    default:
      return {
        success: false,
        error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è',
        message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: "–¥–æ–±–∞–≤—å —Å–æ–ª–Ω—Ü–µ", "—É–±–µ—Ä–∏ –¥–µ—Ä–µ–≤–æ", "–∏–∑–º–µ–Ω–∏ —Ü–≤–µ—Ç –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π"'
      };
  }
}

module.exports = {
  processAdvancedEdit,
  addObjectToImage,
  removeAreaFromImage,
  changeObjectColor,
  parseAdvancedEditRequest
};