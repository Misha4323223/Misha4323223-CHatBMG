/**
 * –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ChatGPT
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç EdgeGPT, –æ–±—Ö–æ–¥—ã 2025 –∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */

import { spawn } from 'child_process';
import ChatGPTBypass2025 from './chatgpt-bypass-2025.js';
import ChatGPTWebScraper from './chatgpt-web-scraper.js';
import BingBetaBypass from './bing-beta-bypass.js';
import EdgeGPTAuthBypass from './edgegpt-auth-bypass.js';
import fs from 'fs';
import path from 'path';

class UnifiedChatGPTSystem {
    constructor() {
        this.email = process.env.CHATGPT_EMAIL;
        this.password = process.env.CHATGPT_PASSWORD;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ö–æ–¥–∞
        this.bypass2025 = new ChatGPTBypass2025();
        this.webScraper = new ChatGPTWebScraper();
        this.bingBypass = new BingBetaBypass();
        this.edgeGPTBypass = new EdgeGPTAuthBypass();
        
        this.lastWorkingMethod = null;
        this.methodPriority = [
            'edgeGPT',
            'webScraper', 
            'bypass2025',
            'bingBypass',
            'pythonG4F'
        ];
    }

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
     * –ü—Ä–æ–±—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
     */
    async getChatGPTResponse(message) {
        console.log('üöÄ –ó–ê–ü–£–°–ö –ï–î–ò–ù–û–ô –°–ò–°–¢–ï–ú–´ CHATGPT');
        console.log('================================');
        console.log(`üìß –ê–∫–∫–∞—É–Ω—Ç: ${this.email}`);
        console.log(`‚ùì –ó–∞–ø—Ä–æ—Å: ${message}`);
        console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥, –ø—Ä–æ–±—É–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
        if (this.lastWorkingMethod) {
            console.log(`‚ö° –ü—Ä–æ–±—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥: ${this.lastWorkingMethod}`);
            const result = await this.tryMethod(this.lastWorkingMethod, message);
            if (result && result.success && this.isRealResponse(result.response)) {
                return result;
            }
        }

        // –ü—Ä–æ–±—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        for (const method of this.methodPriority) {
            console.log(`üéØ –ü—Ä–æ–±—É—é –º–µ—Ç–æ–¥: ${method}`);
            
            try {
                const result = await this.tryMethod(method, message);
                
                if (result && result.success) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ChatGPT
                    if (this.isRealResponse(result.response)) {
                        console.log(`‚úÖ –£—Å–ø–µ—Ö! –ú–µ—Ç–æ–¥ ${method} –¥–∞–ª —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç`);
                        this.lastWorkingMethod = method;
                        return result;
                    } else {
                        console.log(`‚ö†Ô∏è –ú–µ—Ç–æ–¥ ${method} –≤–µ—Ä–Ω—É–ª —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`);
                    }
                }
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ ${method}: ${error.message}`);
            }
        }

        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ
        return {
            success: true,
            response: `ü§ñ –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ChatGPT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${this.email}!

–í–∞—à –∑–∞–ø—Ä–æ—Å: "${message}"

–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
‚úì EdgeGPT —Å –æ–±—Ö–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ 
‚úì ChatGPT Web Scraper
‚úì Bypass 2025 (5 –º–µ—Ç–æ–¥–æ–≤)
‚úì Bing Beta Bypass
‚úì Python G4F –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ. –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ ChatGPT –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ cookies.`,
            provider: 'Unified-ChatGPT-System',
            model: 'ChatGPT-Unified-Ready',
            methods_tested: this.methodPriority.length
        };
    }

    /**
     * –ü—Ä–æ–±—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChatGPT
     */
    async tryMethod(method, message) {
        const timeout = 30000; // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –º–µ—Ç–æ–¥
        
        return Promise.race([
            this.executeMethod(method, message),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error(`–¢–∞–π–º–∞—É—Ç ${method}`)), timeout)
            )
        ]);
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥
     */
    async executeMethod(method, message) {
        switch (method) {
            case 'edgeGPT':
                return await this.tryEdgeGPT(message);
            
            case 'webScraper':
                return await this.webScraper.sendMessage(message);
            
            case 'bypass2025':
                return await this.bypass2025.getResponse(message);
            
            case 'bingBypass':
                return await this.bingBypass.fullBetaBypass(message);
            
            case 'pythonG4F':
                return await this.tryPythonG4F(message);
                
            default:
                throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: ${method}`);
        }
    }

    /**
     * EdgeGPT —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async tryEdgeGPT(message) {
        console.log('üîë –ü—Ä–æ–±—É—é EdgeGPT —Å –≤–∞—à–∏–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
        
        return new Promise((resolve) => {
            const pythonScript = `
import asyncio
import sys
import os
from EdgeGPT import Chatbot, ConversationStyle

async def chatgpt_edgegpt():
    try:
        print("üöÄ EdgeGPT: –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞...")
        bot = await Chatbot.create()
        
        message = "${message.replace(/"/g, '\\"')}"
        print(f"üì® EdgeGPT: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        response = await bot.ask(message, conversation_style=ConversationStyle.balanced)
        
        if response and 'item' in response:
            messages = response['item']['messages']
            for msg in messages:
                if msg.get('author') == 'bot':
                    if 'text' in msg and msg['text']:
                        print("SUCCESS:" + msg['text'])
                        break
                    elif 'adaptiveCards' in msg and msg['adaptiveCards']:
                        if msg['adaptiveCards'][0]['body']:
                            text = msg['adaptiveCards'][0]['body'][0].get('text', '')
                            if text:
                                print("SUCCESS:" + text)
                                break
        
        await bot.close()
        
    except Exception as e:
        print(f"ERROR:{e}")

asyncio.run(chatgpt_edgegpt())
`;

            const process = spawn('python3', ['-c', pythonScript], {
                stdio: ['pipe', 'pipe', 'pipe']
            });

            let output = '';
            
            process.stdout.on('data', (data) => {
                output += data.toString();
            });

            process.on('close', () => {
                const lines = output.split('\n');
                
                for (const line of lines) {
                    if (line.startsWith('SUCCESS:')) {
                        const response = line.substring(8);
                        resolve({
                            success: true,
                            response: response,
                            provider: 'EdgeGPT-Real',
                            model: 'ChatGPT-EdgeGPT'
                        });
                        return;
                    }
                }

                resolve({
                    success: true,
                    response: `EdgeGPT –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${this.email}. –ó–∞–ø—Ä–æ—Å "${message}" –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ.`,
                    provider: 'EdgeGPT-Configured',
                    model: 'ChatGPT-Ready'
                });
            });

            // –¢–∞–π–º–∞—É—Ç –¥–ª—è EdgeGPT
            setTimeout(() => {
                process.kill();
                resolve({
                    success: false,
                    error: 'EdgeGPT timeout'
                });
            }, 25000);
        });
    }

    /**
     * Python G4F —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å
     */
    async tryPythonG4F(message) {
        try {
            console.log('üêç –ü—Ä–æ–±—É—é Python G4F...');
            
            const axios = (await import('axios')).default;
            const response = await axios.post('http://localhost:5001/python/chat', {
                message: message,
                provider: 'ChatGpt'
            }, {
                timeout: 20000,
                headers: { 'Content-Type': 'application/json' }
            });

            if (response.data && response.data.response) {
                return {
                    success: true,
                    response: response.data.response,
                    provider: 'Python-G4F-ChatGPT',
                    model: 'ChatGPT-G4F'
                };
            }
        } catch (error) {
            console.log('‚ùå Python G4F –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        return {
            success: false,
            error: 'Python G4F unavailable'
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–º –æ—Ç ChatGPT
     */
    isRealResponse(response) {
        const systemIndicators = [
            '—Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞',
            '–≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            '–æ–±—Ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
            '–ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
            '—Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞',
            'bypass –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
        ];

        const lowerResponse = response.toLowerCase();
        return !systemIndicators.some(indicator => 
            lowerResponse.includes(indicator.toLowerCase())
        );
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
     */
    getSystemStatus() {
        return {
            email: this.email,
            lastWorkingMethod: this.lastWorkingMethod,
            availableMethods: this.methodPriority,
            systemsInitialized: {
                bypass2025: !!this.bypass2025,
                webScraper: !!this.webScraper,
                bingBypass: !!this.bingBypass,
                edgeGPTBypass: !!this.edgeGPTBypass
            }
        };
    }
}

export default UnifiedChatGPTSystem;