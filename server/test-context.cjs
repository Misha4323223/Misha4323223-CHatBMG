/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∞–º—è—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 */

const http = require('http');

async function testContext() {
  console.log('\nüß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê ===');
  
  const sessionId = `test_${Date.now()}`;
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    console.log('\nüìù –¢–µ—Å—Ç 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ');
    const response1 = await sendMessage("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π", sessionId);
    console.log('üì• –û—Ç–≤–µ—Ç 1:', response1.substring(0, 100) + '...');
    
    // –ü–∞—É–∑–∞
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    console.log('\nüß† –¢–µ—Å—Ç 2: –ü–∞–º—è—Ç—å –∏–º–µ–Ω–∏');
    const response2 = await sendMessage("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?", sessionId);
    console.log('üì• –û—Ç–≤–µ—Ç 2:', response2);
    
    if (response2.toLowerCase().includes('–∞–ª–µ–∫—Å–µ–π')) {
      console.log('‚úÖ –ö–û–ù–¢–ï–ö–°–¢ –†–ê–ë–û–¢–ê–ï–¢! AI –ø–æ–º–Ω–∏—Ç –∏–º—è');
      return true;
    } else {
      console.log('‚ùå –ö–û–ù–¢–ï–ö–°–¢ –ù–ï –†–ê–ë–û–¢–ê–ï–¢! AI –Ω–µ –ø–æ–º–Ω–∏—Ç –∏–º—è');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

async function sendMessage(message, sessionId) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({
      message: message,
      provider: 'Qwen_Qwen_2_5_Max',
      sessionId: sessionId
    });
    
    const options = {
      hostname: 'localhost',
      port: 5173,
      path: '/api/stream',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      },
      timeout: 15000
    };
    
    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const lines = data.split('\n');
          let fullResponse = '';
          
          for (const line of lines) {
            if (line.startsWith('data: ')) {
              try {
                const parsed = JSON.parse(line.substring(6));
                if (parsed.text) fullResponse += parsed.text;
              } catch (e) {}
            }
          }
          
          resolve(fullResponse || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞');
        } catch (error) {
          reject(new Error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ' + error.message));
        }
      });
    });
    
    req.on('error', (error) => reject(error));
    req.on('timeout', () => {
      req.destroy();
      reject(new Error('–¢–∞–π–º–∞—É—Ç'));
    });
    
    req.write(postData);
    req.end();
  });
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testContext().then((success) => {
    console.log(success ? '\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!' : '\n‚ö†Ô∏è –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!');
    process.exit(success ? 0 : 1);
  });
}

module.exports = { testContext };