/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è BOOOMERANGS AI Chat
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const IMAGES_DIR = path.join(process.cwd(), 'public', 'generated-images');
if (!fs.existsSync(IMAGES_DIR)) {
    fs.mkdirSync(IMAGES_DIR, { recursive: true });
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
 */
async function generateImage(prompt, style = 'realistic') {
    console.log('üé® –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', prompt);
    
    const imageId = generateUniqueId();
    
    try {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const providers = [
            () => generateWithPollinations(prompt, style, imageId),
            () => generateWithReplicateProxy(prompt, style, imageId),
            () => generateWithFalAI(prompt, style, imageId),
            () => generateWithCivitAI(prompt, style, imageId)
        ];
        
        for (const provider of providers) {
            try {
                const result = await provider();
                if (result.success) {
                    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:', result.imageUrl);
                    return result;
                }
            } catch (error) {
                console.log('‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...');
                continue;
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return generatePlaceholderImage(prompt, imageId);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        return {
            success: false,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        };
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations AI (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API)
 */
async function generateWithPollinations(prompt, style, imageId) {
    console.log('üå∏ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Pollinations...');
    
    // –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const enhancedPrompt = enhancePromptForPollinations(prompt, style);
    const encodedPrompt = encodeURIComponent(enhancedPrompt);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API Pollinations
    const apiUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}?width=512&height=512&seed=${Math.floor(Math.random() * 1000000)}&model=flux&enhance=true`;
    
    console.log('üå∏ –ó–∞–ø—Ä–æ—Å –∫ Pollinations:', apiUrl);
    
    const response = await fetch(apiUrl, {
        method: 'GET',
        headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'image/*,*/*;q=0.8'
        },
        timeout: 45000
    });
    
    if (response.ok) {
        const imageBuffer = await response.buffer();
        const filename = `pollinations_${imageId}.jpg`;
        const filepath = path.join(IMAGES_DIR, filename);
        
        fs.writeFileSync(filepath, imageBuffer);
        
        console.log('‚úÖ Pollinations: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        
        return {
            success: true,
            imageUrl: `/generated-images/${filename}`,
            provider: 'Pollinations AI',
            prompt: prompt,
            enhancedPrompt: enhancedPrompt
        };
    }
    
    throw new Error(`Pollinations API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
}

/**
 * –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Pollinations
 */
function enhancePromptForPollinations(prompt, style) {
    let enhanced = prompt;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    const styleModifiers = {
        'realistic': 'photorealistic, highly detailed, 8k quality',
        'artistic': 'digital art, artistic style, creative',
        'anime': 'anime style, manga, japanese animation',
        'logo': 'clean logo design, minimalist, professional'
    };
    
    if (styleModifiers[style]) {
        enhanced += `, ${styleModifiers[style]}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
    enhanced += ', high quality, detailed, beautiful';
    
    return enhanced;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Replicate Proxy (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
 */
async function generateWithReplicateProxy(prompt, style, imageId) {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Replicate Proxy...');
    
    const enhancedPrompt = enhancePromptForPollinations(prompt, style);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è Replicate
    const apiUrl = 'https://replicate-api-proxy.glitch.me/predictions';
    
    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'BOOOMERANGS-AI-Chat'
        },
        body: JSON.stringify({
            version: 'stability-ai/stable-diffusion',
            input: {
                prompt: enhancedPrompt,
                width: 512,
                height: 512,
                num_inference_steps: 20,
                guidance_scale: 7.5
            }
        }),
        timeout: 40000
    });
    
    if (response.ok) {
        const data = await response.json();
        
        if (data.output && data.output[0]) {
            const imageUrl = data.output[0];
            const filename = `replicate_${imageId}.jpg`;
            const filepath = path.join(IMAGES_DIR, filename);
            
            // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const imageResponse = await fetch(imageUrl);
            const imageBuffer = await imageResponse.buffer();
            fs.writeFileSync(filepath, imageBuffer);
            
            console.log('‚úÖ Replicate Proxy: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
            
            return {
                success: true,
                imageUrl: `/generated-images/${filename}`,
                provider: 'Replicate Proxy',
                prompt: prompt
            };
        }
    }
    
    throw new Error(`Replicate Proxy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Fal.AI (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç)
 */
async function generateWithFalAI(prompt, style, imageId) {
    console.log('‚ö° –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Fal.AI...');
    
    const enhancedPrompt = enhancePromptForPollinations(prompt, style);
    
    const apiUrl = 'https://fal.run/fal-ai/flux/schnell';
    
    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'BOOOMERANGS-AI-Chat'
        },
        body: JSON.stringify({
            prompt: enhancedPrompt,
            image_size: 'square_hd',
            num_inference_steps: 4,
            enable_safety_checker: false
        }),
        timeout: 35000
    });
    
    if (response.ok) {
        const data = await response.json();
        
        if (data.images && data.images[0] && data.images[0].url) {
            const imageUrl = data.images[0].url;
            const filename = `fal_${imageId}.jpg`;
            const filepath = path.join(IMAGES_DIR, filename);
            
            // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const imageResponse = await fetch(imageUrl);
            const imageBuffer = await imageResponse.buffer();
            fs.writeFileSync(filepath, imageBuffer);
            
            console.log('‚úÖ Fal.AI: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
            
            return {
                success: true,
                imageUrl: `/generated-images/${filename}`,
                provider: 'Fal.AI',
                prompt: prompt
            };
        }
    }
    
    throw new Error(`Fal.AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ CivitAI (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
 */
async function generateWithCivitAI(prompt, style, imageId) {
    console.log('üé® –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ CivitAI...');
    
    const enhancedPrompt = enhancePromptForPollinations(prompt, style);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API CivitAI
    const apiUrl = 'https://image.civitai.com/xG1nkqKTMzGDvpLrqFT7WA/generate';
    
    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'BOOOMERANGS-AI-Chat'
        },
        body: JSON.stringify({
            prompt: enhancedPrompt,
            width: 512,
            height: 512,
            steps: 20,
            cfg_scale: 7,
            seed: Math.floor(Math.random() * 1000000)
        }),
        timeout: 40000
    });
    
    if (response.ok) {
        const data = await response.json();
        
        if (data.url) {
            const filename = `civitai_${imageId}.jpg`;
            const filepath = path.join(IMAGES_DIR, filename);
            
            // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const imageResponse = await fetch(data.url);
            const imageBuffer = await imageResponse.buffer();
            fs.writeFileSync(filepath, imageBuffer);
            
            console.log('‚úÖ CivitAI: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
            
            return {
                success: true,
                imageUrl: `/generated-images/${filename}`,
                provider: 'CivitAI',
                prompt: prompt
            };
        }
    }
    
    throw new Error(`CivitAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
}



/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
 */
function generatePlaceholderImage(prompt, imageId) {
    console.log('üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    const filename = `placeholder_${imageId}.svg`;
    const filepath = path.join(IMAGES_DIR, filename);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
    const themeData = getThemeForPrompt(prompt);
    
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é SVG –∑–∞–≥–ª—É—à–∫—É –≤ —Å—Ç–∏–ª–µ BOOOMERANGS
    const svg = `
        <svg width="512" height="512" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#1a1a1a;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#2d2d2d;stop-opacity:1" />
                </linearGradient>
                <linearGradient id="accentGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:${themeData.color1};stop-opacity:1" />
                    <stop offset="100%" style="stop-color:${themeData.color2};stop-opacity:1" />
                </linearGradient>
                <radialGradient id="glowGradient" cx="50%" cy="50%" r="50%">
                    <stop offset="0%" style="stop-color:${themeData.color1};stop-opacity:0.3" />
                    <stop offset="100%" style="stop-color:${themeData.color1};stop-opacity:0" />
                </radialGradient>
            </defs>
            
            <rect width="512" height="512" fill="url(#bgGradient)" rx="20"/>
            
            <!-- –§–æ–Ω–æ–≤—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã -->
            <circle cx="100" cy="100" r="40" fill="url(#glowGradient)"/>
            <circle cx="412" cy="400" r="60" fill="url(#glowGradient)"/>
            <circle cx="400" cy="120" r="30" fill="url(#glowGradient)"/>
            <circle cx="120" cy="400" r="50" fill="url(#glowGradient)"/>
            
            <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å -->
            <circle cx="256" cy="200" r="50" fill="url(#accentGradient)" opacity="0.8"/>
            <circle cx="256" cy="200" r="35" fill="url(#bgGradient)"/>
            <text x="256" y="215" text-anchor="middle" fill="url(#accentGradient)" font-size="32" font-weight="bold">${themeData.icon}</text>
            
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <text x="256" y="290" text-anchor="middle" fill="#e5e7eb" font-size="22" font-weight="bold" font-family="Arial, sans-serif">
                ü™É BOOOMERANGS AI
            </text>
            
            <!-- –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <text x="256" y="320" text-anchor="middle" fill="url(#accentGradient)" font-size="16" font-family="Arial, sans-serif" font-weight="bold">
                ${themeData.title}
            </text>
            
            <!-- –ü—Ä–æ–º–ø—Ç -->
            <text x="256" y="360" text-anchor="middle" fill="#9ca3af" font-size="13" font-family="Arial, sans-serif">
                "${prompt.length > 40 ? prompt.substring(0, 40) + '...' : prompt}"
            </text>
            
            <!-- –°—Ç–∞—Ç—É—Å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π -->
            <text x="256" y="400" text-anchor="middle" fill="#6b7280" font-size="11" font-family="Arial, sans-serif">
                ‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç —É–ª—É—á—à–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
            </text>
            
            <!-- –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–∞–º–∫–∞ -->
            <rect x="15" y="15" width="482" height="482" fill="none" stroke="url(#accentGradient)" stroke-width="2" rx="18" opacity="0.4"/>
            
            <!-- –£–≥–ª–æ–≤—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã -->
            <path d="M40 40 L60 40 L60 60" stroke="url(#accentGradient)" stroke-width="3" fill="none" opacity="0.6"/>
            <path d="M452 40 L472 40 L472 60" stroke="url(#accentGradient)" stroke-width="3" fill="none" opacity="0.6"/>
            <path d="M40 452 L60 452 L60 472" stroke="url(#accentGradient)" stroke-width="3" fill="none" opacity="0.6"/>
            <path d="M452 452 L472 452 L472 472" stroke="url(#accentGradient)" stroke-width="3" fill="none" opacity="0.6"/>
        </svg>
    `;
    
    fs.writeFileSync(filepath, svg);
    
    return {
        success: true,
        imageUrl: `/generated-images/${filename}`,
        provider: 'BOOOMERANGS Preview Generator',
        prompt: prompt,
        isPlaceholder: true,
        theme: themeData.title
    };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
 */
function getThemeForPrompt(prompt) {
    const lowerPrompt = prompt.toLowerCase();
    
    // –°–∞–º—É—Ä–∞–π/–±–æ–µ–≤–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞
    if (lowerPrompt.includes('—Å–∞–º—É—Ä–∞–π') || lowerPrompt.includes('–≤–æ–∏–Ω') || lowerPrompt.includes('—Ç–µ—Ö–Ω–æ')) {
        return {
            icon: '‚öîÔ∏è',
            title: '–ö–∏–±–µ—Ä-–°–∞–º—É—Ä–∞–π',
            color1: '#dc2626',
            color2: '#f59e0b'
        };
    }
    
    // –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞
    if (lowerPrompt.includes('–∫–æ—Å–º–æ—Å') || lowerPrompt.includes('–∑–≤–µ–∑–¥') || lowerPrompt.includes('–ø–ª–∞–Ω–µ—Ç')) {
        return {
            icon: 'üöÄ',
            title: '–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
            color1: '#3b82f6',
            color2: '#8b5cf6'
        };
    }
    
    // –ü—Ä–∏—Ä–æ–¥–∞
    if (lowerPrompt.includes('–ª–µ—Å') || lowerPrompt.includes('–≥–æ—Ä') || lowerPrompt.includes('–º–æ—Ä–µ') || lowerPrompt.includes('–∑–∞–∫–∞—Ç')) {
        return {
            icon: 'üåÖ',
            title: '–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ –ü–µ–π–∑–∞–∂–∏',
            color1: '#10b981',
            color2: '#f59e0b'
        };
    }
    
    // –ñ–∏–≤–æ—Ç–Ω—ã–µ
    if (lowerPrompt.includes('–∫–æ—Ç') || lowerPrompt.includes('—Å–æ–±–∞–∫') || lowerPrompt.includes('–ø—Ç–∏—Ü')) {
        return {
            icon: 'üêæ',
            title: '–ú–∏—Ä –ñ–∏–≤–æ—Ç–Ω—ã—Ö',
            color1: '#f59e0b',
            color2: '#10b981'
        };
    }
    
    // –ì–æ—Ä–æ–¥/–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    if (lowerPrompt.includes('–≥–æ—Ä–æ–¥') || lowerPrompt.includes('–∑–¥–∞–Ω–∏') || lowerPrompt.includes('—Ñ—É—Ç—É—Ä–∏—Å—Ç')) {
        return {
            icon: 'üèôÔ∏è',
            title: '–ì–æ—Ä–æ–¥—Å–∫–∏–µ –ü–µ–π–∑–∞–∂–∏',
            color1: '#6366f1',
            color2: '#ec4899'
        };
    }
    
    // –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞
    if (lowerPrompt.includes('–¥—Ä–∞–∫–æ–Ω') || lowerPrompt.includes('–≤–æ–ª—à–µ–±–Ω') || lowerPrompt.includes('–º–∞–≥–∏—á')) {
        return {
            icon: 'üêâ',
            title: '–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ –ú–∏—Ä—ã',
            color1: '#8b5cf6',
            color2: '#ec4899'
        };
    }
    
    // –õ–æ–≥–æ—Ç–∏–ø—ã/–±–∏–∑–Ω–µ—Å
    if (lowerPrompt.includes('–ª–æ–≥–æ—Ç–∏–ø') || lowerPrompt.includes('–∫–æ–º–ø–∞–Ω–∏') || lowerPrompt.includes('–±—Ä–µ–Ω–¥')) {
        return {
            icon: 'üíº',
            title: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –î–∏–∑–∞–π–Ω',
            color1: '#dc2626',
            color2: '#1f2937'
        };
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞
    return {
        icon: 'üé®',
        title: '–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –í–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        color1: '#dc2626',
        color2: '#f87171'
    };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function generateUniqueId() {
    return Date.now().toString(36) + Math.random().toString(36).substring(2);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
 */
function detectImageStyle(prompt) {
    const lowerPrompt = prompt.toLowerCase();
    
    if (lowerPrompt.includes('—Ä–µ–∞–ª–∏—Å—Ç–∏—á') || lowerPrompt.includes('—Ñ–æ—Ç–æ')) {
        return 'realistic';
    }
    
    if (lowerPrompt.includes('–∞–Ω–∏–º–µ') || lowerPrompt.includes('–º—É–ª—å—Ç')) {
        return 'anime';
    }
    
    if (lowerPrompt.includes('–∞—Ä—Ç') || lowerPrompt.includes('—Ä–∏—Å—É–Ω–æ–∫')) {
        return 'artistic';
    }
    
    if (lowerPrompt.includes('–ª–æ–≥–æ—Ç–∏–ø') || lowerPrompt.includes('–∏–∫–æ–Ω–∫–∞')) {
        return 'logo';
    }
    
    return 'realistic';
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
function cleanupOldImages() {
    try {
        const files = fs.readdirSync(IMAGES_DIR);
        const now = Date.now();
        const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
        
        files.forEach(file => {
            const filepath = path.join(IMAGES_DIR, file);
            const stats = fs.statSync(filepath);
            
            if (now - stats.mtime.getTime() > maxAge) {
                fs.unlinkSync(filepath);
                console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', file);
            }
        });
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(cleanupOldImages, 6 * 60 * 60 * 1000);

module.exports = {
    generateImage,
    detectImageStyle,
    cleanupOldImages
};