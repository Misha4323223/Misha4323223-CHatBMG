/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è BOOOMERANGS AI Chat
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const IMAGES_DIR = path.join(process.cwd(), 'public', 'generated-images');
if (!fs.existsSync(IMAGES_DIR)) {
    fs.mkdirSync(IMAGES_DIR, { recursive: true });
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
 */
async function generateImage(prompt, style = 'realistic') {
    console.log('üé® –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', prompt);
    
    const imageId = generateUniqueId();
    
    try {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const providers = [
            () => generateWithPollinations(prompt, style, imageId),
            () => generateWithProdia(prompt, style, imageId),
            () => generateWithStableDiffusion(prompt, style, imageId)
        ];
        
        for (const provider of providers) {
            try {
                const result = await provider();
                if (result.success) {
                    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:', result.imageUrl);
                    return result;
                }
            } catch (error) {
                console.log('‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...');
                continue;
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return generatePlaceholderImage(prompt, imageId);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        return {
            success: false,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        };
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations AI (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API)
 */
async function generateWithPollinations(prompt, style, imageId) {
    console.log('üå∏ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Pollinations...');
    
    const encodedPrompt = encodeURIComponent(prompt);
    const apiUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}?width=512&height=512&seed=${Math.floor(Math.random() * 1000000)}`;
    
    const response = await fetch(apiUrl, {
        method: 'GET',
        timeout: 30000
    });
    
    if (response.ok) {
        const imageBuffer = await response.buffer();
        const filename = `pollinations_${imageId}.png`;
        const filepath = path.join(IMAGES_DIR, filename);
        
        fs.writeFileSync(filepath, imageBuffer);
        
        return {
            success: true,
            imageUrl: `/generated-images/${filename}`,
            provider: 'Pollinations AI',
            prompt: prompt
        };
    }
    
    throw new Error('Pollinations API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Prodia (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API)
 */
async function generateWithProdia(prompt, style, imageId) {
    console.log('üöÄ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Prodia...');
    
    // Prodia —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
    const formattedPrompt = `${prompt}, ${style} style, high quality, detailed`;
    
    const apiUrl = 'https://api.prodia.com/v1/sd/generate';
    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            prompt: formattedPrompt,
            model: 'sd_xl_base_1.0.safetensors',
            steps: 20,
            cfg_scale: 7,
            seed: Math.floor(Math.random() * 1000000),
            width: 512,
            height: 512
        }),
        timeout: 30000
    });
    
    if (response.ok) {
        const data = await response.json();
        
        if (data.job) {
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            const imageUrl = await waitForProdiaCompletion(data.job);
            
            if (imageUrl) {
                const filename = `prodia_${imageId}.png`;
                const filepath = path.join(IMAGES_DIR, filename);
                
                // –°–∫–∞—á–∏–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                const imageResponse = await fetch(imageUrl);
                const imageBuffer = await imageResponse.buffer();
                fs.writeFileSync(filepath, imageBuffer);
                
                return {
                    success: true,
                    imageUrl: `/generated-images/${filename}`,
                    provider: 'Prodia',
                    prompt: prompt
                };
            }
        }
    }
    
    throw new Error('Prodia API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
}

/**
 * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ Prodia
 */
async function waitForProdiaCompletion(jobId) {
    for (let i = 0; i < 30; i++) { // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        try {
            const response = await fetch(`https://api.prodia.com/v1/job/${jobId}`);
            const data = await response.json();
            
            if (data.status === 'succeeded' && data.imageUrl) {
                return data.imageUrl;
            }
            
            if (data.status === 'failed') {
                throw new Error('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
            }
        } catch (error) {
            console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...');
        }
    }
    
    return null;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Stable Diffusion (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
 */
async function generateWithStableDiffusion(prompt, style, imageId) {
    console.log('üé≠ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Stable Diffusion...');
    
    // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –±—É–¥—É—â–µ–≥–æ API
    throw new Error('Stable Diffusion API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
 */
function generatePlaceholderImage(prompt, imageId) {
    console.log('üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    const filename = `placeholder_${imageId}.svg`;
    const filepath = path.join(IMAGES_DIR, filename);
    
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é SVG –∑–∞–≥–ª—É—à–∫—É –≤ —Å—Ç–∏–ª–µ BOOOMERANGS
    const svg = `
        <svg width="512" height="512" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#1a1a1a;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#2d2d2d;stop-opacity:1" />
                </linearGradient>
                <linearGradient id="accentGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#dc2626;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#f87171;stop-opacity:1" />
                </linearGradient>
            </defs>
            
            <rect width="512" height="512" fill="url(#bgGradient)" rx="20"/>
            
            <!-- –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã -->
            <circle cx="128" cy="128" r="60" fill="url(#accentGradient)" opacity="0.1"/>
            <circle cx="384" cy="384" r="80" fill="url(#accentGradient)" opacity="0.1"/>
            
            <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞ -->
            <circle cx="256" cy="200" r="40" fill="url(#accentGradient)"/>
            <text x="256" y="210" text-anchor="middle" fill="white" font-size="24" font-weight="bold">üé®</text>
            
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <text x="256" y="280" text-anchor="middle" fill="#e5e7eb" font-size="24" font-weight="bold" font-family="Arial, sans-serif">
                BOOOMERANGS AI
            </text>
            
            <!-- –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <text x="256" y="310" text-anchor="middle" fill="#9ca3af" font-size="16" font-family="Arial, sans-serif">
                –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            </text>
            
            <!-- –ü—Ä–æ–º–ø—Ç (–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π) -->
            <text x="256" y="350" text-anchor="middle" fill="#6b7280" font-size="14" font-family="Arial, sans-serif">
                "${prompt.length > 30 ? prompt.substring(0, 30) + '...' : prompt}"
            </text>
            
            <!-- –°—Ç–∞—Ç—É—Å -->
            <text x="256" y="420" text-anchor="middle" fill="#dc2626" font-size="12" font-family="Arial, sans-serif">
                –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —É–ª—É—á—à–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
            </text>
            
            <!-- –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–∞–º–∫–∞ -->
            <rect x="20" y="20" width="472" height="472" fill="none" stroke="url(#accentGradient)" stroke-width="2" rx="15" opacity="0.3"/>
        </svg>
    `;
    
    fs.writeFileSync(filepath, svg);
    
    return {
        success: true,
        imageUrl: `/generated-images/${filename}`,
        provider: 'BOOOMERANGS Placeholder',
        prompt: prompt,
        isPlaceholder: true
    };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function generateUniqueId() {
    return Date.now().toString(36) + Math.random().toString(36).substring(2);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
 */
function detectImageStyle(prompt) {
    const lowerPrompt = prompt.toLowerCase();
    
    if (lowerPrompt.includes('—Ä–µ–∞–ª–∏—Å—Ç–∏—á') || lowerPrompt.includes('—Ñ–æ—Ç–æ')) {
        return 'realistic';
    }
    
    if (lowerPrompt.includes('–∞–Ω–∏–º–µ') || lowerPrompt.includes('–º—É–ª—å—Ç')) {
        return 'anime';
    }
    
    if (lowerPrompt.includes('–∞—Ä—Ç') || lowerPrompt.includes('—Ä–∏—Å—É–Ω–æ–∫')) {
        return 'artistic';
    }
    
    if (lowerPrompt.includes('–ª–æ–≥–æ—Ç–∏–ø') || lowerPrompt.includes('–∏–∫–æ–Ω–∫–∞')) {
        return 'logo';
    }
    
    return 'realistic';
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
function cleanupOldImages() {
    try {
        const files = fs.readdirSync(IMAGES_DIR);
        const now = Date.now();
        const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
        
        files.forEach(file => {
            const filepath = path.join(IMAGES_DIR, file);
            const stats = fs.statSync(filepath);
            
            if (now - stats.mtime.getTime() > maxAge) {
                fs.unlinkSync(filepath);
                console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', file);
            }
        });
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(cleanupOldImages, 6 * 60 * 60 * 1000);

module.exports = {
    generateImage,
    detectImageStyle,
    cleanupOldImages
};