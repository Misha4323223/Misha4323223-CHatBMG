/**
 * –ü—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º ChatGPT —á–µ—Ä–µ–∑ EdgeGPT
 */

const { spawn } = require('child_process');

/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É ChatGPT —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º EdgeGPT
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ChatGPT
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ChatGPT
 */
async function getChatGPTResponse(message) {
  return new Promise((resolve) => {
    console.log('üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É ChatGPT...');
    
    const pythonScript = `
import asyncio
import os
import sys
import json

async def chat_with_edgegpt():
    try:
        from EdgeGPT import Chatbot
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É ChatGPT
        bot = Chatbot()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await bot.ask(prompt="${message.replace(/"/g, '\\"')}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
        if response and 'item' in response:
            messages = response['item']['messages']
            if messages:
                for msg in reversed(messages):
                    if msg.get('author') == 'bot':
                        if 'adaptiveCards' in msg:
                            text = msg['adaptiveCards'][0]['body'][0]['text']
                            result = {
                                "success": True,
                                "response": text,
                                "provider": "EdgeGPT (–í–∞—à –∞–∫–∫–∞—É–Ω—Ç ChatGPT)",
                                "model": "gpt-4"
                            }
                            print(json.dumps(result))
                            await bot.close()
                            return
        
        await bot.close()
        print(json.dumps({"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT"}))
        
    except ImportError:
        print(json.dumps({"success": False, "error": "EdgeGPT –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}))
    except Exception as e:
        print(json.dumps({"success": False, "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChatGPT: {str(e)}"}))

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
asyncio.run(chat_with_edgegpt())
`;

    const python = spawn('python3', ['-c', pythonScript], {
      env: {
        ...process.env,
        CHATGPT_EMAIL: process.env.CHATGPT_EMAIL,
        CHATGPT_PASSWORD: process.env.CHATGPT_PASSWORD
      }
    });

    let output = '';
    let error = '';

    python.stdout.on('data', (data) => {
      output += data.toString();
    });

    python.stderr.on('data', (data) => {
      error += data.toString();
    });

    python.on('close', (code) => {
      try {
        if (output.trim()) {
          const lines = output.trim().split('\n');
          const lastLine = lines[lines.length - 1];
          const result = JSON.parse(lastLine);
          
          if (result.success) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ChatGPT');
          } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChatGPT:', result.error);
          }
          
          resolve(result);
        } else {
          resolve({
            success: false,
            error: error || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç EdgeGPT'
          });
        }
      } catch (e) {
        resolve({
          success: false,
          error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç EdgeGPT'
        });
      }
    });

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    setTimeout(() => {
      python.kill();
      resolve({
        success: false,
        error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT'
      });
    }, 45000);
  });
}

module.exports = {
  getChatGPTResponse
};