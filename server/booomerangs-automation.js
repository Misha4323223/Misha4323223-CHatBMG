/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è BOOOMERANGS
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–ø—Ç–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */

const fs = require('fs').promises;
const path = require('path');

/**
 * –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—Ç–æ–≤ –∏ –≤—ã—à–∏–≤–∫–∏
 */
class PriceCalculator {
  constructor() {
    this.baseRates = {
      // –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
      dtf_print: {
        small: 50,    // –¥–æ 10x10 —Å–º
        medium: 120,  // –¥–æ 20x20 —Å–º 
        large: 200,   // –¥–æ 30x30 —Å–º
        xlarge: 350   // —Å–≤—ã—à–µ 30x30 —Å–º
      },
      screen_print: {
        setup: 500,   // –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—á–∞—Ç–∏
        per_color: 25, // –∑–∞ —Ü–≤–µ—Ç
        min_qty: 50   // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–∏—Ä–∞–∂
      },
      embroidery: {
        setup: 300,   // –æ—Ü–∏—Ñ—Ä–æ–≤–∫–∞
        per_1000_stitches: 15, // –∑–∞ 1000 —Å—Ç–µ–∂–∫–æ–≤
        min_price: 80 // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
      },
      garment_markup: 1.3 // –Ω–∞—Ü–µ–Ω–∫–∞ –Ω–∞ –∏–∑–¥–µ–ª–∏–µ
    };
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ DTF –ø–µ—á–∞—Ç–∏
   */
  calculateDTF(width, height, quantity, colors = 'full') {
    const area = width * height;
    let pricePerUnit;

    if (area <= 100) pricePerUnit = this.baseRates.dtf_print.small;
    else if (area <= 400) pricePerUnit = this.baseRates.dtf_print.medium;
    else if (area <= 900) pricePerUnit = this.baseRates.dtf_print.large;
    else pricePerUnit = this.baseRates.dtf_print.xlarge;

    // –°–∫–∏–¥–∫–∏ –∑–∞ —Ç–∏—Ä–∞–∂
    let discount = 1;
    if (quantity >= 100) discount = 0.85;
    else if (quantity >= 50) discount = 0.9;
    else if (quantity >= 20) discount = 0.95;

    const totalCost = pricePerUnit * quantity * discount;

    return {
      method: 'DTF –ø–µ—á–∞—Ç—å',
      size: `${width}x${height} —Å–º`,
      pricePerUnit: Math.round(pricePerUnit * discount),
      quantity,
      totalCost: Math.round(totalCost),
      discount: Math.round((1 - discount) * 100)
    };
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—Ä–∞—Ñ–∞—Ä–µ—Ç–Ω–æ–π –ø–µ—á–∞—Ç–∏
   */
  calculateScreenPrint(colors, quantity) {
    if (quantity < this.baseRates.screen_print.min_qty) {
      return {
        error: `–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–∏—Ä–∞–∂ –¥–ª—è —Ç—Ä–∞—Ñ–∞—Ä–µ—Ç–Ω–æ–π –ø–µ—á–∞—Ç–∏: ${this.baseRates.screen_print.min_qty} —à—Ç.`
      };
    }

    const setupCost = this.baseRates.screen_print.setup;
    const printCost = colors * this.baseRates.screen_print.per_color * quantity;
    const totalCost = setupCost + printCost;

    return {
      method: '–¢—Ä–∞—Ñ–∞—Ä–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å',
      colors,
      setupCost,
      printCost,
      pricePerUnit: Math.round(totalCost / quantity),
      quantity,
      totalCost
    };
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã—à–∏–≤–∫–∏
   */
  calculateEmbroidery(stitches, quantity, needsDigitizing = true) {
    const digitizingCost = needsDigitizing ? this.baseRates.embroidery.setup : 0;
    const stitchCost = Math.ceil(stitches / 1000) * this.baseRates.embroidery.per_1000_stitches;
    
    let pricePerUnit = Math.max(stitchCost, this.baseRates.embroidery.min_price);
    
    // –°–∫–∏–¥–∫–∏ –∑–∞ —Ç–∏—Ä–∞–∂
    if (quantity >= 100) pricePerUnit *= 0.8;
    else if (quantity >= 50) pricePerUnit *= 0.85;
    else if (quantity >= 20) pricePerUnit *= 0.9;

    const totalCost = digitizingCost + (pricePerUnit * quantity);

    return {
      method: '–ú–∞—à–∏–Ω–Ω–∞—è –≤—ã—à–∏–≤–∫–∞',
      stitches,
      digitizingCost,
      pricePerUnit: Math.round(pricePerUnit),
      quantity,
      totalCost: Math.round(totalCost)
    };
  }

  /**
   * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
   */
  getRecommendation(width, height, colors, quantity, hasDetails = false) {
    const results = [];

    // DTF –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    results.push(this.calculateDTF(width, height, quantity, colors));

    // –¢—Ä–∞—Ñ–∞—Ä–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∏—Ä–∞–∂–µ–π
    if (quantity >= this.baseRates.screen_print.min_qty && colors <= 6) {
      results.push(this.calculateScreenPrint(colors, quantity));
    }

    // –í—ã—à–∏–≤–∫–∞ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –¥–∏–∑–∞–π–Ω–æ–≤
    if (!hasDetails && colors <= 8) {
      const estimatedStitches = (width * height) * 100; // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      results.push(this.calculateEmbroidery(estimatedStitches, quantity));
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
    results.sort((a, b) => (a.pricePerUnit || a.totalCost) - (b.pricePerUnit || b.totalCost));

    return {
      recommendation: results[0],
      alternatives: results.slice(1),
      summary: `–î–ª—è —Ç–∏—Ä–∞–∂–∞ ${quantity} —à—Ç. —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º: ${results[0].method}`
    };
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
 */
class ProposalGenerator {
  constructor() {
    this.calculator = new PriceCalculator();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  async generateProposal(clientData, orderDetails) {
    const {
      clientName,
      clientCompany,
      email,
      phone
    } = clientData;

    const {
      productType,
      designs,
      quantity,
      deadline,
      additionalServices = []
    } = orderDetails;

    let totalCost = 0;
    const calculations = [];

    // –†–∞—Å—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –¥–∏–∑–∞–π–Ω—É
    for (const design of designs) {
      const calc = this.calculator.getRecommendation(
        design.width,
        design.height,
        design.colors,
        quantity,
        design.hasDetails
      );
      
      calculations.push({
        name: design.name,
        ...calc
      });
      
      totalCost += calc.recommendation.totalCost;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–¥–µ–ª–∏–π
    const garmentCost = this.estimateGarmentCost(productType, quantity);
    totalCost += garmentCost;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
    let additionalCost = 0;
    if (additionalServices.includes('express')) additionalCost += totalCost * 0.3;
    if (additionalServices.includes('packaging')) additionalCost += quantity * 25;
    if (additionalServices.includes('delivery')) additionalCost += 1500;

    const proposal = {
      proposalNumber: `BOOM-${Date.now()}`,
      date: new Date().toLocaleDateString('ru-RU'),
      client: {
        name: clientName,
        company: clientCompany,
        contacts: { email, phone }
      },
      order: {
        productType,
        quantity,
        deadline,
        designs: calculations
      },
      costs: {
        production: totalCost,
        garments: garmentCost,
        additional: additionalCost,
        total: totalCost + garmentCost + additionalCost
      },
      validUntil: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toLocaleDateString('ru-RU')
    };

    return this.formatProposal(proposal);
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑–¥–µ–ª–∏–π
   */
  estimateGarmentCost(productType, quantity) {
    const basePrices = {
      't-shirt': 350,
      'hoodie': 890,
      'polo': 450,
      'cap': 280,
      'bag': 320
    };

    const basePrice = basePrices[productType] || 400;
    
    // –û–ø—Ç–æ–≤—ã–µ —Å–∫–∏–¥–∫–∏
    let discount = 1;
    if (quantity >= 100) discount = 0.7;
    else if (quantity >= 50) discount = 0.75;
    else if (quantity >= 20) discount = 0.8;
    else if (quantity >= 10) discount = 0.85;

    return Math.round(basePrice * quantity * discount);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ö–ü –≤ —Ç–µ–∫—Å—Ç
   */
  formatProposal(proposal) {
    return `
üìã **–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï ‚Ññ${proposal.proposalNumber}**
üìÖ –î–∞—Ç–∞: ${proposal.date}

üë§ **–ö–õ–ò–ï–ù–¢:**
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: ${proposal.client.name}
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: ${proposal.client.company}
‚Ä¢ Email: ${proposal.client.contacts.email}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${proposal.client.contacts.phone}

üéØ **–ó–ê–ö–ê–ó:**
‚Ä¢ –ò–∑–¥–µ–ª–∏–µ: ${proposal.order.productType}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${proposal.order.quantity} —à—Ç.
‚Ä¢ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${proposal.order.deadline}

üé® **–î–ò–ó–ê–ô–ù–´ –ò –†–ê–°–ß–ï–¢–´:**
${proposal.order.designs.map((design, i) => `
${i + 1}. **${design.name}**
   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: ${design.recommendation.method}
   –°—Ç–æ–∏–º–æ—Å—Ç—å: ${design.recommendation.totalCost} —Ä—É–±.
   ${design.alternatives.length > 0 ? `–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: ${design.alternatives.map(alt => `${alt.method} (${alt.totalCost} —Ä—É–±.)`).join(', ')}` : ''}
`).join('')}

üí∞ **–°–¢–û–ò–ú–û–°–¢–¨:**
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: ${proposal.costs.production.toLocaleString()} —Ä—É–±.
‚Ä¢ –ò–∑–¥–µ–ª–∏—è: ${proposal.costs.garments.toLocaleString()} —Ä—É–±.
‚Ä¢ –î–æ–ø. —É—Å–ª—É–≥–∏: ${proposal.costs.additional.toLocaleString()} —Ä—É–±.
‚Ä¢ **–ò–¢–û–ì–û: ${proposal.costs.total.toLocaleString()} —Ä—É–±.**

‚è∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ: ${proposal.validUntil}

---
–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ BOOOMERANGS
`;
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤
 */
class TrendAnalyzer {
  /**
   * –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º –∏ —Å—Ç–∏–ª–µ–π
   */
  async analyzeTrends(query) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
      const { performAdvancedSearch } = require('./advanced-search-provider');
      
      const searchQueries = [
        `${query} —Ç—Ä–µ–Ω–¥—ã 2024 –¥–∏–∑–∞–π–Ω –æ–¥–µ–∂–¥—ã`,
        `${query} –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ç—ã –º–æ–¥–∞`,
        `${query} —Å—Ç–∏–ª—å–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã —Ñ—É—Ç–±–æ–ª–∫–∏`
      ];

      const results = [];
      
      for (const searchQuery of searchQueries) {
        const searchResult = await performAdvancedSearch(searchQuery, {
          searchType: 'comprehensive',
          language: 'ru',
          maxResults: 5,
          includeAnalysis: false
        });
        
        if (searchResult.success && searchResult.results) {
          results.push(...searchResult.results.slice(0, 3));
        }
      }

      return this.processTrendData(results, query);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤:', error);
      return {
        error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤',
        recommendation: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤—Ä—É—á–Ω—É—é –Ω–∞ Pinterest, Behance'
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–∞—Ö
   */
  processTrendData(searchResults, originalQuery) {
    const trendKeywords = this.extractTrendKeywords(searchResults);
    const recommendations = this.generateTrendRecommendations(trendKeywords, originalQuery);

    return {
      query: originalQuery,
      trends: trendKeywords,
      recommendations,
      sources: searchResults.length,
      lastUpdated: new Date().toLocaleDateString('ru-RU')
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Ç—Ä–µ–Ω–¥–æ–≤
   */
  extractTrendKeywords(results) {
    const allText = results.map(r => `${r.title} ${r.snippet}`).join(' ').toLowerCase();
    
    const trendWords = [
      '–º–∏–Ω–∏–º–∞–ª–∏–∑–º', '–≤–∏–Ω—Ç–∞–∂', '—Ä–µ—Ç—Ä–æ', '–Ω–µ–æ–Ω', '–≥—Ä–∞–¥–∏–µ–Ω—Ç', '—Ç–∞–π-–¥–∞–π',
      '–≥–µ–æ–º–µ—Ç—Ä–∏—è', '–∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è', '–ø—Ä–∏—Ä–æ–¥–∞', '–∫–æ—Å–º–æ—Å', '–∞–Ω–∏–º–µ', '–º–µ–º',
      '—Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞', '–ª–æ–≥–æ—Ç–∏–ø', '—Å–ª–æ–≥–∞–Ω', '—Ü–∏—Ç–∞—Ç–∞', '–º–æ—Ç–∏–≤–∞—Ü–∏—è'
    ];

    return trendWords.filter(word => allText.includes(word));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ç—Ä–µ–Ω–¥–∞–º
   */
  generateTrendRecommendations(trends, query) {
    const recommendations = [];

    if (trends.includes('–º–∏–Ω–∏–º–∞–ª–∏–∑–º')) {
      recommendations.push('–ü—Ä–æ—Å—Ç—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã, 1-2 —Ü–≤–µ—Ç–∞, —á–∏—Å—Ç—ã–π –¥–∏–∑–∞–π–Ω');
    }
    
    if (trends.includes('–≤–∏–Ω—Ç–∞–∂') || trends.includes('—Ä–µ—Ç—Ä–æ')) {
      recommendations.push('–ü—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞, —Å–æ—Å—Ç–∞—Ä–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —à—Ä–∏—Ñ—Ç—ã');
    }

    if (trends.includes('–Ω–µ–æ–Ω') || trends.includes('–≥—Ä–∞–¥–∏–µ–Ω—Ç')) {
      recommendations.push('–Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –Ω–µ–æ–Ω–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã, –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã');
    }

    if (recommendations.length === 0) {
      recommendations.push('–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã: —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å, –ª–æ–∫–∞–ª—å–Ω–æ—Å—Ç—å, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è');
    }

    return recommendations;
  }
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
 */
class BOOOMERANGSAutomation {
  constructor() {
    this.priceCalculator = new PriceCalculator();
    this.proposalGenerator = new ProposalGenerator();
    this.trendAnalyzer = new TrendAnalyzer();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  async processAutomationRequest(request) {
    const { type, data } = request;

    switch (type) {
      case 'price_calculation':
        return this.priceCalculator.getRecommendation(
          data.width, data.height, data.colors, data.quantity, data.hasDetails
        );

      case 'generate_proposal':
        return await this.proposalGenerator.generateProposal(data.client, data.order);

      case 'trend_analysis':
        return await this.trendAnalyzer.analyzeTrends(data.query);

      default:
        return { error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏' };
    }
  }
}

module.exports = {
  BOOOMERANGSAutomation,
  PriceCalculator,
  ProposalGenerator,
  TrendAnalyzer
};