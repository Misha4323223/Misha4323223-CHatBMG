"""
BOOOMERANGS G4F Python Provider
–í–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
–º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
"""
from flask import Flask, request, jsonify, Response
from flask_cors import CORS
import g4f
import time
import random
import json
import re
import traceback

app = Flask(__name__)
CORS(app)

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
models_per_provider = {
    # Qwen –º–æ–¥–µ–ª–∏ - –Ω–∞–∏–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    "Qwen_Qwen_2_5_Max": "qwen-max",      # Qwen 2.5 –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –Ω–∞–∏–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    "Qwen_Qwen_2_5": "qwen-plus",         # Qwen 2.5 –û–±—ã—á–Ω–∞—è –≤–µ—Ä—Å–∏—è - –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –º–µ–Ω–µ–µ —Ç–æ—á–Ω–∞—è
    "Qwen_Qwen_3": "qwen-turbo",          # Qwen 3 - –Ω–æ–≤–µ–π—à–∞—è –≤–µ—Ä—Å–∏—è, –±—ã—Å—Ç—Ä–µ–µ
    "Qwen_Qwen_4": "qwen-chatmax",        # Qwen 4 Beta - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    "AItianhu": "qwen-max",               # –ü—Ä–æ–≤–∞–π–¥–µ—Ä AItianhu –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Qwen-Max
    "AItianhu_Turbo": "qwen-turbo",       # AItianhu —Å –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ–ª—å—é
    
    # –î—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏ –º–æ–¥–µ–ª–∏
    "You": "you-chat",
    "Phind": "phind-70b",
    "DeepInfra": "deepinfra-mistral",
    "DeepInfra_Qwen": "qwen-72b",         # DeepInfra —Å Qwen-72B –º–æ–¥–µ–ª—å—é
    "GeminiPro": "gemini-pro",
    "Liaobots": "llama-3-70b",
    "Gemini": "gemini-pro",
    "DEEPSEEK": "deepseek-chat"           # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å DeepSeek –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
}

# –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
provider_groups = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    "primary": ["AItianhu", "Qwen_Qwen_2_5_Max", "Qwen_Qwen_3", "Phind", "You"],
    "secondary": ["AItianhu_Turbo", "Qwen_Qwen_2_5", "DeepInfra", "GeminiPro", "Gemini"],
    "fallback": ["You", "DeepInfra", "Liaobots"],
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    "technical": ["Phind", "DEEPSEEK", "DeepInfra_Qwen", "You"],  # –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    "deepspeek": ["AItianhu", "Qwen_Qwen_2_5_Max", "DEEPSEEK", "Phind"]  # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è DeepSpeek
}

def get_demo_response(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É"""
    message_lower = message.lower()
    
    if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi']):
        return "–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?"
    elif any(word in message_lower for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', 'how are you']):
        return "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª–∏! –ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?"
    elif any(word in message_lower for word in ['–∏–∑–æ–±—Ä–∞–∂–µ–Ω', '–∫–∞—Ä—Ç–∏–Ω', 'image', 'picture']):
        return "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å, –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å!"
    elif 'booomerangs' in message_lower:
        return "BOOOMERANGS - —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π AI-—Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ú—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–ª–∞—Ç–Ω—ã—Ö API –∫–ª—é—á–µ–π!"
    else:
        random_responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! BOOOMERANGS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–∞–∂–µ –±–µ–∑ –ø–ª–∞—Ç–Ω—ã—Ö API –∫–ª—é—á–µ–π. –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏.",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! BOOOMERANGS –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –æ–±—â–∞—Ç—å—Å—è —Å AI, –Ω–æ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é, –∞ —Ç–∞–∫–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SVG.",
            "BOOOMERANGS —Å—Ç—Ä–µ–º–∏—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –≤—Å–µ—Ö. –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö."
        ]
        return random.choice(random_responses)

def try_provider(provider_name, message, timeout=15, use_stream=False):
    """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    start_time = time.time()
    success = False
    response = None
    error_message = None
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ –∏–º–µ–Ω–∏
    if hasattr(g4f.Provider, provider_name):
        provider = getattr(g4f.Provider, provider_name)
        model = models_per_provider.get(provider_name, "gpt-3.5-turbo")
        
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}...")
        print(f"  üìù –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model}, —Å—Ç—Ä–∏–º–∏–Ω–≥: {use_stream}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            messages = [
                {"role": "system", "content": "–í—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç BOOOMERANGS. –û—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ-—Ä—É—Å—Å–∫–∏, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –î–∞–≤–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."},
                {"role": "user", "content": message}
            ]
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
            response = g4f.ChatCompletion.create(
                model=model,
                messages=messages,
                provider=provider,
                stream=use_stream,
                timeout=timeout
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä)
            if use_stream:
                # –î–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä
                return {
                    "streaming": True,
                    "response_stream": response,
                    "provider": provider_name,
                    "model": model
                }
            else:
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–µ–π (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
                if isinstance(response, str) and "<html" in response.lower():
                    raise Exception(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—à–∏–±–∫–∏
                if isinstance(response, str) and any(err in response.lower() for err in ["error", "exception", "blocked", "403", "forbidden"]):
                    if len(response) < 100:  # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
                        raise Exception(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response}")
                
                print(f"‚úÖ {provider_name} (–º–æ–¥–µ–ª—å {model}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫")
                
                return {
                    "streaming": False,
                    "response": response,
                    "provider": provider_name,
                    "model": model,
                    "elapsed": time.time() - start_time
                }
                
        except Exception as e:
            error_message = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}: {error_message}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏ —ç—Ç–æ
            if "html" in error_message.lower() or "403" in error_message or "forbidden" in error_message:
                error_message = f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                
            return {
                "streaming": False,
                "error": error_message,
                "provider": provider_name,
                "model": model
            }
    else:
        error_message = f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print(f"‚ùå {error_message}")
        
        return {
            "streaming": False,
            "error": error_message,
            "provider": "unknown"
        }

def get_chat_response(message, specific_provider=None, use_stream=False):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (fallback) –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
    if not message:
        return {
            "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "response": "–Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–Ω–µ—à–Ω–∏–µ AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ BOOOMERANGS –∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!",
            "provider": "BOOOMERANGS-Demo",
            "model": "error-mode"
        }
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –ø—Ä–æ–±—É–µ–º –µ–≥–æ
    if specific_provider:
        result = try_provider(specific_provider, message, timeout=25, use_stream=use_stream)
        if "error" not in result or use_stream:
            return result
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –≥—Ä—É–ø–ø–∞–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    def try_provider_group(group_name):
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        providers = provider_groups.get(group_name, []).copy()
        random.shuffle(providers)
        
        print(f"üîÑ –ü–µ—Ä–µ–±–æ—Ä –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {group_name}")
        
        for provider_name in providers:
            result = try_provider(provider_name, message, timeout=25, use_stream=use_stream)
            if "error" not in result:
                print(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_name} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç")
                return result
            elif use_stream and "response_stream" in result:
                return result
        
        return None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º
    is_tech_question = any(keyword in message.lower() for keyword in [
        "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "javascript", "python", "java", "c++", "c#", 
        "coding", "programming", "code", "–∞–ª–≥–æ—Ä–∏—Ç–º", "algorithm", "—Ñ—É–Ω–∫—Ü–∏—è", "function",
        "api", "—Å–µ—Ä–≤–µ—Ä", "server", "backend", "frontend", "—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥", "–±—ç–∫–µ–Ω–¥",
        "database", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "sql", "nosql", "mongodb", "json", "html", "css",
        "git", "github", "docker", "kubernetes", "devops"
    ])
    
    # –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≥—Ä—É–ø–ø—É technical
    if is_tech_question and not specific_provider:
        print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ–±—É–µ–º Phind...")
        result = try_provider_group("technical")
        if result:
            return result
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    for group in ["primary", "secondary", "fallback"]:
        result = try_provider_group(group)
        if result:
            return result
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
    print("‚ùå –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç")
    return {
        "error": "–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
        "response": get_demo_response(message),
        "provider": "BOOOMERANGS-Demo",
        "model": "fallback-mode"
    }

@app.route('/python/chat', methods=['POST'])
def chat():
    try:
        data = request.json
        message = data.get('message', '')
        provider = data.get('provider')
        timeout = data.get('timeout', 20000) / 1000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ DeepSpeek
        if provider == 'deepspeek':
            print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è DeepSpeek: {message[:50]}...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø—É deepspeek —Å Phind –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–∑ –≥—Ä—É–ø–ø—ã deepspeek
                for provider_name in provider_groups.get('deepspeek', ['Phind']):
                    try:
                        result = try_provider(provider_name, message, timeout)
                        if result.get('success'):
                            # –ü–æ–¥–º–µ–Ω—è–µ–º –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ DeepSpeek
                            result['provider'] = 'DeepSpeek'
                            result['model'] = 'DeepSpeek AI'
                            return jsonify(result)
                    except Exception as provider_error:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ DeepSpeek ({provider_name}): {str(provider_error)}")
                        continue
                
                # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–∑ deepspeek –≥—Ä—É–ø–ø—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º Phind –Ω–∞–ø—Ä—è–º—É—é
                result = try_provider('Phind', message, timeout)
                if result.get('success'):
                    result['provider'] = 'DeepSpeek'
                    result['model'] = 'DeepSpeek AI (Phind)'
                    return jsonify(result)
            except Exception as e:
                print(f"–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã DeepSpeek –≤–µ—Ä–Ω—É–ª–∏ –æ—à–∏–±–∫—É: {str(e)}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç —Å –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–º DeepSpeek
                return jsonify({
                    "success": True,
                    "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DeepSpeek. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.",
                    "provider": "DeepSpeek",
                    "model": "DeepSpeek AI (Offline)",
                    "elapsed": 0.5
                })
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        result = get_chat_response(message, specific_provider=provider)
        return jsonify(result)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        traceback.print_exc()
        return jsonify({
            "error": str(e),
            "response": get_demo_response(message if 'message' in locals() else ""),
            "provider": "BOOOMERANGS-Error",
            "model": "error-mode"
        })

@app.route('/python/test', methods=['POST'])
def test():
    try:
        data = request.json
        message = data.get('message', 'test')
        
        # –î–ª—è —Ç–µ—Å—Ç–∞ –±–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        result = get_chat_response(message, specific_provider="Qwen_Max")
        return jsonify(result)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        return jsonify({
            "error": str(e),
            "response": "–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: " + str(e),
            "provider": "BOOOMERANGS-Test",
            "model": "test-mode"
        })

@app.route('/python/chat/stream', methods=['POST'])
def chat_stream():
    """API –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    if request.method != 'POST':
        return Response('–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', status=405)
    
    try:
        data = request.json
        message = data.get('message', '')
        provider = data.get('provider')
        timeout = data.get('timeout', 20000) / 1000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã
        
        if not message:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"}), 400
        
        # –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        def generate():
            start_time = time.time()
            
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                result = get_chat_response(message, specific_provider=provider, use_stream=True)
                
                # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
                yield f"data: {json.dumps({'status': 'start', 'provider': result.get('provider')})}\n\n"
                
                if result.get('streaming') and 'response_stream' in result:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    full_response = ''
                    
                    for chunk in result['response_stream']:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ HTML –ª–∏ —ç—Ç–æ
                        if "<html" in chunk.lower():
                            yield f"data: {json.dumps({'error': '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'})}\n\n"
                            break
                            
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫
                        yield f"data: {json.dumps({'chunk': chunk, 'provider': result.get('provider')})}\n\n"
                        full_response += chunk
                    
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
                    elapsed = time.time() - start_time
                    completion_data = {
                        'status': 'done', 
                        'full_text': full_response,
                        'provider': result.get('provider'),
                        'model': result.get('model'),
                        'elapsed': elapsed
                    }
                    yield f"data: {json.dumps(completion_data)}\n\n"
                else:
                    # –ï—Å–ª–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                    if "error" in result:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
                        demo_response = get_demo_response(message)
                        error_data = {
                            'error': result.get('error'),
                            'text': demo_response,
                            'provider': 'BOOOMERANGS-Demo'
                        }
                        yield f"data: {json.dumps(error_data)}\n\n"
                        
                        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        completion_data = {
                            'status': 'done',
                            'full_text': demo_response,
                            'provider': 'BOOOMERANGS-Demo',
                            'model': 'fallback-mode',
                            'elapsed': time.time() - start_time
                        }
                        yield f"data: {json.dumps(completion_data)}\n\n"
                    else:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
                        text_data = {
                            'text': result.get('response'),
                            'provider': result.get('provider')
                        }
                        yield f"data: {json.dumps(text_data)}\n\n"
                        
                        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        completion_data = {
                            'status': 'done',
                            'full_text': result.get('response'),
                            'provider': result.get('provider'),
                            'model': result.get('model'),
                            'elapsed': result.get('elapsed', time.time() - start_time)
                        }
                        yield f"data: {json.dumps(completion_data)}\n\n"
            
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {str(e)}")
                traceback.print_exc()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                error_data = {'error': str(e)}
                yield f"data: {json.dumps(error_data)}\n\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
                demo_response = get_demo_response(message)
                text_data = {'text': demo_response, 'provider': 'BOOOMERANGS-Error'}
                yield f"data: {json.dumps(text_data)}\n\n"
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                completion_data = {
                    'status': 'done',
                    'full_text': demo_response,
                    'provider': 'BOOOMERANGS-Error',
                    'model': 'error-mode',
                    'elapsed': time.time() - start_time
                }
                yield f"data: {json.dumps(completion_data)}\n\n"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        return Response(
            generate(),
            mimetype='text/event-stream',
            headers={
                'Cache-Control': 'no-cache',
                'Connection': 'keep-alive',
                'X-Accel-Buffering': 'no'
            }
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {str(e)}")
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

@app.route('/')
def index():
    return "BOOOMERANGS Python G4F API —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == '__main__':
    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    available_providers = [name for name in dir(g4f.Provider) if not name.startswith('_') and name[0].isupper()]
    print(f"ü§ñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(available_providers)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {', '.join(available_providers)}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 5004, —Ç–∞–∫ –∫–∞–∫ 5002 –∏ 5003 –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç—ã
    app.run(host='0.0.0.0', port=5004, debug=False)