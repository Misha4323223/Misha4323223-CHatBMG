import time
import json
import traceback
import logging

from flask import Flask, request, jsonify, Response
import g4f  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ g4f –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
)

def get_chat_response(message, specific_provider=None, use_stream=False, timeout=20):
    """
    –ó–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ.
    """
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Å g4f.Provider
    # –ù–∏–∂–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π —à–∞–±–ª–æ–Ω –≤–æ–∑–≤—Ä–∞—Ç–∞
    if specific_provider is None:
        specific_provider = "Qwen_Max"
    if use_stream:
        return {
            "streaming": True,
            "provider": specific_provider,
            "model": "demo-model",
            "response_stream": [f"Chunk {i}" for i in range(5)]
        }
    else:
        return {
            "success": True,
            "response": f"–û—Ç–≤–µ—Ç –æ—Ç {specific_provider}: {message}",
            "provider": specific_provider,
            "model": "demo-model",
            "elapsed": 1.23
        }

def get_demo_response(message):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è fallback-–æ—Ç–≤–µ—Ç–∞.
    """
    return "–≠—Ç–æ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª."

def stream_response_generator(message, provider, timeout):
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ /python/chat/stream
    """
    start_time = time.time()
    try:
        result = get_chat_response(message, specific_provider=provider, use_stream=True, timeout=timeout)
        yield f"data: {json.dumps({'status': 'start', 'provider': result.get('provider')})}\n\n"

        if result.get('streaming') and 'response_stream' in result:
            full_response = ''
            for chunk in result['response_stream']:
                if "<html" in chunk.lower():
                    error_msg = '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                    logging.error(error_msg)
                    yield f"data: {json.dumps({'error': error_msg})}\n\n"
                    break
                yield f"data: {json.dumps({'chunk': chunk, 'provider': result.get('provider')})}\n\n"
                full_response += chunk

            elapsed = time.time() - start_time
            yield f"data: {json.dumps({'status': 'done', 'full_text': full_response, 'provider': result.get('provider'), 'model': result.get('model'), 'elapsed': elapsed})}\n\n"
        else:
            # –°—Ç—Ä–∏–º–∏–Ω–≥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –æ—à–∏–±–∫–∞
            if "error" in result:
                demo_response = get_demo_response(message)
                error_data = {
                    'error': result.get('error'),
                    'text': demo_response,
                    'provider': 'BOOOMERANGS-Demo'
                }
                yield f"data: {json.dumps(error_data)}\n\n"
                yield f"data: {json.dumps({'status': 'done', 'full_text': demo_response, 'provider': 'BOOOMERANGS-Demo', 'model': 'fallback-mode', 'elapsed': time.time() - start_time})}\n\n"
            else:
                text_data = {
                    'text': result.get('response'),
                    'provider': result.get('provider')
                }
                yield f"data: {json.dumps(text_data)}\n\n"
                yield f"data: {json.dumps({'status': 'done', 'full_text': result.get('response'), 'provider': result.get('provider'), 'model': result.get('model'), 'elapsed': result.get('elapsed', time.time() - start_time)})}\n\n"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {str(e)}", exc_info=True)
        error_data = {'error': str(e)}
        yield f"data: {json.dumps(error_data)}\n\n"
        demo_response = get_demo_response(message)
        text_data = {'text': demo_response, 'provider': 'BOOOMERANGS-Error'}
        yield f"data: {json.dumps(text_data)}\n\n"
        yield f"data: {json.dumps({'status': 'done', 'full_text': demo_response, 'provider': 'BOOOMERANGS-Error', 'model': 'error-mode', 'elapsed': time.time() - start_time})}\n\n"

@app.route('/python/chat/direct', methods=['POST'])
def chat_direct():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É.
    –û–∂–∏–¥–∞–µ—Ç JSON —Å –ø–æ–ª—è–º–∏: message, provider, model, timeout.
    """
    try:
        data = request.json or {}
        message = data.get('message', '')
        provider_name = data.get('provider')
        model = data.get('model')
        timeout = data.get('timeout', 20)

        if not message:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"}), 400

        if provider_name and hasattr(g4f.Provider, provider_name):
            provider = getattr(g4f.Provider, provider_name)
            start_time = time.time()
            response = provider(
                prompt=message,
                model=model,
                timeout=timeout
            )
            elapsed = time.time() - start_time

            if isinstance(response, str) and "<html" in response.lower():
                raise Exception(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞")

            logging.info(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {elapsed:.2f} —Å–µ–∫")

            return jsonify({
                "success": True,
                "response": response,
                "provider": provider_name,
                "model": model,
                "elapsed": elapsed
            })
        else:
            error_msg = f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            logging.error(error_msg)
            return jsonify({
                "error": error_msg,
                "response": f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
                "provider": "unknown"
            }), 404
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {str(e)}", exc_info=True)
        return jsonify({
            "error": str(e),
            "response": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {str(e)}",
            "provider": "error"
        }), 500

@app.route('/python/test', methods=['POST'])
def test():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Å–∞–º—ã–º –Ω–∞–¥—ë–∂–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º.
    """
    try:
        data = request.json or {}
        message = data.get('message', 'test')

        result = get_chat_response(message, specific_provider="Qwen_Max")
        return jsonify(result)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}", exc_info=True)
        return jsonify({
            "error": str(e),
            "response": "–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: " + str(e),
            "provider": "BOOOMERANGS-Test",
            "model": "test-mode"
        }), 500

@app.route('/python/chat/stream', methods=['POST'])
def chat_stream():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.
    –û–∂–∏–¥–∞–µ—Ç JSON —Å –ø–æ–ª—è–º–∏: message (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), provider (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), timeout (–º—Å).
    """
    if request.method != 'POST':
        return Response('–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', status=405)

    data = request.json or {}
    message = data.get('message', '')
    provider = data.get('provider')
    try:
        timeout = float(data.get('timeout', 20000)) / 1000
        if timeout <= 0 or timeout > 60:
            timeout = 20  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–∞–π–º-–∞—É—Ç–∞ –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
    except (ValueError, TypeError):
        timeout = 20

    if not message:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"}), 400

    return Response(
        stream_response_generator(message, provider, timeout),
        mimetype='text/event-stream',
        headers={
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive',
            'X-Accel-Buffering': 'no'
        }
    )

@app.route('/')
def index():
    """
    –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç.
    """
    return "BOOOMERANGS Python G4F API —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == '__main__':
    available_providers = [name for name in dir(g4f.Provider) if not name.startswith('_') and name[0].isupper()]
    logging.info(f"ü§ñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(available_providers)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {', '.join(available_providers)}")

    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(host='0.0.0.0', port=5004, debug=False)