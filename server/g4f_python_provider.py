"""
BOOOMERANGS G4F Python Provider
–í–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
–º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
"""
from flask import Flask, request, jsonify, Response
from flask_cors import CORS
import g4f
import time
import random
import json
import re
import traceback

app = Flask(__name__)
CORS(app)

# –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ë–ê–ó–ê –ü–†–û–í–ï–†–ï–ù–ù–´–• –†–ê–ë–û–ß–ò–• –ü–†–û–í–ê–ô–î–ï–†–û–í
models_per_provider = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (Tier 1)
    "Qwen_Qwen_2_5_Max": "gpt-4o",           # –û—Å–Ω–æ–≤–Ω–æ–π - Alibaba Cloud Qwen
    "ChatGpt": "gpt-4o",                     # OpenAI GPT —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    "Gemini": "gemini-pro",                  # Google Gemini
    "Claude": "claude-3-sonnet",             # Anthropic Claude
    "You": "gpt-4",                          # You.com - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (Tier 2)
    "Phind": "gpt-4",                        # –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Ö–Ω–∏–∫–∏
    "DeepInfra": "llama-3.1-70b",           # Meta LLaMA —á–µ—Ä–µ–∑ DeepInfra
    "HuggingChat": "mixtral-8x7b",          # HuggingFace Mixtral
    "Perplexity": "sonar-medium",           # Perplexity –¥–ª—è –ø–æ–∏—Å–∫–∞
    "Groq": "llama-3.1-70b",               # Groq - –±—ã—Å—Ç—Ä—ã–µ LLM
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (Tier 3)
    "AItianhu": "gpt-4",                    # –ö–∏—Ç–∞–π—Å–∫–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    "Liaobots": "gpt-4",                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π GPT
    "FreeGpt": "gpt-3.5-turbo",            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π GPT
    "GeminiPro": "gemini-pro",             # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Gemini
    "DeepSeek": "deepseek-coder",          # DeepSeek –¥–ª—è –∫–æ–¥–∞
    "Mistral": "mistral-large",            # Mistral AI
    "Cohere": "command-r-plus",            # Cohere Command
    "Together": "llama-3.1-70b",          # Together AI
}

# –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
provider_groups = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ (Tier 1 - —Å–∞–º—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ)
    "primary": ["Qwen_Qwen_2_5_Max", "ChatGpt", "Gemini", "Claude", "You"],
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (Tier 2)
    "secondary": ["Phind", "DeepInfra", "HuggingChat", "Perplexity", "Groq"],
    
    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (Tier 3)
    "fallback": ["AItianhu", "Liaobots", "FreeGpt", "GeminiPro", "Mistral"],
    
    # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–æ—â–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (Tier 4)
    "experimental": ["DeepSeek", "Cohere", "Together"],
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    "technical": ["Phind", "DeepSeek", "Claude", "DeepInfra", "ChatGpt"],  # –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    "creative": ["Claude", "Gemini", "ChatGpt", "You", "Mistral"],        # –î–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    "search": ["Perplexity", "You", "Gemini", "ChatGpt"],                 # –î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    "fast": ["Groq", "Together", "DeepInfra", "You"],                     # –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
    "smart": ["Claude", "ChatGpt", "Gemini", "Qwen_Qwen_2_5_Max"],        # –£–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
    "deepspeek": ["DeepSeek", "Phind", "Claude", "ChatGpt", "Qwen_Qwen_2_5_Max"]  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞
}

# –§–£–ù–ö–¶–ò–Ø get_demo_response –£–î–ê–õ–ï–ù–ê - –±–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!

def try_provider(provider_name, message, timeout=15, use_stream=False):
    """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    start_time = time.time()
    success = False
    response = None
    error_message = None
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ –∏–º–µ–Ω–∏
    if hasattr(g4f.Provider, provider_name):
        provider = getattr(g4f.Provider, provider_name)
        model = models_per_provider.get(provider_name, "gpt-3.5-turbo")
        
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}...")
        print(f"  üìù –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model}, —Å—Ç—Ä–∏–º–∏–Ω–≥: {use_stream}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ë–ï–ó –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            messages = [
                {"role": "user", "content": message}
            ]
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
            response = g4f.ChatCompletion.create(
                model=model,
                messages=messages,
                provider=provider,
                stream=use_stream,
                timeout=timeout
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä)
            if use_stream:
                # –î–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä
                return {
                    "streaming": True,
                    "response_stream": response,
                    "provider": provider_name,
                    "model": model
                }
            else:
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–µ–π (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
                if isinstance(response, str) and "<html" in response.lower():
                    raise Exception(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—à–∏–±–∫–∏
                if isinstance(response, str) and any(err in response.lower() for err in ["error", "exception", "blocked", "403", "forbidden"]):
                    if len(response) < 100:  # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
                        raise Exception(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response}")
                
                print(f"‚úÖ {provider_name} (–º–æ–¥–µ–ª—å {model}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫")
                
                return {
                    "streaming": False,
                    "response": response,
                    "provider": provider_name,
                    "model": model,
                    "elapsed": time.time() - start_time
                }
                
        except Exception as e:
            error_message = str(e)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}: {error_message}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏ —ç—Ç–æ
            if "html" in error_message.lower() or "403" in error_message or "forbidden" in error_message:
                error_message = f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                
            return {
                "streaming": False,
                "error": error_message,
                "provider": provider_name,
                "model": model
            }
    else:
        error_message = f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print(f"‚ùå {error_message}")
        
        return {
            "streaming": False,
            "error": error_message,
            "provider": "unknown"
        }

def get_chat_response(message, specific_provider=None, use_stream=False):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (fallback) –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
    if not message:
        return {
            "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "response": "–Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–Ω–µ—à–Ω–∏–µ AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ BOOOMERANGS –∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!",
            "provider": "BOOOMERANGS-Demo",
            "model": "error-mode"
        }
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –ø—Ä–æ–±—É–µ–º –µ–≥–æ
    if specific_provider and specific_provider != "Qwen_Qwen_2_5_Max":
        result = try_provider(specific_provider, message, timeout=25, use_stream=use_stream)
        if "error" not in result or use_stream:
            return result
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω Qwen –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤—ã–±–æ—Ä–∞
    print(f"üß† –ê–∫—Ç–∏–≤–∏—Ä—É—é —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è: {message[:50]}...")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –≥—Ä—É–ø–ø–∞–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    def try_provider_group(group_name):
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        providers = provider_groups.get(group_name, []).copy()
        random.shuffle(providers)
        
        print(f"üîÑ –ü–µ—Ä–µ–±–æ—Ä –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {group_name}")
        
        for provider_name in providers:
            # –î–ª—è –±—ã—Å—Ç—Ä–æ–π –≥—Ä—É–ø–ø—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–π —Ç–∞–π–º–∞—É—Ç
            timeout = 10 if group_name == "fast" else 20
            result = try_provider(provider_name, message, timeout=timeout, use_stream=use_stream)
            if "error" not in result:
                print(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_name} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç")
                return result
            elif use_stream and "response_stream" in result:
                return result
        
        return None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º
    is_tech_question = any(keyword in message.lower() for keyword in [
        "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "javascript", "python", "java", "c++", "c#", 
        "coding", "programming", "code", "–∞–ª–≥–æ—Ä–∏—Ç–º", "algorithm", "—Ñ—É–Ω–∫—Ü–∏—è", "function",
        "api", "—Å–µ—Ä–≤–µ—Ä", "server", "backend", "frontend", "—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥", "–±—ç–∫–µ–Ω–¥",
        "database", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "sql", "nosql", "mongodb", "json", "html", "css",
        "git", "github", "docker", "kubernetes", "devops"
    ])
    
    # –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≥—Ä—É–ø–ø—É technical
    if is_tech_question and not specific_provider:
        print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ–±—É–µ–º technical –≥—Ä—É–ø–ø—É...")
        result = try_provider_group("technical")
        if result:
            return result
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    is_creative_question = any(keyword in message.lower() for keyword in [
        "—Å—Ç–∏—Ö", "—Ä–∞—Å—Å–∫–∞–∑", "–∏—Å—Ç–æ—Ä–∏—è", "—Å–∫–∞–∑–∫–∞", "–ø–æ—ç–∑–∏—è", "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–∫—Ä–µ–∞—Ç–∏–≤",
        "poem", "story", "creative", "write", "–ø–∏—Å–∞—Ç—å", "—Å–æ—á–∏–Ω–∏—Ç—å", "–ø—Ä–∏–¥—É–º–∞—Ç—å"
    ])
    
    # –î–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º creative –≥—Ä—É–ø–ø—É
    if is_creative_question and not specific_provider:
        print(f"üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ–±—É–µ–º creative –≥—Ä—É–ø–ø—É...")
        result = try_provider_group("creative")
        if result:
            return result
    
    # –î–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º search –≥—Ä—É–ø–ø—É
    is_search_question = any(keyword in message.lower() for keyword in [
        "–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–≥–¥–µ", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–∫—Ç–æ —Ç–∞–∫–æ–π", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¥–∞–Ω–Ω—ã–µ",
        "find", "search", "what is", "who is", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ"
    ])
    
    if is_search_question and not specific_provider:
        print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–±—É–µ–º search –≥—Ä—É–ø–ø—É...")
        result = try_provider_group("search")
        if result:
            return result
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    print(f"‚ö° –ü—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è...")
    result = try_provider_group("fast")
    if result:
        return result
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    for group in ["primary", "secondary", "fallback"]:
        result = try_provider_group(group)
        if result:
            return result
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
    print("‚ùå –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç")
    return {
        "error": "–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
        "response": "Python G4F –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ—Ç –∂–∏–≤—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤",
        "provider": "BOOOMERANGS-Demo",
        "model": "fallback-mode"
    }

@app.route('/python/chat', methods=['POST'])
def chat():
    try:
        data = request.json
        message = data.get('message', '')
        provider = data.get('provider')
        timeout = data.get('timeout', 20000) / 1000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ DeepSpeek
        if provider == 'deepspeek':
            print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è DeepSpeek: {message[:50]}...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø—É deepspeek —Å Phind –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–∑ –≥—Ä—É–ø–ø—ã deepspeek
                for provider_name in provider_groups.get('deepspeek', ['Phind']):
                    try:
                        result = try_provider(provider_name, message, timeout)
                        if result.get('success'):
                            # –ü–æ–¥–º–µ–Ω—è–µ–º –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ DeepSpeek
                            result['provider'] = 'DeepSpeek'
                            result['model'] = 'DeepSpeek AI'
                            return jsonify(result)
                    except Exception as provider_error:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ DeepSpeek ({provider_name}): {str(provider_error)}")
                        continue
                
                # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–∑ deepspeek –≥—Ä—É–ø–ø—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º Phind –Ω–∞–ø—Ä—è–º—É—é
                result = try_provider('Phind', message, timeout)
                if result.get('success'):
                    result['provider'] = 'DeepSpeek'
                    result['model'] = 'DeepSpeek AI (Phind)'
                    return jsonify(result)
            except Exception as e:
                print(f"–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã DeepSpeek –≤–µ—Ä–Ω—É–ª–∏ –æ—à–∏–±–∫—É: {str(e)}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç —Å –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–º DeepSpeek
                return jsonify({
                    "success": True,
                    "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DeepSpeek. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.",
                    "provider": "DeepSpeek",
                    "model": "DeepSpeek AI (Offline)",
                    "elapsed": 0.5
                })
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        result = get_chat_response(message, specific_provider=provider)
        return jsonify(result)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        traceback.print_exc()
        return jsonify({
            "error": str(e),
            "response": "–û—à–∏–±–∫–∞ Python G4F - –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            "provider": "BOOOMERANGS-Error",
            "model": "error-mode"
        })

@app.route('/python/direct', methods=['POST'])
def direct_provider():
    """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        data = request.json
        message = data.get('message', '')
        provider_name = data.get('provider')
        system_prompt = data.get('systemPrompt', '–í—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ —Ç–æ—á–Ω–æ.')
        timeout = data.get('timeout', 30000) / 1000  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        if not message or not provider_name:
            return jsonify({
                "error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞",
                "response": "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                "provider": "error",
                "model": "error"
            })
        
        print(f"üéØ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name} –±–µ–∑ fallback")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞–ø—Ä—è–º—É—é –∏–∑ g4f
        if hasattr(g4f.Provider, provider_name):
            provider = getattr(g4f.Provider, provider_name)
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å
            model = models_per_provider.get(provider_name, "gpt-3.5-turbo")
            
            print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å {model} –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message}
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
            try:
                start_time = time.time()
                response = g4f.ChatCompletion.create(
                    model=model,
                    messages=messages,
                    provider=provider,
                    timeout=timeout
                )
                elapsed = time.time() - start_time
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                if isinstance(response, str) and "<html" in response.lower():
                    raise Exception(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞")
                
                print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {elapsed:.2f} —Å–µ–∫")
                
                return jsonify({
                    "success": True,
                    "response": response,
                    "provider": provider_name,
                    "model": model,
                    "elapsed": elapsed
                })
            except Exception as e:
                error_message = str(e)
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}: {error_message}")
                
                return jsonify({
                    "error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}: {error_message}",
                    "response": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}: {error_message}",
                    "provider": provider_name,
                    "model": model
                })
        else:
            return jsonify({
                "error": f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "response": f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
                "provider": "unknown"
            })
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {str(e)}")
        traceback.print_exc()
        
        return jsonify({
            "error": str(e),
            "response": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {str(e)}",
            "provider": "error"
        })

@app.route('/python/test', methods=['POST'])
def test():
    try:
        data = request.json
        message = data.get('message', 'test')
        
        # –î–ª—è —Ç–µ—Å—Ç–∞ –±–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        result = get_chat_response(message, specific_provider="Qwen_Max")
        return jsonify(result)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        return jsonify({
            "error": str(e),
            "response": "–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: " + str(e),
            "provider": "BOOOMERANGS-Test",
            "model": "test-mode"
        })

@app.route('/python/chat/stream', methods=['POST'])
def chat_stream():
    """API –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    if request.method != 'POST':
        return Response('–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', status=405)
    
    try:
        data = request.json
        message = data.get('message', '')
        provider = data.get('provider')
        timeout = data.get('timeout', 20000) / 1000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã
        
        if not message:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"}), 400
        
        # –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        def generate():
            start_time = time.time()
            
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                result = get_chat_response(message, specific_provider=provider, use_stream=True)
                
                # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
                yield f"data: {json.dumps({'status': 'start', 'provider': result.get('provider')})}\n\n"
                
                if result.get('streaming') and 'response_stream' in result:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    full_response = ''
                    
                    for chunk in result['response_stream']:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ HTML –ª–∏ —ç—Ç–æ
                        if "<html" in chunk.lower():
                            yield f"data: {json.dumps({'error': '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'})}\n\n"
                            break
                            
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫
                        yield f"data: {json.dumps({'chunk': chunk, 'provider': result.get('provider')})}\n\n"
                        full_response += chunk
                    
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
                    elapsed = time.time() - start_time
                    completion_data = {
                        'status': 'done', 
                        'full_text': full_response,
                        'provider': result.get('provider'),
                        'model': result.get('model'),
                        'elapsed': elapsed
                    }
                    yield f"data: {json.dumps(completion_data)}\n\n"
                else:
                    # –ï—Å–ª–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                    if "error" in result:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
                        error_data = {
                            'error': result.get('error'),
                            'text': '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∂–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã',
                            'provider': 'Error-Provider'
                        }
                        yield f"data: {json.dumps(error_data)}\n\n"
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏
                        error_completion = {
                            'status': 'error',
                            'error': '–í—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
                            'elapsed': time.time() - start_time
                        }
                        yield f"data: {json.dumps(error_completion)}\n\n"
                    else:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
                        text_data = {
                            'text': result.get('response'),
                            'provider': result.get('provider')
                        }
                        yield f"data: {json.dumps(text_data)}\n\n"
                        
                        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        completion_data = {
                            'status': 'done',
                            'full_text': result.get('response'),
                            'provider': result.get('provider'),
                            'model': result.get('model'),
                            'elapsed': result.get('elapsed', time.time() - start_time)
                        }
                        yield f"data: {json.dumps(completion_data)}\n\n"
            
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {str(e)}")
                traceback.print_exc()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                error_data = {'error': str(e)}
                yield f"data: {json.dumps(error_data)}\n\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
                text_data = {'text': '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–æ–ª—å–∫–æ –∂–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã', 'provider': 'Error-Provider'}
                yield f"data: {json.dumps(text_data)}\n\n"
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                error_data = {
                    'status': 'error',
                    'error': '–í—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
                    'elapsed': time.time() - start_time
                }
                yield f"data: {json.dumps(error_data)}\n\n"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        return Response(
            generate(),
            mimetype='text/event-stream',
            headers={
                'Cache-Control': 'no-cache',
                'Connection': 'keep-alive',
                'X-Accel-Buffering': 'no'
            }
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {str(e)}")
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

@app.route('/')
def index():
    return "BOOOMERANGS Python G4F API —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == '__main__':
    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    available_providers = [name for name in dir(g4f.Provider) if not name.startswith('_') and name[0].isupper()]
    print(f"ü§ñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(available_providers)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {', '.join(available_providers)}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 5005, —Ç–∞–∫ –∫–∞–∫ 5004 –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
    app.run(host='0.0.0.0', port=5005, debug=False)