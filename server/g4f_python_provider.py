#!/usr/bin/env python3
"""
BOOOMERANGS G4F Python Provider
–í–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
–º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
"""
import g4f
import g4f.Provider
import sys
import json
import time
import random

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ g4f
AVAILABLE_PROVIDERS = {}

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
for provider_class in g4f.Provider.__providers__:
    # –ù–∞–∏–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    if provider_class.__name__ == "You":
        AVAILABLE_PROVIDERS["You"] = provider_class
    elif provider_class.__name__ == "DDG":
        AVAILABLE_PROVIDERS["DDG"] = provider_class
    elif provider_class.__name__ == "Phind":
        AVAILABLE_PROVIDERS["Phind"] = provider_class
    elif provider_class.__name__ == "DeepInfra":
        AVAILABLE_PROVIDERS["DeepInfra"] = provider_class
    elif provider_class.__name__ == "FreeGpt":
        AVAILABLE_PROVIDERS["FreeGpt"] = provider_class
    elif provider_class.__name__ == "ChatgptFree":
        AVAILABLE_PROVIDERS["ChatgptFree"] = provider_class
    elif provider_class.__name__ == "Liaobots":
        AVAILABLE_PROVIDERS["Liaobots"] = provider_class
    elif provider_class.__name__ == "Gemini":
        AVAILABLE_PROVIDERS["Gemini"] = provider_class
    elif provider_class.__name__ == "GeminiPro":
        AVAILABLE_PROVIDERS["GeminiPro"] = provider_class
    elif provider_class.__name__ == "Aichat":
        AVAILABLE_PROVIDERS["Aichat"] = provider_class
    elif provider_class.__name__ == "ChatGLM":
        AVAILABLE_PROVIDERS["ChatGLM"] = provider_class
    elif provider_class.__name__ == "AIChatFree":
        AVAILABLE_PROVIDERS["AIChatFree"] = provider_class
    elif provider_class.__name__ == "Yqcloud":
        AVAILABLE_PROVIDERS["Yqcloud"] = provider_class
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    elif provider_class.__name__ == "Qwen":
        AVAILABLE_PROVIDERS["Qwen"] = provider_class
    elif provider_class.__name__ == "Qwen_Qwen_2_5":
        AVAILABLE_PROVIDERS["Qwen_72B"] = provider_class
    elif provider_class.__name__ == "Qwen_Qwen_2_5_Max":
        AVAILABLE_PROVIDERS["Qwen_Max"] = provider_class
    elif provider_class.__name__ == "Qwen_Qwen_3":
        AVAILABLE_PROVIDERS["Qwen_3"] = provider_class

# –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
print(f"ü§ñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(AVAILABLE_PROVIDERS)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {', '.join(AVAILABLE_PROVIDERS.keys())}")

# –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
DEMO_RESPONSES = [
    {
        "pattern": ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hello", "hi"],
        "responses": [
            "–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç BOOOMERANGS. –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å!",
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! BOOOMERANGS AI –Ω–∞ —Å–≤—è–∑–∏. –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"
        ]
    },
    {
        "pattern": ["—á—Ç–æ —Ç–∞–∫–æ–µ booomerangs", "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ booomerangs", "booomerangs —ç—Ç–æ"],
        "responses": [
            "BOOOMERANGS - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö AI-–º–æ–¥–µ–ª–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –° BOOOMERANGS –≤—ã –º–æ–∂–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ ChatGPT –∏ DALL-E, –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø–æ–∫—É–ø–∞—Ç—å API –∫–ª—é—á–∏. –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.",
            "BOOOMERANGS - —ç—Ç–æ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ API –∫–ª—é—á–µ–π. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –Ω–∏–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."
        ]
    },
    {
        "pattern": ["—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ñ—É–Ω–∫—Ü–∏–∏"],
        "responses": [
            "–Ø —É–º–µ—é –º–Ω–æ–≥–æ–µ! –í–æ—Ç –º–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n1. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö AI-–º–æ–¥–µ–ª–µ–π\n2. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–Ω—Ç\n3. –ü–æ–º–æ–≥–∞—Ç—å —Å —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º\n4. –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n–ö—Ä–æ–º–µ —Ç–æ–≥–æ, BOOOMERANGS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç:\n‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ SVG —Ñ–æ—Ä–º–∞—Ç\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"
        ]
    }
]

def get_demo_response(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É"""
    message_lower = message.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    for template in DEMO_RESPONSES:
        if any(pattern in message_lower for pattern in template["pattern"]):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            return random.choice(template["responses"])
    
    # –û–±—â–∏–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω –Ω–µ –ø–æ–¥–æ—à–µ–ª
    return "–Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–Ω–µ—à–Ω–∏–µ AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ BOOOMERANGS –∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"

def try_provider(provider_name, message, timeout=15):
    """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    if provider_name not in AVAILABLE_PROVIDERS:
        print(f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    provider = AVAILABLE_PROVIDERS[provider_name]
    print(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}...")
    
    # –¢–∞–±–ª–∏—Ü–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    provider_models = {
        "Qwen_Max": ["qwen-max", "qwen-plus", "qwen-turbo"],
        "Qwen_3": ["qwen3-8b", "qwen3-4b", "qwen3-1.7b", "qwen3-0.6b", "qwen3-14b", "qwen3-32b", "qwen3-235b-a22b", "qwen3-30b-a3b"],
        "Qwen": ["qwen-turbo", "qwen-plus"],
        "Qwen_72B": ["qwen-72b"],
        "You": ["gpt-4o-mini", "gpt-4", "gpt-3.5-turbo"],
        "Phind": ["claude-3-haiku", "claude-3-sonnet", "claude-3-opus"],
        "GeminiPro": ["gemini-pro", "gemini-1.5-pro"],
        "Gemini": ["gemini-pro", "gemini-1.5-pro"],
        "DeepInfra": ["meta-llama/Llama-3-8b-chat", "meta-llama/Llama-3-70b-chat"],
        "Liaobots": ["gpt-4", "gpt-3.5-turbo"],
        "AIChatFree": ["gpt-3.5-turbo", "gpt-4"],
        "ChatgptFree": ["gpt-3.5"],
        "DDG": ["gpt-3.5"],
        "FreeGpt": ["gpt-3.5"]
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    models_to_try = provider_models.get(provider_name, ["gpt-3.5-turbo"])
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
    if not models_to_try:
        models_to_try = ["gpt-3.5-turbo"]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø—ã—Ç–∫–∞—Ö
    attempt_info = []
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–µ—Ä–µ–±–æ—Ä–æ–º –º–æ–¥–µ–ª–µ–π
    for model in models_to_try:
        try:
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
            start_time = time.time()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
            messages = [{"role": "user", "content": message}]
            
            # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç BOOOMERANGS. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
            
            if provider_name.startswith("Qwen"):
                if "3" in provider_name:
                    messages = [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": message}
                    ]
            elif provider_name in ["Gemini", "GeminiPro"]:
                messages = [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": message}
                ]
            
            print(f"  üìù –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = g4f.ChatCompletion.create(
                model=model,
                provider=provider,
                messages=messages,
                timeout=timeout  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not response or (isinstance(response, str) and len(response.strip()) == 0):
                print(f"  ‚ö†Ô∏è –ú–æ–¥–µ–ª—å {model} –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                attempt_info.append(f"{model}: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                continue
            
            elapsed = time.time() - start_time
            print(f"‚úÖ {provider_name} (–º–æ–¥–µ–ª—å {model}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {elapsed:.2f} —Å–µ–∫")
            
            return {
                "response": response,
                "provider": provider_name,
                "model": model
            }
            
        except Exception as e:
            error_msg = str(e)
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {error_msg}")
            attempt_info.append(f"{model}: {error_msg}")
            
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å unsupported model, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
            if "Model is not supported" in error_msg or "model not supported" in error_msg.lower():
                continue
            
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º, –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
            if "timeout" in error_msg.lower():
                timeout += 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
                print(f"  ‚è±Ô∏è –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ {timeout} —Å–µ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏")
    
    # –í—Å–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    print(f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—ã—Ç–∫–∏: {', '.join(attempt_info)}")
    return None

def get_chat_response(message, specific_provider=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (fallback)"""
    results = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è fallback
    provider_groups = {
        "primary": ["Qwen_Max", "Qwen_3", "Qwen", "Qwen_72B"],
        "secondary": ["You", "DDG", "DeepInfra", "Phind"],
        "tertiary": ["Liaobots", "GeminiPro", "Gemini", "AIChatFree"],
        "fallback": ["FreeGpt", "ChatgptFree", "Yqcloud", "ChatGLM"]
    }
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –µ–≥–æ
    if specific_provider and specific_provider in AVAILABLE_PROVIDERS:
        print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {specific_provider}")
        result = try_provider(specific_provider, message)
        if result:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {specific_provider}")
            return result
        print(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä {specific_provider} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º—É —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    def try_provider_group(group_name):
        nonlocal results
        print(f"üîÑ –ü–µ—Ä–µ–±–æ—Ä –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {group_name}")
        group_results = []
        
        for provider_name in provider_groups[group_name]:
            if provider_name in AVAILABLE_PROVIDERS:
                result = try_provider(provider_name, message)
                if result:
                    group_results.append(result)
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                    return result
        
        print(f"‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑ –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
        return None
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    for group in ["primary", "secondary", "tertiary", "fallback"]:
        group_result = try_provider_group(group)
        if group_result:
            print(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç")
            return group_result
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
    print("‚ö†Ô∏è –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º")
    return {
        "response": get_demo_response(message),
        "provider": "BOOOMERANGS-Demo",
        "model": "demo-mode"
    }

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(json.dumps({
            "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "response": get_demo_response("–æ—à–∏–±–∫–∞"),
            "provider": "BOOOMERANGS-Demo",
            "model": "error-mode"
        }))
        sys.exit(1)
    
    message = sys.argv[1]
    specific_provider = sys.argv[2] if len(sys.argv) > 2 else None
    
    try:
        result = get_chat_response(message, specific_provider)
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ response - —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if isinstance(result, dict) and "response" in result:
            if not isinstance(result["response"], str):
                result["response"] = str(result["response"])
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
        print(json.dumps(result, ensure_ascii=False))
    except Exception as e:
        print(json.dumps({
            "error": str(e),
            "response": get_demo_response("–æ—à–∏–±–∫–∞"),
            "provider": "BOOOMERANGS-Demo",
            "model": "error-mode"
        }, ensure_ascii=False))
        sys.exit(1)