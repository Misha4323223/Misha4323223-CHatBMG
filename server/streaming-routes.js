// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ AI, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç stream=True
const express = require('express');
const router = express.Router();
const { spawn } = require('child_process');
const { getDemoResponse } = require('./direct-ai-provider');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º
const chatHistory = require('./chat-history');

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥
const STREAMING_PROVIDERS = [
  'Qwen_Max',
  'Qwen_3',
  'DeepInfra',
  'Gemini',
  'GeminiPro',
  'You'
];

// API endpoint –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ SSE (Server-Sent Events)
router.post('/chat', async (req, res) => {
  try {
    const { 
      message, 
      provider = 'Qwen_Max', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Qwen_Max, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ä–æ—à–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥
      timeout = 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      sessionId
    } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if (!message) {
      return res.status(400).json({ 
        success: false, 
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' 
      });
    }
    
    console.log(`–ó–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∏–º–∏–Ω–≥ API: ${message.substring(0, 50)}${message.length > 50 ? '...' : ''}`);
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    let currentSessionId = sessionId;
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω sessionId: ${sessionId}, currentSessionId: ${currentSessionId}`);
    
    if (!currentSessionId && message) {
      console.log('üí¨ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞...');
      const newSession = await chatHistory.createChatSession(1, message.substring(0, 50));
      currentSessionId = newSession.id;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è: ${currentSessionId}`);
    } else {
      console.log(`üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é: ${currentSessionId}`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (currentSessionId && message) {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ...');
      await chatHistory.saveMessage({
        sessionId: currentSessionId,
        sender: 'user',
        content: message,
        provider: null
      });
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ');
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SSE
    res.writeHead(200, {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive'
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
    const demoResponse = getDemoResponse(message);
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–±–æ—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ AI
    let fullAiResponse = '';
    let usedProvider = 'BOOOMERANGS';
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SSE —Å–æ–±—ã—Ç–∏–π
    const sendEvent = (event, data) => {
      res.write(`event: ${event}\n`);
      res.write(`data: ${JSON.stringify(data)}\n\n`);
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å—Ç—Ä–∏–º–∏–Ω–≥
    const supportsStreaming = STREAMING_PROVIDERS.includes(provider);
    if (!supportsStreaming) {
      console.log(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Qwen_Max`);
      sendEvent('info', { 
        message: `–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Qwen_Max`,
        provider: 'BOOOMERANGS'
      });
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥
    const actualProvider = supportsStreaming ? provider : 'Qwen_Max';
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º
    const pythonProcess = spawn('python', [
      'server/g4f_python_provider.py',
      message,
      actualProvider,
      'stream' // –ö–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    ]);
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    let isCompleted = false;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞
    pythonProcess.stdout.on('data', (data) => {
      if (isCompleted) return;
      
      const outputText = data.toString();
      console.log(`Python streaming: ${outputText.substring(0, 50)}${outputText.length > 50 ? '...' : ''}`);
      
      // –ò—â–µ–º –≤—Å–µ JSON –æ–±—ä–µ–∫—Ç—ã –≤ –≤—ã–≤–æ–¥–µ
      const jsonObjects = outputText.match(/{[^{}]*}/g);
      
      if (jsonObjects) {
        for (const jsonStr of jsonObjects) {
          try {
            const jsonData = JSON.parse(jsonStr);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            if (jsonData.streaming) {
              if (jsonData.starting) {
                // –ù–∞—á–∞–ª–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                sendEvent('info', {
                  message: `–ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç ${jsonData.provider || 'AI'}`,
                  provider: jsonData.provider,
                  model: jsonData.model
                });
              } else if (jsonData.chunk) {
                // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
                fullAiResponse += jsonData.chunk;
                usedProvider = jsonData.provider || 'BOOOMERANGS';
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫ —Ç–µ–∫—Å—Ç–∞
                sendEvent('update', {
                  chunk: jsonData.chunk,
                  done: false,
                  provider: jsonData.provider,
                  model: jsonData.model
                });
              } else if (jsonData.complete) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç AI –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if (currentSessionId && fullAiResponse.trim()) {
                  console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç AI...');
                  chatHistory.saveMessage({
                    sessionId: currentSessionId,
                    sender: 'ai',
                    content: fullAiResponse.trim(),
                    provider: usedProvider
                  }).then(() => {
                    console.log(`‚úÖ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω (${usedProvider})`);
                  }).catch(err => {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', err);
                  });
                }
                
                // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                sendEvent('complete', {
                  message: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                  provider: jsonData.provider,
                  model: jsonData.model
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                isCompleted = true;
              } else if (jsonData.error) {
                // –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                sendEvent('error', {
                  message: jsonData.error,
                  provider: jsonData.provider || 'BOOOMERANGS'
                });
              }
            } else {
              // –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–µ –æ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥–∞) - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫—É—Å–∫–∏
              if (jsonData.response) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É
                fullAiResponse = jsonData.response;
                usedProvider = jsonData.provider || 'BOOOMERANGS';
                
                const words = jsonData.response.split(' ');
                let position = 0;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                const interval = setInterval(async () => {
                  if (position < words.length) {
                    const chunk = words.slice(position, position + 3).join(' ');
                    position += 3;
                    
                    sendEvent('update', {
                      chunk,
                      done: position >= words.length,
                      provider: jsonData.provider || 'BOOOMERANGS',
                      model: jsonData.model || 'fallback'
                    });
                    
                    if (position >= words.length) {
                      clearInterval(interval);
                      
                      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç AI –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                      if (currentSessionId && fullAiResponse.trim()) {
                        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)...');
                        await chatHistory.saveMessage({
                          sessionId: currentSessionId,
                          sender: 'ai',
                          content: fullAiResponse.trim(),
                          provider: usedProvider
                        });
                        console.log(`‚úÖ –û—Ç–≤–µ—Ç AI —Å–æ—Ö—Ä–∞–Ω–µ–Ω (${usedProvider})`);
                      }
                      
                      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                      sendEvent('complete', {
                        message: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                        provider: jsonData.provider || 'BOOOMERANGS',
                        model: jsonData.model || 'fallback'
                      });
                      
                      isCompleted = true;
                    }
                  } else {
                    clearInterval(interval);
                  }
                }, 100);
              }
            }
          } catch (parseError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON:', parseError);
            sendEvent('log', { message: jsonStr });
          }
        }
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—ã—Ä–æ–π –≤—ã–≤–æ–¥ –∫–∞–∫ –ª–æ–≥
        sendEvent('log', { message: outputText });
      }
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    pythonProcess.stderr.on('data', (data) => {
      const errorText = data.toString();
      console.error(`Streaming Python –æ—à–∏–±–∫–∞: ${errorText}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
      if (!isCompleted) {
        sendEvent('error', { message: errorText });
      }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞
    const demoDelay = Math.min(5000, timeout / 4);
    const demoTimeout = setTimeout(() => {
      if (!isCompleted) {
        console.log(`–ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ ${demoDelay}–º—Å`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –¥–µ–º–æ-—Ä–µ–∂–∏–º
        sendEvent('info', {
          message: 'AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ–º–æ-—Ä–µ–∂–∏–º',
          provider: 'BOOOMERANGS-Live'
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –ø–æ —á–∞—Å—Ç—è–º
        const demoWords = demoResponse.split(' ');
        let sentWords = 0;
        
        const demoInterval = setInterval(() => {
          if (sentWords < demoWords.length && !isCompleted) {
            const chunk = demoWords.slice(sentWords, sentWords + 3).join(' ');
            sentWords += 3;
            
            sendEvent('update', {
              chunk,
              done: sentWords >= demoWords.length,
              provider: 'BOOOMERANGS-Live',
              model: 'demo-mode'
            });
            
            if (sentWords >= demoWords.length) {
              clearInterval(demoInterval);
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
              sendEvent('complete', {
                message: '–î–µ–º–æ-—Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω',
                provider: 'BOOOMERANGS-Live',
                model: 'demo-mode'
              });
              
              isCompleted = true;
            }
          } else {
            clearInterval(demoInterval);
          }
        }, 100);
      }
    }, demoDelay);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    pythonProcess.on('close', (code) => {
      clearTimeout(demoTimeout);
      
      if (!isCompleted) {
        if (code !== 0) {
          console.error(`Python —Å—Ç—Ä–∏–º–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
          sendEvent('error', { 
            message: `Python –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}` 
          });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
          sendEvent('update', {
            chunk: demoResponse,
            done: true,
            provider: 'BOOOMERANGS-Fallback',
            model: 'error-recovery'
          });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          sendEvent('complete', {
            message: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏)',
            provider: 'BOOOMERANGS-Fallback',
            model: 'error-recovery'
          });
        } else {
          // –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ, –Ω–æ –º—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ complete —Å–æ–±—ã—Ç–∏–µ
          sendEvent('complete', {
            message: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            provider: 'BOOOMERANGS',
            model: 'streaming-complete'
          });
        }
        
        isCompleted = true;
      }
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º
    req.on('close', () => {
      // –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å Python, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∑–∞–ø—É—â–µ–Ω
      if (pythonProcess && !pythonProcess.killed) {
        pythonProcess.kill();
      }
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞
      clearTimeout(demoTimeout);
      
      console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞:', error);
    
    // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π JSON –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
    if (!res.headersSent) {
      return res.status(500).json({
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞',
        message: error.message
      });
    }
  }
});

module.exports = router;