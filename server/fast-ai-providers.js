/**
 * –ë—ã—Å—Ç—Ä—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
 */

const axios = require('axios');

/**
 * –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä 1: ChatGPT Free (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
 */
async function getFastChatGPTResponse(message) {
    try {
        const response = await axios.post('https://chatgpt4online.org/wp-json/mwai-ui/v1/chats/submit', {
            botId: 'default',
            customId: null,
            session: 'N/A',
            chatId: `chatcmpl-${Date.now()}`,
            contextId: 1,
            messages: [{ role: 'user', content: message }],
            newMessage: message,
            stream: false
        }, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
        });

        if (response.data && response.data.reply) {
            return {
                success: true,
                response: response.data.reply,
                provider: 'Fast-ChatGPT',
                model: 'gpt-3.5-turbo'
            };
        }

        throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Fast ChatGPT');
    } catch (error) {
        console.log('‚ùå Fast ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        return { success: false, error: error.message };
    }
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä 2: HuggingChat Express
 */
async function getFastHuggingChatResponse(message) {
    try {
        const response = await axios.post('https://huggingface.co/chat/conversation', {
            inputs: message,
            parameters: {
                temperature: 0.7,
                max_new_tokens: 512,
                top_p: 0.95,
                repetition_penalty: 1.1
            },
            stream: false
        }, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Content-Type': 'application/json'
            },
            timeout: 8000 // 8 —Å–µ–∫—É–Ω–¥
        });

        if (response.data && response.data.generated_text) {
            return {
                success: true,
                response: response.data.generated_text,
                provider: 'Fast-HuggingChat',
                model: 'mistral-7b'
            };
        }

        throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Fast HuggingChat');
    } catch (error) {
        console.log('‚ùå Fast HuggingChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        return { success: false, error: error.message };
    }
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä 3: DeepAI Express
 */
async function getFastDeepAIResponse(message) {
    try {
        const response = await axios.post('https://api.deepai.org/api/text-generator', {
            text: message
        }, {
            headers: {
                'Api-Key': 'quickstart-QUdJIGlzIGNvbWluZy4uLi4K',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            },
            timeout: 7000 // 7 —Å–µ–∫—É–Ω–¥
        });

        if (response.data && response.data.output) {
            return {
                success: true,
                response: response.data.output,
                provider: 'Fast-DeepAI',
                model: 'text-generator'
            };
        }

        throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Fast DeepAI');
    } catch (error) {
        console.log('‚ùå Fast DeepAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        return { success: false, error: error.message };
    }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
 * –ü—Ä–æ–±—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏
 */
async function getFastAIResponse(message) {
    console.log('üöÄ –ò—â–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI...');
    
    const fastProviders = [
        { name: 'Fast-DeepAI', func: getFastDeepAIResponse },
        { name: 'Fast-HuggingChat', func: getFastHuggingChatResponse },
        { name: 'Fast-ChatGPT', func: getFastChatGPTResponse }
    ];

    for (const provider of fastProviders) {
        try {
            console.log(`‚ö° –ü—Ä–æ–±—É–µ–º ${provider.name}...`);
            const result = await provider.func(message);
            
            if (result.success) {
                console.log(`‚úÖ ${provider.name} –æ—Ç–≤–µ—Ç–∏–ª –±—ã—Å—Ç—Ä–æ!`);
                return result;
            }
        } catch (error) {
            console.log(`‚ùå ${provider.name} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª:`, error.message);
            continue;
        }
    }

    return {
        success: false,
        error: '–í—Å–µ –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
        provider: 'Fast-AI-System'
    };
}

module.exports = {
    getFastAIResponse,
    getFastChatGPTResponse,
    getFastHuggingChatResponse,
    getFastDeepAIResponse
};