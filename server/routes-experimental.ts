import type { Express } from "express";
import { createServer, type Server } from "http";
import { WebSocketServer } from 'ws';
import { saveMessage, getSessionMessages, getUserChatSessions, createChatSession, updateSessionTitle, deleteSession } from './chat-history.js';
import multer from 'multer';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB –º–∞–∫—Å–∏–º—É–º
  }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
async function connectToStreamingServer(message: string, context: string = '') {
  try {
    const response = await fetch('http://localhost:5001/stream', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: message,
        context: context,
        stream: true
      })
    });

    if (response.ok && response.body) {
      return response.body;
    } else {
      throw new Error(`HTTP ${response.status}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É:', error);
    throw error;
  }
}

export async function registerRoutes(app: Express): Promise<Server> {
  // Create HTTP server
  const httpServer = createServer(app);

  // ============== CHAT API ==============
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get('/api/chat/sessions', async (req, res) => {
    try {
      const username = req.query.username as string || 'anna';
      console.log('üîç –ó–∞–ø—Ä–æ—Å —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);
      
      const sessions = await getUserChatSessions(username);
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${sessions.length} —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
      
      res.json({
        success: true,
        sessions: sessions
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤'
      });
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
  app.post('/api/chat/sessions', async (req, res) => {
    try {
      const { username, title } = req.body;
      
      if (!username) {
        return res.status(400).json({
          success: false,
          error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
        });
      }
      
      const session = await createChatSession(username, title || '–ù–æ–≤—ã–π —á–∞—Ç');
      
      res.json({
        success: true,
        session: session
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏'
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏
  app.get('/api/chat/sessions/:sessionId/messages', async (req, res) => {
    try {
      const sessionId = parseInt(req.params.sessionId);
      console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}...`);
      
      const messages = await getSessionMessages(sessionId);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);
      
      res.json({
        success: true,
        messages: messages
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π'
      });
    }
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é
  app.post('/api/chat/sessions/:sessionId/messages', async (req, res) => {
    try {
      const sessionId = parseInt(req.params.sessionId);
      const { content, sender, userId, provider, model } = req.body;
      
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é ${sessionId}:`, { sessionId, content: content.substring(0, 50) + '...', sender, userId, provider });
      
      const messageData = {
        sessionId,
        content,
        sender,
        userId,
        provider: provider || null,
        model: model || null,
        category: null,
        confidence: null,
        imageUrl: null
      };
      
      const savedMessage = await saveMessage(messageData);
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', savedMessage.id);
      
      res.json({
        success: true,
        message: savedMessage
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è'
      });
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
  app.patch('/api/chat/sessions/:sessionId', async (req, res) => {
    try {
      const sessionId = parseInt(req.params.sessionId);
      const { title } = req.body;
      
      await updateSessionTitle(sessionId, title);
      
      res.json({
        success: true,
        message: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω'
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞'
      });
    }
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  app.delete('/api/chat/sessions/:sessionId', async (req, res) => {
    try {
      const sessionId = parseInt(req.params.sessionId);
      
      await deleteSession(sessionId);
      
      res.json({
        success: true,
        message: '–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞'
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏'
      });
    }
  });

  // ============== AI STREAMING ==============
  
  // –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —á–∞—Ç —Å AI
  app.post('/api/ai/stream-chat', async (req, res) => {
    try {
      const { message, context = '' } = req.body;
      
      console.log('üåä –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:', message.substring(0, 100) + '...');
      console.log('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ 5001...');
      
      const streamResponse = await connectToStreamingServer(message, context);
      
      res.setHeader('Content-Type', 'text/plain; charset=utf-8');
      res.setHeader('Cache-Control', 'no-cache');
      res.setHeader('Connection', 'keep-alive');
      
      console.log('‚úÖ –°—Ç—Ä–∏–º–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
      // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Ç–æ–∫ –Ω–∞–ø—Ä—è–º—É—é –∫–ª–∏–µ–Ω—Ç—É
      streamResponse.pipeTo(new WritableStream({
        write(chunk) {
          res.write(chunk);
        },
        close() {
          res.end();
        }
      }));
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ —á–∞—Ç–∞:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI —Å–µ—Ä–≤–∏—Å—É'
      });
    }
  });

  // WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const wss = new WebSocketServer({ 
    server: httpServer, 
    path: '/ws' 
  });

  wss.on('connection', (ws) => {
    console.log('üîå WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
    
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data.toString());
        console.log('üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.type);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        switch (message.type) {
          case 'ping':
            ws.send(JSON.stringify({ type: 'pong' }));
            break;
          case 'chat':
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
            break;
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });

    ws.on('close', () => {
      console.log('üîå WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
    });
  });

  console.log('‚úÖ –ß–∏—Å—Ç—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
  return httpServer;
}