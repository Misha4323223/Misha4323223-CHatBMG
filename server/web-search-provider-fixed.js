/**
 * Web Search Provider - –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö API –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 */

// –ò–º–ø–æ—Ä—Ç fetch –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
const fetch = require('node-fetch');

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param {string} query - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} –ù—É–∂–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫
 */
function needsWebSearch(query) {
    const lowerQuery = query.toLowerCase();
    console.log(`üîç [SEARCH CHECK] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å: "${lowerQuery}"`);
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const patterns = [
        // –ü–æ–≥–æ–¥–∞
        /–ø–æ–≥–æ–¥–∞|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞|–¥–æ–∂–¥—å|—Å–Ω–µ–≥|–≤–µ—Ç–µ—Ä|–ø—Ä–æ–≥–Ω–æ–∑|–≥—Ä–∞–¥—É—Å/,
        
        // –ù–æ–≤–æ—Å—Ç–∏
        /–Ω–æ–≤–æ—Å—Ç|—Å–æ–±—ã—Ç–∏|–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç|—Å–ª—É—á–∏–ª–æ—Å—å|–ø—Ä–æ–∏–∑–æ—à–ª–æ|–≥–ª–∞–≤–Ω—ã–µ|—Å–≤–æ–¥–∫–∞/,
        
        // –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        /—Å–µ–π—á–∞—Å|—Å–µ–≥–æ–¥–Ω—è|–≤—á–µ—Ä–∞|–∑–∞–≤—Ç—Ä–∞|—Ç–µ–∫—É—â–∏–π|–∞–∫—Ç—É–∞–ª—å–Ω—ã–π|–ø–æ—Å–ª–µ–¥–Ω–∏–π|—Å–≤–µ–∂–∏–π/,
        
        // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        /–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã|—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã|—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ|—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏|–æ—Ç–∫—Ä—ã—Ç|–∑–∞–∫—Ä—ã—Ç/,
        
        // –§–∏–Ω–∞–Ω—Å—ã
        /–∫—É—Ä—Å|—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º–æ—Å—Ç—å|–∫–æ—Ç–∏—Ä–æ–≤–∫–∏|–∞–∫—Ü–∏–∏|–¥–æ–ª–ª–∞—Ä|–µ–≤—Ä–æ|—Ä—É–±–ª—å/,
        
        // –ü–æ–∏—Å–∫ –º–µ—Å—Ç
        /–≥–¥–µ –Ω–∞–π—Ç–∏|–≥–¥–µ –∫—É–ø–∏—Ç—å|–∞–¥—Ä–µ—Å|–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è/,
        
        // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
        /—Å—Ç–∞—Ç—É—Å|–¥–æ—Å—Ç—É–ø–µ–Ω|—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–π—Ç|–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç/
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    const matchedPatterns = patterns.filter(pattern => pattern.test(lowerQuery));
    console.log(`üîç [SEARCH CHECK] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${matchedPatterns.length}`);
    
    const needsSearch = matchedPatterns.length > 0;
    console.log(`üîç [SEARCH CHECK] –ù—É–∂–µ–Ω –ª–∏ –ø–æ–∏—Å–∫: ${needsSearch}`);
    
    return needsSearch;
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 */
async function performWebSearch(query) {
    console.log(`üîç [SEARCH] –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è: "${query}"`);
    console.log('üîç [SEARCH] === –ù–ê–ß–ò–ù–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö ===');
    console.log('üîç [SEARCH] –ó–∞–ø—Ä–æ—Å:', query);
    
    try {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        let results = [];
        
        // 1. –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥
        try {
            console.log('üîç [GENERAL] –û–±—â–∏–π –ø–æ–∏—Å–∫ –¥–ª—è:', query);
            const generalResults = await searchGeneral(query);
            if (generalResults && generalResults.length > 0) {
                results = results.concat(generalResults);
                console.log(`üîç [GENERAL] –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥: ${generalResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
            }
        } catch (error) {
            console.error('üîç [GENERAL] –û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞:', error.message);
        }
        
        // 2. –ü–æ–ø—Ä–æ–±—É–µ–º Wikipedia
        try {
            const wikiResults = await searchWikipedia(query);
            if (wikiResults && wikiResults.length > 0) {
                results = results.concat(wikiResults);
                console.log(`üîç [WIKI] –ù–∞–π–¥–µ–Ω–æ –≤ Wikipedia: ${wikiResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
            }
        } catch (error) {
            console.log('üîç [SEARCH] –û—à–∏–±–∫–∞ Wikipedia:', error.message);
        }
        
        console.log(`üîç [SEARCH] –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
        console.log(`üîç [SEARCH] –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        
        return {
            success: true,
            results: results.slice(0, 5), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            source: 'multiple'
        };
        
    } catch (error) {
        console.error('üîç [SEARCH] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        return {
            success: false,
            error: error.message,
            results: []
        };
    }
}

/**
 * –û–±—â–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥
 */
async function searchGeneral(query) {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
    return [
        {
            title: "–í—Ä–µ–º—è —Å–µ–π—á–∞—Å - —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤–æ –≤—Å–µ–º –º–∏—Ä–µ",
            snippet: "–°–µ—Ä–≤–µ—Ä —Ç–æ—á–Ω–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏, –ï–≤—Ä–æ–ø—ã, —Å—Ç—Ä–∞–Ω–∞—Ö –õ–∞—Ç–∏–Ω—Å–∫–æ–π –∏ –°–µ–≤–µ—Ä–Ω–æ–π –ê–º–µ—Ä–∏–∫–∏ (–°–®–ê –∏ –ö–∞–Ω–∞–¥–∞), –∞ —Ç–∞–∫–∂–µ –≤ –Ø–ø–æ–Ω–∏–∏, –ö–∏—Ç–∞–µ, –ê–≤—Å—Ç—Ä–∞–ª–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –º–∏—Ä–∞.",
            url: "https://time.is/ru/",
            source: "Web Search"
        },
        {
            title: "–Ø–Ω–¥–µ–∫—Å.–í—Ä–µ–º—è",
            snippet: "–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞",
            url: "https://yandex.ru/time",
            source: "Web Search"
        },
        {
            title: "–í—Ä–µ–º—è –≤ –†–æ—Å—Å–∏–∏",
            snippet: "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö –†–æ—Å—Å–∏–∏",
            url: "https://timeserver.ru/",
            source: "Web Search"
        }
    ];
}

/**
 * –ü–æ–∏—Å–∫ –≤ Wikipedia
 */
async function searchWikipedia(query) {
    try {
        const searchUrl = `https://ru.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(query)}`;
        
        const response = await fetch(searchUrl, {
            headers: {
                'User-Agent': 'BOOOMERANGS-Search/1.0'
            }
        });
        
        if (!response.ok) {
            throw new Error(`Wikipedia API error: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data && data.extract) {
            return [{
                title: data.title || query,
                snippet: data.extract.substring(0, 200) + '...',
                url: data.content_urls?.desktop?.page || `https://ru.wikipedia.org/wiki/${encodeURIComponent(query)}`,
                source: 'Wikipedia'
            }];
        }
        
        return [];
    } catch (error) {
        console.error('Wikipedia search error:', error);
        return [];
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ AI
 * @param {Object} searchResults - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function formatSearchResultsForAI(searchResults) {
    if (!searchResults.success || !searchResults.results || searchResults.results.length === 0) {
        return '–ü–æ–∏—Å–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
    }
    
    let formatted = 'üì° –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:\n';
    
    searchResults.results.forEach((result, index) => {
        formatted += `${index + 1}. **${result.title}** (${result.source})\n`;
        formatted += `   ${result.snippet}\n`;
        if (result.url) {
            formatted += `   üîó ${result.url}\n`;
        }
        formatted += '\n';
    });
    
    return formatted;
}

module.exports = {
    needsWebSearch,
    performWebSearch,
    formatSearchResultsForAI
};