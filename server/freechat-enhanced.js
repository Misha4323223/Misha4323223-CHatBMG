/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è FreeChat —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ChatFree –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ Phind –∏ Qwen
 */

const express = require('express');
const router = express.Router();
const fetch = require('node-fetch').default;

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
const g4fProvider = require('./g4f-provider');
const pythonProviderRoutes = require('./python_provider_routes');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –¥–ª—è ChatFree 
// –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ URL –Ω–∞ –º–∞–π 2025 –≥–æ–¥–∞
const CHATFREE_API_URL = 'https://chatgpt.ai/api/text/completions';

// –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ URL, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
const BACKUP_URLS = [
  // –ù–∞–∏–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (2025)
  'https://api.chat-free.ai/v1/chat/completions',
  'https://api.gpt4free.io/v1/chat/completions',
  'https://ai.fakeopen.com/api/conversation',
  // –í—Ç–æ—Ä–∏—á–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  'https://api.free-chat-gpt.com/v1/chat/completions',
  'https://ai-api.openai-smart.com/v1/completions'
];

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
function getRandomUserAgent() {
  const userAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15'
  ];
  return userAgents[Math.floor(Math.random() * userAgents.length)];
}

// –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 * @param {Object} obj - –û–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns {string|null} - –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ null
 */
function findResponseInObject(obj) {
  // –ú–∞—Å—Å–∏–≤ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç–≤–µ—Ç
  const possibleFields = ['text', 'content', 'message', 'response', 
                          'answer', 'reply', 'generated_text', 'completion',
                          'output', 'result', 'generated_content'];
  
  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
  for (const field of possibleFields) {
    if (obj[field] && typeof obj[field] === 'string' && obj[field].length > 20) {
      return obj[field];
    }
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –µ–≥–æ –ø–æ–ª—è—Ö
  for (const key in obj) {
    if (obj[key] && typeof obj[key] === 'object') {
      const found = findResponseInObject(obj[key]);
      if (found) return found;
    }
  }
  
  return null;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatFree —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param {string} message - –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç API
 */
async function getChatFreeEnhancedResponse(message, options = {}) {
  const model = options.model || 'gpt-3.5-turbo';
  const systemPrompt = options.systemPrompt || '–í—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ—á–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.';
  const temperature = options.temperature || 0.7;
  
  // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API
  
  // 1. –§–æ—Ä–º–∞—Ç –Ω–æ–≤–æ–≥–æ API ChatGPT.ai
  const requestBodyChatgptAI = {
    message: message,
    context: systemPrompt,
    web_access: false,
    stream: false
  };
  
  // 2. –§–æ—Ä–º–∞—Ç OpenAI API (–Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
  const requestBodyOpenAI = {
    model: model,
    messages: [
      { role: "system", content: systemPrompt },
      { role: "user", content: message }
    ],
    temperature: temperature,
    max_tokens: 2000,
    stream: false
  };
  
  // 3. –§–æ—Ä–º–∞—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ API
  const requestBodyAlternative = {
    prompt: `${systemPrompt}\n\nUser: ${message}\nAssistant:`,
    max_tokens: 2000,
    temperature: temperature,
    top_p: 1.0,
    presence_penalty: 0.0,
    frequency_penalty: 0.0
  };
  
  // 4. –§–æ—Ä–º–∞—Ç FakeOpen API (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å ChatGPT)
  const requestBodyFakeOpen = {
    model: model,
    conversation: [{
      role: "system",
      content: systemPrompt
    }, {
      role: "user",
      content: message
    }],
    temperature: temperature
  };
  
  // 1. –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π ChatFree API
  try {
    console.log(`FreeChat Enhanced: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API...`);
    
    const response = await fetch(CHATFREE_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': getRandomUserAgent(),
        'Accept': 'application/json',
        'Origin': 'https://chatgpt.ai',
        'Referer': 'https://chatgpt.ai/',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify(requestBodyChatgptAI),
      timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });
    
    if (response.ok) {
      const data = await response.json();
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ChatFree API`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
      if (data.choices && data.choices.length && data.choices[0].message) {
        // OpenAI-–ø–æ–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return {
          success: true,
          response: data.choices[0].message.content,
          provider: 'ChatFree',
          model: data.model || model,
          backupInfo: "üîµ ChatFree –æ—Ç–≤–µ—á–∞–µ—Ç"
        };
      } else if (data.message || data.response) {
        // –§–æ—Ä–º–∞—Ç ChatFree
        return {
          success: true,
          response: data.message || data.response,
          provider: 'ChatFree',
          model: data.model || "ChatFree API",
          backupInfo: "üîµ ChatFree –æ—Ç–≤–µ—á–∞–µ—Ç"
        };
      }
    }
    
    console.log(`‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π ChatFree API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ URL...`);
  } catch (error) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ChatFree API: ${error.message}, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ URL...`);
  }
  
  // 2. –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ URL –¥–ª—è ChatFree
  for (const backupUrl of BACKUP_URLS) {
    try {
      console.log(`FreeChat Enhanced: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É URL ${backupUrl}...`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL
      let requestBody;
      let headers = {
        'Content-Type': 'application/json',
        'User-Agent': getRandomUserAgent(),
        'Accept': 'application/json'
      };
      
      if (backupUrl.includes('chat-gpt.org') || backupUrl.includes('chat-gpt-ai.org')) {
        // –§–æ—Ä–º–∞—Ç text-completion
        requestBody = requestBodyTextCompletion;
        // –î–æ–±–∞–≤–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä—ã –¥–ª—è —Å–∞–π—Ç–æ–≤
        headers['Origin'] = backupUrl.includes('chat-gpt.org') ? 'https://chat-gpt.org' : 'https://chat-gpt-ai.org';
        headers['Referer'] = backupUrl.includes('chat-gpt.org') ? 'https://chat-gpt.org/' : 'https://chat-gpt-ai.org/';
      } else if (backupUrl.includes('chatgpt4online') || backupUrl.includes('gpt4online')) {
        // OpenAI —Ñ–æ—Ä–º–∞—Ç
        requestBody = requestBodyOpenAI;
        // –î–æ–±–∞–≤–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä—ã –¥–ª—è —Å–∞–π—Ç–æ–≤
        headers['Origin'] = backupUrl.includes('chatgpt4online') ? 'https://chatgpt4online.org' : 'https://gpt4online.net';
        headers['Referer'] = backupUrl.includes('chatgpt4online') ? 'https://chatgpt4online.org/' : 'https://gpt4online.net/';
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
        requestBody = requestBodySimple;
      }
      
      const response = await fetch(backupUrl, {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(requestBody),
        timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      if (response.ok) {
        const data = await response.json();
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ URL ${backupUrl}`);
        console.log(`–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:`, JSON.stringify(data).slice(0, 100));
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        if (data.choices && data.choices.length && data.choices[0].message) {
          // OpenAI-–ø–æ–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
          return {
            success: true,
            response: data.choices[0].message.content,
            provider: 'ChatFree',
            model: data.model || "ChatFree Advanced",
            backupInfo: "üîµ ChatFree –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ GPT-–ø–æ–¥–æ–±–Ω—É—é –º–æ–¥–µ–ª—å"
          };
        } else if (data.message || data.response) {
          // –§–æ—Ä–º–∞—Ç ChatFree
          return {
            success: true,
            response: data.message || data.response,
            provider: 'ChatFree',
            model: data.model || "ChatFree API",
            backupInfo: "üîµ ChatFree –æ—Ç–≤–µ—á–∞–µ—Ç"
          };
        } else if (data.content) {
          // –ï—â–µ –æ–¥–∏–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
          return {
            success: true, 
            response: data.content,
            provider: 'ChatFree',
            model: data.model || "ChatFree API",
            backupInfo: "üîµ ChatFree –æ—Ç–≤–µ—á–∞–µ—Ç"
          };
        } else if (data.text || data.generated_text || data.completion) {
          // –§–æ—Ä–º–∞—Ç text-completion
          const responseText = data.text || data.generated_text || data.completion;
          return {
            success: true,
            response: responseText,
            provider: 'ChatFree',
            model: data.model || "ChatFree Text",
            backupInfo: "üîµ ChatFree –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –º–æ–¥–µ–ª—å"
          };
        } else if (data.answer || data.reply) {
          // –ï—â–µ –æ–¥–∏–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
          return {
            success: true, 
            response: data.answer || data.reply,
            provider: 'ChatFree',
            model: "ChatFree AI",
            backupInfo: "üîµ ChatFree –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
          };
        } else if (typeof data === 'string') {
          // –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
          return {
            success: true,
            response: data,
            provider: 'ChatFree',
            model: "ChatFree Text",
            backupInfo: "üîµ ChatFree –æ—Ç–≤–µ—á–∞–µ—Ç"
          };
        } else {
          // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç–µ
          const possibleResponse = findResponseInObject(data);
          if (possibleResponse) {
            return {
              success: true,
              response: possibleResponse,
              provider: 'ChatFree',
              model: "ChatFree AI",
              backupInfo: "üîµ ChatFree –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å"
            };
          }
        }
      }
      
      console.log(`‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω—ã–π URL ${backupUrl} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ URL ${backupUrl}: ${error.message}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
    await delay(1000);
  }
  
  // 3. –ï—Å–ª–∏ ChatFree –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ URL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–±—É–µ–º Phind —á–µ—Ä–µ–∑ Python G4F
  try {
    console.log(`FreeChat Enhanced: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Phind —á–µ—Ä–µ–∑ Python G4F...`);
    
    const phindResponse = await pythonProviderRoutes.callPythonAI(message, 'Phind');
    
    if (phindResponse) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Phind —á–µ—Ä–µ–∑ Python G4F`);
      return {
        success: true,
        response: phindResponse,
        provider: 'ChatFree',
        model: 'Phind AI',
        backupInfo: "üîç ChatFree –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä Phind AI."
      };
    }
  } catch (phindError) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Phind: ${phindError.message}`);
  }
  
  // 4. –ï—Å–ª–∏ Phind –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º Qwen —á–µ—Ä–µ–∑ Python G4F
  try {
    console.log(`FreeChat Enhanced: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Qwen —á–µ—Ä–µ–∑ Python G4F...`);
    
    const qwenResponse = await pythonProviderRoutes.callPythonAI(message, 'Qwen_Qwen_2_5_Max');
    
    if (qwenResponse) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Qwen —á–µ—Ä–µ–∑ Python G4F`);
      return {
        success: true,
        response: qwenResponse,
        provider: 'ChatFree',
        model: 'Qwen 2.5 Max',
        backupInfo: "üöÄ ChatFree –∏ Phind –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä Qwen 2.5 Max."
      };
    }
  } catch (qwenError) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Qwen: ${qwenError.message}`);
  }
  
  // 5. –ö–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º G4F —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  try {
    console.log(`FreeChat Enhanced: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ G4F —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...`);
    
    const g4fResponse = await g4fProvider.getResponse(message);
    
    if (g4fResponse && g4fResponse.response) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç G4F —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º ${g4fResponse.provider || 'Unknown'}`);
      return {
        success: true,
        response: g4fResponse.response,
        provider: 'ChatFree',
        model: g4fResponse.provider ? `${g4fResponse.provider}` : 'AI Assistant',
        backupInfo: "‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä G4F."
      };
    }
  } catch (g4fError) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ G4F: ${g4fError.message}`);
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
  return {
    success: false,
    error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤',
    provider: 'FreeChat Enhanced',
    model: model
  };
}

// API –º–∞—Ä—à—Ä—É—Ç
router.post('/chat', async (req, res) => {
  const { message, systemPrompt, model, temperature } = req.body;
  
  if (!message) {
    return res.status(400).json({
      success: false,
      error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
    });
  }
  
  try {
    const response = await getChatFreeEnhancedResponse(message, {
      systemPrompt,
      model,
      temperature
    });
    
    res.json(response);
  } catch (error) {
    res.status(500).json({
      success: false,
      error: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ChatFree API
router.get('/status', async (req, res) => {
  try {
    const isAvailable = await checkChatFreeAvailability();
    
    res.json({
      success: true,
      status: isAvailable ? 'available' : 'unavailable'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ChatFree API
async function checkChatFreeAvailability() {
  try {
    const response = await fetch(CHATFREE_API_URL, {
      method: 'GET',
      headers: {
        'User-Agent': getRandomUserAgent()
      },
      timeout: 5000
    });
    
    return response.status < 500; // –°—á–∏—Ç–∞–µ–º API –¥–æ—Å—Ç—É–ø–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ChatFree API: ${error.message}`);
    return false;
  }
}

module.exports = router;
module.exports.getChatFreeEnhancedResponse = getChatFreeEnhancedResponse;
module.exports.checkChatFreeAvailability = checkChatFreeAvailability;