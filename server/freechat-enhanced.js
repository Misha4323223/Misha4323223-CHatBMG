/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è FreeChat —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ChatFree –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ Phind –∏ Qwen
 */

const express = require('express');
const router = express.Router();
const fetch = require('node-fetch').default;

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
const g4fProvider = require('./g4f-provider');
const pythonProviderRoutes = require('./python_provider_routes');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –¥–ª—è ChatFree 
// –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ URL –Ω–∞ –º–∞–π 2025 –≥–æ–¥–∞
const CHATFREE_API_URL = 'https://chatgpt.ai/api/text/completions';

// –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ URL, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
const BACKUP_URLS = [
  // –ù–∞–∏–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (2025)
  'https://api.chat-free.ai/v1/chat/completions',
  'https://api.gpt4free.io/v1/chat/completions',
  'https://ai.fakeopen.com/api/conversation',
  // –í—Ç–æ—Ä–∏—á–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  'https://api.free-chat-gpt.com/v1/chat/completions',
  'https://ai-api.openai-smart.com/v1/completions'
];

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
function getRandomUserAgent() {
  const userAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15'
  ];
  return userAgents[Math.floor(Math.random() * userAgents.length)];
}

// –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 * @param {Object} obj - –û–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns {string|null} - –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ null
 */
function findResponseInObject(obj) {
  // –ú–∞—Å—Å–∏–≤ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç–≤–µ—Ç
  const possibleFields = ['text', 'content', 'message', 'response', 
                          'answer', 'reply', 'generated_text', 'completion',
                          'output', 'result', 'generated_content'];
  
  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
  for (const field of possibleFields) {
    if (obj[field] && typeof obj[field] === 'string' && obj[field].length > 20) {
      return obj[field];
    }
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –µ–≥–æ –ø–æ–ª—è—Ö
  for (const key in obj) {
    if (obj[key] && typeof obj[key] === 'object') {
      const found = findResponseInObject(obj[key]);
      if (found) return found;
    }
  }
  
  return null;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatFree —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param {string} message - –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç API
 */
async function getChatFreeEnhancedResponse(message, options = {}) {
  const model = options.model || 'gpt-3.5-turbo';
  const systemPrompt = options.systemPrompt || '–í—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ—á–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.';
  const temperature = options.temperature || 0.7;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —á–µ—Ä–µ–∑ Python G4F
  
  // 1. –ü—Ä–æ–±—É–µ–º Free2GPT - –æ–±—ã—á–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  try {
    console.log(`FreeChat Enhanced: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Python G4F —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º Free2GPT...`);
    
    const response = await fetch("http://localhost:5004/python/chat?provider=Free2GPT", {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        message: message, 
        system_prompt: systemPrompt 
      }),
      timeout: 25000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    });
    
    if (response.ok) {
      const data = await response.json();
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Python G4F —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º Free2GPT`);
      console.log(`–†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${data.provider || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      
      if (data && data.response) {
        return {
          success: true,
          response: data.response,
          provider: 'ChatFree',
          model: data.provider || "Free2GPT",
          backupInfo: data.provider === 'Free2GPT' ? 
            "üîµ FreeChat –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä Free2GPT" : 
            `üîÑ FreeChat –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${data.provider || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`
        };
      }
    }
    
    console.log(`‚ö†Ô∏è Free2GPT –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}, –ø—Ä–æ–±—É–µ–º FreeGpt...`);
  } catch (error) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Free2GPT: ${error.message}`);
  }
  
  // 2. –ü—Ä–æ–±—É–µ–º FreeGpt –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
  try {
    console.log(`FreeChat Enhanced: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Python G4F —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º FreeGpt...`);
    
    const response = await fetch("http://localhost:5004/python/chat?provider=FreeGpt", {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        message: message, 
        system_prompt: systemPrompt 
      }),
      timeout: 25000
    });
    
    if (response.ok) {
      const data = await response.json();
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Python G4F —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º FreeGpt`);
      console.log(`–†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${data.provider || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      
      if (data && data.response) {
        return {
          success: true,
          response: data.response,
          provider: 'ChatFree',
          model: data.provider || "FreeGpt",
          backupInfo: data.provider === 'FreeGpt' ? 
            "üîµ FreeChat –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä FreeGpt" : 
            `üîÑ FreeChat –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${data.provider || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`
        };
      }
    }
    
    console.log(`‚ö†Ô∏è FreeGpt –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}, –ø—Ä–æ–±—É–µ–º ChatGpt...`);
  } catch (error) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ FreeGpt: ${error.message}`);
  }
  
  // 3. –ü—Ä–æ–±—É–µ–º ChatGpt –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ g4f
  try {
    console.log(`FreeChat Enhanced: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Python G4F —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º ChatGpt...`);
    
    const response = await fetch("http://localhost:5004/python/chat?provider=ChatGpt", {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        message: message, 
        system_prompt: systemPrompt 
      }),
      timeout: 25000
    });
    
    if (response.ok) {
      const data = await response.json();
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Python G4F —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º ChatGpt`);
      console.log(`–†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${data.provider || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      
      if (data && data.response) {
        return {
          success: true,
          response: data.response,
          provider: 'ChatFree',
          model: data.provider || "ChatGpt",
          backupInfo: data.provider === 'ChatGpt' ? 
            "üîµ FreeChat –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä ChatGpt" : 
            `üîÑ FreeChat –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${data.provider || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`
        };
      }
    }
    
    console.log(`‚ö†Ô∏è ChatGpt –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}, –ø—Ä–æ–±—É–µ–º Phind...`);
  } catch (error) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ ChatGpt: ${error.message}`);
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä Phind 
  try {
    console.log(`FreeChat Enhanced: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Python G4F —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º Phind...`);
    
    const response = await fetch("http://localhost:5004/python/chat?provider=Phind", {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        message: message, 
        system_prompt: systemPrompt 
      }),
      timeout: 30000 // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è Phind
    });
    
    if (response.ok) {
      const data = await response.json();
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Python G4F —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º Phind`);
      console.log(`–†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${data.provider || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      
      if (data && data.response) {
        return {
          success: true,
          response: data.response,
          provider: 'ChatFree',
          model: data.provider || "Phind AI",
          backupInfo: data.provider === 'Phind' ? 
            "üîµ FreeChat –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä Phind" : 
            `üîÑ FreeChat –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${data.provider || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`
        };
      }
    }
    
    console.log(`‚ö†Ô∏è Phind –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}, –ø—Ä–æ–±—É–µ–º Qwen...`);
  } catch (error) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Phind: ${error.message}`);
  }
  
  // 5. –ù–∞–¥–µ–∂–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä Qwen
  try {
    console.log(`FreeChat Enhanced: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Python G4F —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º Qwen...`);
    
    const response = await fetch("http://localhost:5004/python/chat?provider=Qwen_Qwen_2_5_Max", {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        message: message, 
        system_prompt: systemPrompt 
      }),
      timeout: 30000
    });
    
    if (response.ok) {
      const data = await response.json();
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Python G4F —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º Qwen`);
      console.log(`–†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${data.provider || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      
      if (data && data.response) {
        return {
          success: true,
          response: data.response,
          provider: 'ChatFree',
          model: data.provider || "Qwen 2.5",
          backupInfo: "üöÄ FreeChat –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä Qwen 2.5"
        };
      }
    }
    
    console.log(`‚ö†Ô∏è Qwen –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä...`);
  } catch (error) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Qwen: ${error.message}`);
  }
  
  // 6. –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  try {
    console.log(`FreeChat Enhanced: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Python G4F —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...`);
    
    // –ó–∞–ø—Ä–æ—Å –∫ Python G4F –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    const response = await fetch("http://localhost:5004/python/chat", {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        message: message, 
        system_prompt: systemPrompt 
      }),
      timeout: 30000
    });
    
    if (response.ok) {
      const data = await response.json();
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Python G4F —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º`);
      console.log(`–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${data.provider || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      
      if (data && data.response) {
        return {
          success: true,
          response: data.response,
          provider: 'ChatFree',
          model: data.provider ? `${data.provider}` : 'AI Assistant',
          backupInfo: `‚ö†Ô∏è FreeChat –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${data.provider || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`
        };
      }
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞: ${error.message}`);
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
  return {
    success: false,
    error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤',
    provider: 'FreeChat Enhanced',
    model: model
  };
}

// API –º–∞—Ä—à—Ä—É—Ç
router.post('/chat', async (req, res) => {
  const { message, systemPrompt, model, temperature } = req.body;
  
  if (!message) {
    return res.status(400).json({
      success: false,
      error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
    });
  }
  
  try {
    const response = await getChatFreeEnhancedResponse(message, {
      systemPrompt,
      model,
      temperature
    });
    
    res.json(response);
  } catch (error) {
    res.status(500).json({
      success: false,
      error: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ChatFree API
router.get('/status', async (req, res) => {
  try {
    const isAvailable = await checkChatFreeAvailability();
    
    res.json({
      success: true,
      status: isAvailable ? 'available' : 'unavailable'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ChatFree API
async function checkChatFreeAvailability() {
  try {
    const response = await fetch(CHATFREE_API_URL, {
      method: 'GET',
      headers: {
        'User-Agent': getRandomUserAgent()
      },
      timeout: 5000
    });
    
    return response.status < 500; // –°—á–∏—Ç–∞–µ–º API –¥–æ—Å—Ç—É–ø–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ChatFree API: ${error.message}`);
    return false;
  }
}

module.exports = router;
module.exports.getChatFreeEnhancedResponse = getChatFreeEnhancedResponse;
module.exports.checkChatFreeAvailability = checkChatFreeAvailability;