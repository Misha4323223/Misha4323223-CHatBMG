"""
BOOOMERANGS Chat Handler
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞ —Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
"""

import time
import json
import logging
import requests
import traceback
from typing import Dict, List, Optional, Union, Generator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ChatHandler:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º"""
    
    def __init__(self):
        self.python_g4f_url = "http://localhost:5004"
        self.flask_stream_url = "http://localhost:5001"
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á
        self.primary_providers = [
            "Qwen_Qwen_2_5_Max",
            "Gemini", 
            "GeminiPro",
            "DeepInfra",
            "You"
        ]
        
        self.fallback_providers = [
            "Free2GPT",
            "FreeGpt", 
            "ChatGpt",
            "OpenaiChat"
        ]
        
        # –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
        self.coding_providers = ["DeepSeek", "CodeLinkAva", "Blackbox"]
        self.creative_providers = ["Claude", "Anthropic", "ChatGpt"]
        self.search_providers = ["Perplexity", "You", "Phind"]

    def get_chat_response(self, message: str, provider: str = None, use_stream: bool = False, 
                         timeout: int = 30, context: str = None) -> Dict:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            provider: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            use_stream: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        start_time = time.time()
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏
            if not provider:
                provider = self._select_best_provider(message)
            
            logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É: {provider}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            full_message = self._prepare_message_with_context(message, context)
            
            if use_stream:
                return self._get_streaming_response(full_message, provider, timeout)
            else:
                return self._get_direct_response(full_message, provider, timeout)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_chat_response: {str(e)}")
            return self._get_fallback_response(message, str(e))

    def _select_best_provider(self, message: str) -> str:
        """–£–º–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        message_lower = message.lower()
        
        # –î–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if any(word in message_lower for word in ['–Ω–æ–≤–æ—Å—Ç–∏', '—Å–µ–≥–æ–¥–Ω—è', '–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ', '–ø–æ–∏—Å–∫', '–Ω–∞–π–¥–∏']):
            return "You"  # –•–æ—Ä–æ—à–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        # –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        if any(word in message_lower for word in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '—Ñ—É–Ω–∫—Ü–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º', 'bug', 'debug']):
            return "DeepSeek"
            
        # –î–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        if any(word in message_lower for word in ['—Å—Ç–∏—Ö', '—Ä–∞—Å—Å–∫–∞–∑', '–∫—Ä–µ–∞—Ç–∏–≤', '–∏–¥–µ—è', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ']):
            return "Claude"
            
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ª—É—á—à–∏–π –æ–±—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        return "Qwen_Qwen_2_5_Max"

    def _prepare_message_with_context(self, message: str, context: str = None) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        if context:
            return f"{context}\n\n–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {message}"
        return message

    def _get_direct_response(self, message: str, provider: str, timeout: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        
        try:
            # –ü—Ä–æ–±—É–µ–º Python G4F API
            response = requests.post(
                f"{self.python_g4f_url}/python/chat",
                json={
                    "message": message,
                    "provider": provider,
                    "timeout": timeout * 1000
                },
                timeout=timeout
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
                if self._is_valid_response(result.get('response', '')):
                    return {
                        "success": True,
                        "response": result.get('response'),
                        "provider": result.get('provider', provider),
                        "model": result.get('model', 'unknown'),
                        "elapsed": result.get('elapsed', 0)
                    }
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Python G4F –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª: {str(e)}")
            
        # Fallback –Ω–∞ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        return self._try_fallback_providers(message, timeout)

    def _get_streaming_response(self, message: str, provider: str, timeout: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        
        try:
            response = requests.post(
                f"{self.flask_stream_url}/stream",
                json={
                    "message": message,
                    "provider": provider,
                    "timeout": timeout * 1000
                },
                stream=True,
                timeout=timeout
            )
            
            if response.status_code == 200:
                return {
                    "success": True,
                    "streaming": True,
                    "stream": response,
                    "provider": provider
                }
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∏–º–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}")
            
        # Fallback –Ω–∞ –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç
        return self._get_direct_response(message, provider, timeout)

    def _try_fallback_providers(self, message: str, timeout: int) -> Dict:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        
        for provider in self.fallback_providers:
            try:
                logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
                
                response = requests.post(
                    f"{self.python_g4f_url}/python/chat",
                    json={
                        "message": message,
                        "provider": provider,
                        "timeout": timeout * 1000
                    },
                    timeout=timeout
                )
                
                if response.status_code == 200:
                    result = response.json()
                    if self._is_valid_response(result.get('response', '')):
                        logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä {provider} –æ—Ç–≤–µ—Ç–∏–ª!")
                        return {
                            "success": True,
                            "response": result.get('response'),
                            "provider": provider,
                            "model": result.get('model', 'fallback'),
                            "elapsed": result.get('elapsed', 0)
                        }
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª: {str(e)}")
                continue
                
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        return self._get_demo_response(message)

    def _is_valid_response(self, response: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        
        if not response or len(response.strip()) < 3:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ HTML-–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if "<html" in response.lower() or "<!doctype" in response.lower():
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        error_indicators = ['error', 'failed', 'blocked', 'unavailable', 'timeout']
        if any(indicator in response.lower() for indicator in error_indicators):
            return False
            
        return True

    def _get_demo_response(self, message: str) -> Dict:
        """–î–µ–º–æ-–æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"""
        
        demo_responses = [
            "–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?",
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.",
            "–Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
            "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞–º–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        demo_text = demo_responses[len(message) % len(demo_responses)]
        
        return {
            "success": True,
            "response": demo_text,
            "provider": "BOOOMERANGS-Demo",
            "model": "demo-mode",
            "elapsed": 0.5
        }

    def _get_fallback_response(self, message: str, error: str) -> Dict:
        """Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö"""
        
        return {
            "success": False,
            "response": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
            "provider": "BOOOMERANGS-Error",
            "model": "error-mode",
            "elapsed": 0,
            "error": error
        }

    def get_available_providers(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        
        try:
            response = requests.get(f"{self.python_g4f_url}/providers", timeout=5)
            if response.status_code == 200:
                return response.json().get('providers', [])
        except:
            pass
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
        return self.primary_providers + self.fallback_providers

    def test_provider(self, provider: str) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        
        test_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        return self.get_chat_response(test_message, provider=provider, timeout=10)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
chat_handler = ChatHandler()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_chat_response(message: str, provider: str = None, **kwargs) -> Dict:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI"""
    return chat_handler.get_chat_response(message, provider, **kwargs)

def get_streaming_response(message: str, provider: str = None, **kwargs) -> Dict:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    return chat_handler.get_chat_response(message, provider, use_stream=True, **kwargs)

def select_best_provider(message: str) -> str:
    """–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return chat_handler._select_best_provider(message)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º ChatHandler...")
    
    handler = ChatHandler()
    
    # –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    result = handler.get_chat_response("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    # –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    provider = handler._select_best_provider("–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python")
    print(f"–õ—É—á—à–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–æ–¥–∞: {provider}")
    
    print("‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")