#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∏–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""

import g4f
import logging
import time
import json
from flask import Flask, request, jsonify, Response
from flask_cors import CORS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

app = Flask(__name__)
CORS(app)

# –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
FREE_PROVIDERS = ['FreeGpt', 'You', 'Blackbox', 'Liaobots', 'DDG', 'Phind']

def get_ai_response(message, provider_name=None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    """
    if not provider_name or provider_name not in FREE_PROVIDERS:
        provider_name = 'FreeGpt'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π
    
    try:
        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É: {provider_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        provider = getattr(g4f.Provider, provider_name)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        response = g4f.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": message}],
            provider=provider
        )
        
        result = str(response).strip()
        
        if result and len(result) > 10:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π
            return {
                "success": True,
                "response": result,
                "provider": provider_name,
                "model": "gpt-3.5-turbo"
            }
        else:
            raise Exception("–ü—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}: {str(e)}")
        
        # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        for backup_provider in FREE_PROVIDERS:
            if backup_provider != provider_name:
                try:
                    logging.info(f"–ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {backup_provider}")
                    provider = getattr(g4f.Provider, backup_provider)
                    response = g4f.ChatCompletion.create(
                        model="gpt-3.5-turbo",
                        messages=[{"role": "user", "content": message}],
                        provider=provider
                    )
                    result = str(response).strip()
                    if result and len(result) > 10:
                        return {
                            "success": True,
                            "response": result,
                            "provider": f"{backup_provider}_backup",
                            "model": "gpt-3.5-turbo"
                        }
                except Exception as backup_error:
                    logging.error(f"–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä {backup_provider} —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {str(backup_error)}")
                    continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–º–Ω—ã–π fallback
        return {
            "success": False,
            "response": f"–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI —Å–µ—Ä–≤–∏—Å–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä.",
            "provider": "fallback",
            "model": "demo",
            "error": str(e)
        }

@app.route('/')
def index():
    return "BOOOMERANGS AI Provider —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: " + ", ".join(FREE_PROVIDERS)

@app.route('/python/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.json or {}
        message = data.get('message', '').strip()
        provider = data.get('provider', 'FreeGpt')
        
        if not message:
            return jsonify({"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        result = get_ai_response(message, provider)
        return jsonify(result)
        
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return jsonify({
            "error": str(e),
            "response": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
            "provider": "error"
        }), 500

@app.route('/python/test', methods=['POST'])
def test():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    try:
        data = request.json or {}
        message = data.get('message', '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?')
        
        result = get_ai_response(message, 'FreeGpt')
        return jsonify(result)
        
    except Exception as e:
        return jsonify({
            "error": str(e),
            "response": f"–¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}",
            "provider": "test-error"
        }), 500

@app.route('/providers', methods=['GET'])
def list_providers():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    return jsonify({
        "free_providers": FREE_PROVIDERS,
        "total": len(FREE_PROVIDERS),
        "status": "ready"
    })

if __name__ == '__main__':
    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å {len(FREE_PROVIDERS)} –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏")
    app.run(host='0.0.0.0', port=5006, debug=False)