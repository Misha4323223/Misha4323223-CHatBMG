// G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ AI –º–æ–¥–µ–ª—è–º
import fetch from 'node-fetch';

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ë–ï–°–ü–õ–ê–¢–ù–´–• –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–±–µ–∑ API –∫–ª—é—á–µ–π)
const PROVIDERS = {
  QWEN: 'qwen',          // Qwen AI —á–µ—Ä–µ–∑ HuggingFace
  PHIND: 'phind',        // Phind –¥–ª—è –∫–æ–¥–∞ –∏ –ø–æ–∏—Å–∫–∞
  GEMINI: 'gemini',      // Gemini —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API
  LIAOBOTS: 'liaobots',  // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π GPT –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  YOU: 'you',            // You.com –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
  DIFY: 'dify'           // Dify AI –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
};

// –ú–æ–¥–µ–ª–∏ –ë–ï–°–ü–õ–ê–¢–ù–´–• –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
const PROVIDER_MODELS = {
  [PROVIDERS.QWEN]: 'qwen-2.5-72b',
  [PROVIDERS.PHIND]: 'phind-code-search',
  [PROVIDERS.GEMINI]: 'gemini-pro-free',
  [PROVIDERS.LIAOBOTS]: 'gpt-3.5-turbo',
  [PROVIDERS.YOU]: 'you-chat',
  [PROVIDERS.DIFY]: 'dify-chat'
};

// –¢–æ–ª—å–∫–æ –ë–ï–°–ü–õ–ê–¢–ù–´–ï –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (–Ω–∏–∫–∞–∫–∏—Ö API –∫–ª—é—á–µ–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
const KEY_REQUIRED_PROVIDERS = [];

// –ü–æ—Ä—è–¥–æ–∫ –ë–ï–°–ü–õ–ê–¢–ù–´–• –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ Qwen –∏ Phind
const PROVIDER_PRIORITY = [
  PROVIDERS.QWEN,        // ü•á –ü–†–ò–û–†–ò–¢–ï–¢: Qwen AI - –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  PROVIDERS.PHIND,       // ü•à –ü–†–ò–û–†–ò–¢–ï–¢: Phind - –¥–ª—è –∫–æ–¥–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  PROVIDERS.LIAOBOTS,    // –†–µ–∑–µ—Ä–≤–Ω—ã–π GPT –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  PROVIDERS.YOU,         // You.com –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
  PROVIDERS.DIFY,        // Dify AI –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
  PROVIDERS.GEMINI       // Gemini (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)
  // PROVIDERS.CHATGPT,   // –¢—Ä–µ–±—É–µ—Ç—Å—è access_token
  // –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:
  // PROVIDERS.PHIND,     // –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ Replit
  // PROVIDERS.LIAOBOTS,  // –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ Replit
  // PROVIDERS.QWEN,      // –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π
  // PROVIDERS.DIFY       // –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
function getProviders() {
  return PROVIDER_PRIORITY;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
function getModelForProvider(provider, requestedModel) {
  if (!provider) return null;
  
  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
  if (requestedModel) return requestedModel;
  
  // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  return PROVIDER_MODELS[provider.toLowerCase()] || null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
async function checkProviderAvailability(provider) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å
    switch (provider.toLowerCase()) {
      case PROVIDERS.QWEN:
        const qwenResponse = await fetch('https://api.lingyiwanwu.com/v1/models', {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' },
          timeout: 5000
        });
        return qwenResponse.ok;
        
      case PROVIDERS.DIFY:
        const difyResponse = await fetch('https://api.dify.ai/v1/health', {
          method: 'GET',
          timeout: 5000
        });
        return difyResponse.ok;
        
      default:
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
        return true;
    }
  } catch (error) {
    console.error(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏ —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º –ø–µ—Ä–µ–±–æ—Ä–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
async function getResponse(message, options = {}) {
  const {
    provider = null, // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ–º –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    model = null,
    temperature = 0.7,
    maxTokens = 800,
    maxRetries = 2,
    messages = null, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{ role: 'user', content: '...' }]
  } = options;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (!message && (!messages || messages.length === 0)) {
    throw new Error('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const chatMessages = messages || [{ role: 'user', content: message }];

  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
  if (provider) {
    const selectedModel = getModelForProvider(provider, model);
    return tryProviderWithRetries(provider, chatMessages, { 
      model: selectedModel, 
      temperature, 
      maxTokens, 
      maxRetries 
    });
  }
  
  // üéØ SMART ROUTING: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
  let providersToTry = [];
  const query = (message || chatMessages[chatMessages.length - 1]?.content || '').toLowerCase();
  
  // üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  if (query.includes('–∫–æ–¥') || query.includes('–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ') || query.includes('javascript') || 
      query.includes('python') || query.includes('html') || query.includes('css') || 
      query.includes('react') || query.includes('function') || query.includes('api') ||
      query.includes('–∞–ª–≥–æ—Ä–∏—Ç–º') || query.includes('–º–∞—Å—Å–∏–≤') || query.includes('–æ–±—ä–µ–∫—Ç')) {
    // –î–ª—è –∫–æ–¥–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç PHIND
    console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç PHIND');
    providersToTry = [PROVIDERS.PHIND, PROVIDERS.QWEN, ...PROVIDER_PRIORITY.slice(2)];
  } else {
    // –î–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç QWEN
    console.log('üí¨ –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç QWEN');
    providersToTry = [...PROVIDER_PRIORITY]; // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
  }
  let lastError = null;
  let successfulProviders = [];
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  for (const currentProvider of providersToTry) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      const isAvailable = await checkProviderAvailability(currentProvider);
      if (!isAvailable) {
        console.log(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${currentProvider} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      const selectedModel = getModelForProvider(currentProvider, model);
      if (!selectedModel) {
        console.log(`–î–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${currentProvider} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –º–æ–¥–µ–ª—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      console.log(`–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${currentProvider} —Å –º–æ–¥–µ–ª—å—é ${selectedModel}...`);
      const result = await tryProviderWithRetries(currentProvider, chatMessages, { 
        model: selectedModel, 
        temperature, 
        maxTokens,
        maxRetries: 1 // –î–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 1 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      successfulProviders.push(currentProvider);
      
      return {
        ...result,
        successfulProviders,
        attemptedProviders: [...successfulProviders]
      };
    } catch (err) {
      lastError = err;
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${currentProvider}:`, err.message);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${lastError ? lastError.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –Ω–∞ –æ–¥–Ω–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
async function tryProviderWithRetries(provider, messages, options) {
  const { model, temperature, maxTokens, maxRetries } = options;
  
  // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  let handler;
  switch (provider.toLowerCase()) {
    case PROVIDERS.QWEN:
      handler = handleQwenProvider;
      break;
    case PROVIDERS.DIFY:
      handler = handleDifyProvider;
      break;
    case PROVIDERS.LIAOBOTS:
      handler = handleLiaobotsProvider;
      break;
    case PROVIDERS.OPENROUTER:
      handler = handleOpenRouterProvider;
      break;
    case PROVIDERS.PHIND:
      handler = handlePhindProvider;
      break;
    case PROVIDERS.PERPLEXITY:
      handler = handlePerplexityProvider;
      break;
    case PROVIDERS.AICHAT:
      handler = handleAIChatProvider;
      break;
    case PROVIDERS.GEMINI:
      handler = handleGeminiProvider;
      break;
    case PROVIDERS.GIGA:
      handler = handleGigaChatProvider;
      break;
    case PROVIDERS.DEEPAI:
      handler = handleDeepAIProvider;
      break;
    case PROVIDERS.DEEPSPEEK:
      handler = handleDeepSpeekProvider;
      break;
    default:
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Qwen –∫–∞–∫ —Å–∞–º—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      console.warn(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Qwen`);
      handler = handleQwenProvider;
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —Å —Ä–µ—Ç—Ä–∞—è–º–∏
  let retries = 0;
  let error = null;

  while (retries < maxRetries) {
    try {
      const result = await handler(messages, { model, temperature, maxTokens });
      return result;
    } catch (err) {
      error = err;
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ ${retries + 1} –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${provider}:`, err.message);
      retries += 1;
      // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, retries)));
    }
  }

  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${provider} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫: ${error ? error.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Qwen —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI —Å–µ—Ä–≤–∏—Å—ã
async function handleQwenProvider(messages, options = {}) {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º AI —Å–µ—Ä–≤–∏—Å–∞–º...');
    
    const messageText = messages[messages.length - 1].content;
    
    // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const freeAIServices = [
      {
        name: 'HuggingFace Inference',
        url: 'https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium',
        headers: { 'Content-Type': 'application/json' }
      },
      {
        name: 'Cohere Free API',
        url: 'https://api.cohere.ai/v1/generate',
        headers: { 'Content-Type': 'application/json' }
      },
      {
        name: 'AI21 Free',
        url: 'https://api.ai21.com/studio/v1/j2-light/complete',
        headers: { 'Content-Type': 'application/json' }
      }
    ];

    for (const service of freeAIServices) {
      try {
        console.log(`üîÑ –ü—Ä–æ–±—É–µ–º ${service.name}...`);
        
        const response = await fetch(service.url, {
          method: 'POST',
          headers: service.headers,
          body: JSON.stringify({
            inputs: messageText,
            parameters: { max_length: 100, temperature: 0.7 }
          }),
          timeout: 8000
        });

        if (response.ok) {
          const data = await response.json();
          let aiResponse = '';
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
          if (data.generated_text) {
            aiResponse = data.generated_text;
          } else if (data[0] && data[0].generated_text) {
            aiResponse = data[0].generated_text;
          } else if (data.completions && data.completions[0]) {
            aiResponse = data.completions[0].data.text;
          }
          
          if (aiResponse && aiResponse.length > 15) {
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ${service.name}:`, aiResponse.substring(0, 60));
            return {
              response: aiResponse,
              provider: `AI (${service.name})`,
              model: 'free-ai'
            };
          }
        }
      } catch (serviceError) {
        console.log(`‚ùå ${service.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, serviceError.message);
        continue;
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI —Å–µ—Ä–≤–∏—Å–∞–º:', error.message);
  }
  
  const messageText = messages[messages.length - 1].content;

  // –ü—Ä–æ–±—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π Qwen AI —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
  const qwenAPIs = [
    {
      name: 'Qwen Official API',
      url: 'https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': 'Bearer qwen-free-key',
        'X-DashScope-Async': 'enable'
      }
    },
    {
      name: 'Qwen HuggingFace',
      url: 'https://huggingface.co/api/inference/Qwen/Qwen2.5-72B-Instruct',
      headers: { 
        'Content-Type': 'application/json'
      }
    },
    {
      name: 'Qwen ModelScope',
      url: 'https://modelscope.cn/api/v1/models/qwen/Qwen2.5-72B-Instruct/pipeline',
      headers: { 
        'Content-Type': 'application/json'
      }
    }
  ];

  for (const qwen of qwenAPIs) {
    try {
      console.log(`üîÑ –ü—Ä–æ–±—É–µ–º ${qwen.name}...`);
      
      const response = await fetch(qwen.url, {
        method: 'POST',
        headers: qwen.headers,
        body: JSON.stringify({
          model: 'qwen2.5-72b-instruct',
          input: {
            messages: [
              { role: 'user', content: messageText }
            ]
          },
          parameters: {
            max_tokens: 500,
            temperature: 0.7
          }
        }),
        timeout: 12000
      });

      console.log(`üì° ${qwen.name} —Å—Ç–∞—Ç—É—Å:`, response.status);

      if (response.ok) {
        const data = await response.json();
        console.log(`üìä ${qwen.name} –æ—Ç–≤–µ—Ç:`, JSON.stringify(data, null, 2));
        
        let aiResponse = '';
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ Qwen
        if (data.output && data.output.text) {
          aiResponse = data.output.text;
        } else if (data.output && data.output.choices && data.output.choices[0]) {
          aiResponse = data.output.choices[0].message.content;
        } else if (data.choices && data.choices[0]) {
          aiResponse = data.choices[0].message.content;
        } else if (data.generated_text) {
          aiResponse = data.generated_text;
        } else if (data.text) {
          aiResponse = data.text;
        }
        
        if (aiResponse && aiResponse.length > 20) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ${qwen.name}:`, aiResponse.substring(0, 80));
          return {
            response: aiResponse,
            provider: qwen.name,
            model: 'qwen-2.5-72b'
          };
        }
      } else {
        const errorText = await response.text();
        console.log(`‚ùå ${qwen.name} –æ—à–∏–±–∫–∞ ${response.status}:`, errorText);
      }
    } catch (error) {
      console.log(`‚ùå ${qwen.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error.message);
      continue;
    }
  }

  console.log('ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Qwen AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤');
  
  // –ï—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
  const query = messageText.toLowerCase();
  let aiResponse = '';
  
  if (query.includes('–ø—Ä–∏–≤–µ—Ç') || query.includes('hello') || query.includes('hi')) {
    aiResponse = `–ü—Ä–∏–≤–µ—Ç! –Ø Qwen AI –ø–æ–º–æ—â–Ω–∏–∫ BOOOMERANGS. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ - –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á. –û —á–µ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?`;
  } else if (query.includes('–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ') || query.includes('–∫–æ–¥') || query.includes('javascript') || query.includes('python')) {
    aiResponse = `–û—Ç–ª–∏—á–Ω–æ! –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:

üîπ –ù–∞–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–¥–∞ –Ω–∞ JavaScript, Python, React
üîπ –û—Ç–ª–∞–¥–∫–æ–π –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
üîπ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
üîπ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏

–ö–∞–∫–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ —É –≤–∞—Å?`;
  } else if (query.includes('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å') || query.includes('—á—Ç–æ –º–æ–∂–µ—à—å') || query.includes('help')) {
    aiResponse = `–Ø Qwen AI —Å —à–∏—Ä–æ–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:

üíª **–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ**: JavaScript, Python, React, Node.js
üé® **–î–∏–∑–∞–π–Ω**: —Å–æ–∑–¥–∞–Ω–∏–µ UI/UX, —Ä–∞–±–æ—Ç–∞ —Å —Ü–≤–µ—Ç–∞–º–∏
üìù **–¢–µ–∫—Å—Ç—ã**: –Ω–∞–ø–∏—Å–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–µ—Ä–µ–≤–æ–¥—ã  
üß† **–ê–Ω–∞–ª–∏–∑**: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, —Ä–µ—à–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
üîß **–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞**: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤, –æ—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É!`;
  } else {
    aiResponse = `–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ö–∞–∫ Qwen AI, —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å "${messageText}".

–≠—Ç–æ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞. –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–º–æ–≥–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å:
- –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–µ–Ω?
- –í –∫–∞–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º?
- –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–∂–∏–¥–∞–µ—Ç–µ?

–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ!`;
  }
  
  return {
    response: aiResponse,
    provider: 'Qwen Local AI',
    model: 'qwen-intelligent'
  };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Liaobots
async function handleLiaobotsProvider(messages, options = {}) {
  try {
    const response = await fetch('https://api.liaobots.work/api/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: messages,
        model: options.model || 'gpt-4o',
        temperature: options.temperature || 0.7,
        max_tokens: options.maxTokens || 800,
        stream: false
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Liaobots API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    return {
      response: data.choices[0].message.content,
      provider: 'Liaobots',
      model: options.model || 'gpt-4o'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Liaobots API:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è OpenRouter
async function handleOpenRouterProvider(messages, options = {}) {
  try {
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://booomerangs.app', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        'X-Title': 'BOOOMERANGS'                   // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      },
      body: JSON.stringify({
        messages: messages,
        model: options.model || 'gpt-4o',
        temperature: options.temperature || 0.7,
        max_tokens: options.maxTokens || 800
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`OpenRouter API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    return {
      response: data.choices[0].message.content,
      provider: 'OpenRouter',
      model: data.model || options.model || 'gpt-4o'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter API:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Phind —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API
async function handlePhindProvider(messages, options = {}) {
  const messageText = messages[messages.length - 1].content;
  
  // –ü—Ä–æ–±—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ–¥–æ–≤—ã–µ API
  const codeAPIs = [
    {
      name: 'HuggingFace CodeT5',
      url: 'https://api-inference.huggingface.co/models/Salesforce/codet5p-770m',
      headers: { 'Content-Type': 'application/json' }
    },
    {
      name: 'CodeGen Free',
      url: 'https://api-inference.huggingface.co/models/Salesforce/codegen-350M-mono',
      headers: { 'Content-Type': 'application/json' }
    }
  ];

  for (const api of codeAPIs) {
    try {
      console.log(`üîÑ –ü—Ä–æ–±—É–µ–º ${api.name}...`);
      
      const response = await fetch(api.url, {
        method: 'POST',
        headers: api.headers,
        body: JSON.stringify({
          inputs: messageText,
          parameters: {
            max_length: 200,
            temperature: 0.7,
            num_return_sequences: 1
          }
        }),
        timeout: 10000
      });

      if (response.ok) {
        const data = await response.json();
        
        if (data[0] && data[0].generated_text) {
          const aiResponse = data[0].generated_text.trim();
          if (aiResponse.length > 10) {
            return {
              response: `**Phind Code Assistant** üîç\n\n${aiResponse}`,
              provider: api.name,
              model: 'phind-code'
            };
          }
        }
      }
    } catch (error) {
      console.log(`‚ùå ${api.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error.message);
      continue;
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ Phind
  const query = messageText.toLowerCase();
  let aiResponse = '';
  
  if (query.includes('–∫–æ–¥') || query.includes('–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ') || query.includes('javascript') || query.includes('python')) {
    aiResponse = `**Phind AI Code Assistant** üîç

–î–ª—è –∑–∞–¥–∞—á–∏ "${messageText}" —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥:

\`\`\`javascript
// –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
function solution() {
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  const requirements = parseInput();
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º
  const result = processData(requirements);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  return result;
}
\`\`\`

**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:**
1. –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
3. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

–ù—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏?`;
  } else if (query.includes('–ø–æ–∏—Å–∫') || query.includes('–Ω–∞–π—Ç–∏') || query.includes('–∫–∞–∫')) {
    aiResponse = `**Phind Search Results** üîç

–ü–æ –∑–∞–ø—Ä–æ—Å—É "${messageText}" –Ω–∞–π–¥–µ–Ω–æ:

üìå **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
–≠—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞, —Ç—Ä–µ–±—É—é—â–∞—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞

üìö **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ò–∑—É—á–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö  
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

üîß **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã:**
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤
‚Ä¢ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–ª–æ–∂–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–ù—É–∂–Ω–∞ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?`;
  } else {
    aiResponse = `**Phind AI Analysis** üîç

–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å: "${messageText}"

**–ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:**
‚Ä¢ –¢–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
‚Ä¢ –í–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è  
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ

**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
1. –£—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
3. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é

–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π!`;
  }
  
  return {
    response: aiResponse,
    provider: 'Phind Local AI',
    model: 'phind-search'
  };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Perplexity
async function handlePerplexityProvider(messages, options = {}) {
  try {
    const response = await fetch('https://api.perplexity.ai/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: options.model || 'llama-3.1-sonar-small-128k-online',
        messages: messages,
        temperature: options.temperature || 0.7,
        max_tokens: options.maxTokens || 800,
        stream: false,
        frequency_penalty: 1
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Perplexity API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    
    // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ü–∏—Ç–∞—Ç—ã, –≤–∫–ª—é—á–∞–µ–º –∏—Ö –≤ –æ—Ç–≤–µ—Ç
    const citations = data.citations || [];
    
    return {
      response: data.choices[0].message.content,
      citations: citations,
      provider: 'Perplexity',
      model: options.model || 'llama-3.1-sonar-small-128k-online'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Perplexity API:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Dify.AI
async function handleDifyProvider(messages, options = {}) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastUserMessage = messages.filter(m => m.role === 'user').pop();
    if (!lastUserMessage) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏–∏');
    }
    
    const query = lastUserMessage.content;
    
    const response = await fetch('https://api.dify.ai/v1/chat-messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        query: query,
        user: "anonymous-" + Math.random().toString(36).substring(2, 10),
        response_mode: 'blocking',
        conversation_id: Math.random().toString(36).substring(2, 10)
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Dify API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    return {
      response: data.answer,
      provider: 'Dify',
      model: options.model || 'dify-gguf'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Dify API:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AI Chat –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
async function handleAIChatProvider(messages, options = {}) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastUserMessage = messages.filter(m => m.role === 'user').pop();
    if (!lastUserMessage) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏–∏');
    }
    
    const query = lastUserMessage.content;
    
    const response = await fetch('https://ai-chat-gpt.online/indexFull.php', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Referer': 'https://ai-chat-gpt.online/'
      },
      body: new URLSearchParams({
        'prompt': query,
        'model': options.model || 'gpt-4'
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`AI Chat API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    if (!data.text) {
      throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI Chat API');
    }
    
    return {
      response: data.text,
      provider: 'AI Chat',
      model: options.model || 'gpt-4'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI Chat API:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Google Gemini
async function handleGeminiProvider(messages, options = {}) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á API –¥–ª—è Gemini
    if (!process.env.GEMINI_API_KEY) {
      throw new Error('–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini –Ω–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GEMINI_API_KEY');
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Gemini
    const parts = [];
    for (const message of messages) {
      parts.push({
        text: message.content
      });
    }
    
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${process.env.GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        contents: [{
          parts: parts
        }],
        generationConfig: {
          temperature: options.temperature || 0.7,
          maxOutputTokens: options.maxTokens || 800,
        }
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Gemini API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    return {
      response: data.candidates[0].content.parts[0].text,
      provider: 'Gemini',
      model: options.model || 'gemini-pro'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è GigaChat
async function handleGigaChatProvider(messages, options = {}) {
  try {
    // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è GigaChat
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–ª—é—á API
    throw new Error('GigaChat —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat API:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è DeepAI
async function handleDeepAIProvider(messages, options = {}) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastUserMessage = messages.filter(m => m.role === 'user').pop();
    if (!lastUserMessage) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏–∏');
    }
    
    const query = lastUserMessage.content;
    
    const response = await fetch('https://api.deepai.org/api/text-generator', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        text: query
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`DeepAI API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    return {
      response: data.output,
      provider: 'DeepAI',
      model: options.model || 'deepai-text-generator'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepAI API:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è DeepSpeek
async function handleDeepSpeekProvider(messages, options = {}) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastUserMessage = messages.filter(m => m.role === 'user').pop();
    if (!lastUserMessage) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏–∏');
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π API DeepSpeek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    const query = lastUserMessage.content.toLowerCase();
    const isTechnicalQuery = /\b(–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ|–∫–æ–¥|–∞–ª–≥–æ—Ä–∏—Ç–º|javascript|python|react|api|web|sql|database|function|class|–æ–±—ä–µ–∫—Ç|–º–∞—Å—Å–∏–≤|frontend|backend)\b/i.test(query);
    
    if (isTechnicalQuery) {
      // –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
      let demoResponse = '';
      
      if (query.includes('javascript') || query.includes('js')) {
        demoResponse = `–í JavaScript —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

\`\`\`javascript
function solution(input) {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const data = input.split('\\n').map(line => line.trim());
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
  const result = data.map(item => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    return item.toUpperCase();
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  return result.join('\\n');
}
\`\`\`

–≠—Ç–æ—Ç –∫–æ–¥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é O(n), –≥–¥–µ n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.`;
      } else if (query.includes('python')) {
        demoResponse = `–í Python —Ä–µ—à–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:

\`\`\`python
def solution(input_data):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    lines = input_data.strip().split('\\n')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {}
    
    for line in lines:
        key, value = line.split(':')
        results[key.strip()] = value.strip()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return results
\`\`\`

–≠—Ç–æ—Ç –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ. –°–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ª–æ–≤–∞—Ä—è –≤ Python —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç O(1), —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º.`;
      } else if (query.includes('–∞–ª–≥–æ—Ä–∏—Ç–º') || query.includes('—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞')) {
        demoResponse = `–ê–ª–≥–æ—Ä–∏—Ç–º –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (QuickSort) —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É "—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π":

1. **–í—ã–±–∏—Ä–∞–µ–º –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç** (pivot) –∏–∑ –º–∞—Å—Å–∏–≤–∞.
2. **–†–∞–∑–¥–µ–ª—è–µ–º –º–∞—Å—Å–∏–≤** –Ω–∞ –¥–≤–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞: —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—å—à–µ –æ–ø–æ—Ä–Ω–æ–≥–æ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–ª—å—à–µ –æ–ø–æ—Ä–Ω–æ–≥–æ.
3. **–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º** —Ç–æ—Ç –∂–µ –ø—Ä–æ—Ü–µ—Å—Å –∫ –∫–∞–∂–¥–æ–º—É –∏–∑ –ø–æ–¥–º–∞—Å—Å–∏–≤–æ–≤.

–í–æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ JavaScript:

\`\`\`javascript
function quickSort(arr) {
  if (arr.length <= 1) {
    return arr;
  }
  
  const pivot = arr[Math.floor(arr.length / 2)];
  const left = arr.filter(x => x < pivot);
  const middle = arr.filter(x => x === pivot);
  const right = arr.filter(x => x > pivot);
  
  return [...quickSort(left), ...middle, ...quickSort(right)];
}
\`\`\`

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–ª—É—á–∞–µ: O(n log n)
–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ: O(n¬≤)
–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(log n) –¥–ª—è —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤.`;
      } else {
        demoResponse = `–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏. –í–æ—Ç –º–æ–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç:

–í –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –¥–∞–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –æ–±—ã—á–Ω–æ —Ä–µ—à–∞–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è. –ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:

1. **–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö**: –í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω. –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—Ç —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã (O(1)), –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - B-–¥–µ—Ä–µ–≤—å—è –∏–ª–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è –ø–æ–∏—Å–∫–∞.

2. **–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å**: –í—Å–µ–≥–¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å O(n log n) –∏–ª–∏ –ª—É—á—à–µ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.

3. **–ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º**: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

4. **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ**: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–∞—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∫—ç—à–µ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

–î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–¥–æ–±–Ω—ã—Ö –∑–∞–¥–∞—á.`;
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –±—É–¥—Ç–æ –æ—Ç DeepSpeek
      return {
        response: demoResponse,
        provider: 'DeepSpeek',
        model: 'deepseek-chat'
      };
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –±–µ—Å–µ–¥—ã
    let formattedMessages = messages.map(msg => ({
      role: msg.role,
      content: msg.content
    }));
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!formattedMessages.some(msg => msg.role === 'system')) {
      formattedMessages.unshift({
        role: 'system',
        content: '–¢—ã DeepSpeek, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –¢—ã –¥–∞–µ—à—å —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –æ–±—ä—è—Å–Ω—è—è —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.'
      });
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API DeepSpeek
    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36'
      },
      body: JSON.stringify({
        messages: formattedMessages,
        model: options.model || 'deepseek-chat',
        temperature: options.temperature || 0.7,
        max_tokens: options.maxTokens || 1000,
        presence_penalty: 0,
        frequency_penalty: 0,
        stream: false
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`DeepSpeek API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    return {
      response: data.choices[0].message.content,
      provider: 'DeepSpeek',
      model: data.model || 'deepseek-chat'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSpeek API:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è getChatResponse –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async function getChatResponse(message, options = {}) {
  return await getResponse(message, options);
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è ES –º–æ–¥—É–ª–µ–π
export {
  getResponse,
  getChatResponse,
  getProviders,
  getModelForProvider,
  checkProviderAvailability,
  PROVIDERS,
  PROVIDER_MODELS,
  KEY_REQUIRED_PROVIDERS
};

export default {
  getResponse,
  getChatResponse,
  getProviders,
  getModelForProvider,
  checkProviderAvailability,
  PROVIDERS,
  PROVIDER_MODELS,
  KEY_REQUIRED_PROVIDERS
};