/**
 * –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */

import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const IMAGES_DIR = path.join(__dirname, '../public/generated-images');

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(IMAGES_DIR)) {
    fs.mkdirSync(IMAGES_DIR, { recursive: true });
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function generateImageId() {
    return Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

/**
 * –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
function enhancePrompt(prompt, style = 'realistic') {
    const styleEnhancements = {
        realistic: 'photorealistic, high quality, detailed, 4k resolution',
        artistic: 'artistic, beautiful, creative, masterpiece',
        anime: 'anime style, manga, japanese art, colorful',
        cyberpunk: 'cyberpunk, neon lights, futuristic, dark atmosphere',
        fantasy: 'fantasy art, magical, epic, detailed fantasy world'
    };
    
    const enhancement = styleEnhancements[style] || styleEnhancements.realistic;
    return `${prompt}, ${enhancement}`;
}

/**
 * 1. Pollinations AI - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
 */
async function generateWithPollinations(prompt, style, imageId) {
    console.log('üå∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations AI...');
    
    const enhancedPrompt = enhancePrompt(prompt, style);
    const encodedPrompt = encodeURIComponent(enhancedPrompt);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ endpoints Pollinations
    const endpoints = [
        `https://image.pollinations.ai/prompt/${encodedPrompt}?width=512&height=512&seed=${Math.floor(Math.random() * 1000000)}&nologo=true`,
        `https://pollinations.ai/p/${encodedPrompt}?width=512&height=512`,
        `https://image.pollinations.ai/prompt/${encodedPrompt}`
    ];
    
    for (const apiUrl of endpoints) {
        try {
            const response = await fetch(apiUrl, {
                method: 'GET',
                timeout: 25000,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    'Accept': 'image/*,*/*;q=0.8',
                    'Referer': 'https://pollinations.ai/'
                }
            });
            
            if (response.ok && response.headers.get('content-type')?.startsWith('image/')) {
                const imageBuffer = await response.arrayBuffer();
                const filename = `pollinations_${imageId}.jpg`;
                const filepath = path.join(IMAGES_DIR, filename);
                
                fs.writeFileSync(filepath, Buffer.from(imageBuffer));
                console.log('‚úÖ Pollinations: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
                
                return {
                    success: true,
                    imageUrl: `/generated-images/${filename}`,
                    provider: 'Pollinations AI',
                    prompt: prompt
                };
            }
        } catch (error) {
            console.log(`‚ùå Pollinations endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
            continue;
        }
    }
    
    throw new Error('–í—Å–µ Pollinations endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
}

/**
 * 2. Craiyon (–±—ã–≤—à–∏–π DALL-E mini) - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
 */
async function generateWithCraiyon(prompt, style, imageId) {
    console.log('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Craiyon...');
    
    const enhancedPrompt = enhancePrompt(prompt, style);
    
    try {
        const response = await fetch('https://backend.craiyon.com/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'BOOOMERANGS-AI-Chat/1.0'
            },
            body: JSON.stringify({
                prompt: enhancedPrompt,
                model: 'art',
                negative_prompt: 'blurry, low quality, distorted'
            }),
            timeout: 45000
        });
        
        if (response.ok) {
            const data = await response.json();
            
            if (data.images && data.images.length > 0) {
                // Craiyon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const base64Image = data.images[0];
                const imageBuffer = Buffer.from(base64Image, 'base64');
                
                const filename = `craiyon_${imageId}.jpg`;
                const filepath = path.join(IMAGES_DIR, filename);
                
                fs.writeFileSync(filepath, imageBuffer);
                console.log('‚úÖ Craiyon: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
                
                return {
                    success: true,
                    imageUrl: `/generated-images/${filename}`,
                    provider: 'Craiyon',
                    prompt: prompt
                };
            }
        }
        
        throw new Error(`HTTP ${response.status}`);
    } catch (error) {
        console.log('‚ùå Craiyon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        throw error;
    }
}

/**
 * 3. DeepAI - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç –±–µ–∑ –∫–ª—é—á–∞
 */
async function generateWithDeepAI(prompt, style, imageId) {
    console.log('üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ DeepAI...');
    
    const enhancedPrompt = enhancePrompt(prompt, style);
    
    try {
        const response = await fetch('https://api.deepai.org/api/text2img', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'User-Agent': 'BOOOMERANGS-AI-Chat/1.0'
            },
            body: `text=${encodeURIComponent(enhancedPrompt)}`,
            timeout: 35000
        });
        
        if (response.ok) {
            const data = await response.json();
            
            if (data.output_url) {
                // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
                const imageResponse = await fetch(data.output_url);
                const imageBuffer = await imageResponse.buffer();
                
                const filename = `deepai_${imageId}.jpg`;
                const filepath = path.join(IMAGES_DIR, filename);
                
                fs.writeFileSync(filepath, imageBuffer);
                console.log('‚úÖ DeepAI: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
                
                return {
                    success: true,
                    imageUrl: `/generated-images/${filename}`,
                    provider: 'DeepAI',
                    prompt: prompt
                };
            }
        }
        
        throw new Error(`HTTP ${response.status}`);
    } catch (error) {
        console.log('‚ùå DeepAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        throw error;
    }
}

/**
 * 4. Stable Diffusion —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ API
 */
async function generateWithStableDiffusionAPI(prompt, style, imageId) {
    console.log('üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Stable Diffusion API...');
    
    const enhancedPrompt = enhancePrompt(prompt, style);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API endpoint
    const endpoints = [
        'https://api.stability.ai/v1/generation/stable-diffusion-v1-6/text-to-image',
        'https://stablediffusionapi.com/api/v3/text2img'
    ];
    
    for (const endpoint of endpoints) {
        try {
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'BOOOMERANGS-AI-Chat/1.0'
                },
                body: JSON.stringify({
                    text_prompts: [{ text: enhancedPrompt }],
                    cfg_scale: 7,
                    height: 512,
                    width: 512,
                    samples: 1,
                    steps: 20
                }),
                timeout: 40000
            });
            
            if (response.ok) {
                const data = await response.json();
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                let imageData = null;
                if (data.artifacts && data.artifacts[0]) {
                    imageData = data.artifacts[0].base64;
                } else if (data.output && data.output[0]) {
                    imageData = data.output[0];
                }
                
                if (imageData) {
                    const imageBuffer = Buffer.from(imageData, 'base64');
                    const filename = `stable_${imageId}.jpg`;
                    const filepath = path.join(IMAGES_DIR, filename);
                    
                    fs.writeFileSync(filepath, imageBuffer);
                    console.log('‚úÖ Stable Diffusion: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
                    
                    return {
                        success: true,
                        imageUrl: `/generated-images/${filename}`,
                        provider: 'Stable Diffusion API',
                        prompt: prompt
                    };
                }
            }
        } catch (error) {
            console.log(`‚ùå ${endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error.message);
            continue;
        }
    }
    
    throw new Error('–í—Å–µ Stable Diffusion API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Hugging Face (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–ª—é—á–æ–º)
 */
async function generateWithHuggingFace(prompt, style, imageId) {
    console.log('ü§ó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Hugging Face...');
    
    if (!process.env.HUGGINGFACE_API_KEY) {
        throw new Error('HUGGINGFACE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const enhancedPrompt = enhancePrompt(prompt, style);
    
    const response = await fetch('https://api-inference.huggingface.co/models/black-forest-labs/FLUX.1-dev', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            inputs: enhancedPrompt,
            parameters: {
                width: 512,
                height: 512
            }
        }),
        timeout: 30000
    });
    
    if (response.ok) {
        const imageBuffer = await response.arrayBuffer();
        const filename = `huggingface_${imageId}.jpg`;
        const filepath = path.join(IMAGES_DIR, filename);
        
        fs.writeFileSync(filepath, Buffer.from(imageBuffer));
        console.log('‚úÖ Hugging Face: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        
        return {
            success: true,
            imageUrl: `/generated-images/${filename}`,
            provider: 'Hugging Face',
            prompt: prompt
        };
    }
    
    throw new Error(`Hugging Face API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Replicate (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–ª—é—á–æ–º)
 */
async function generateWithReplicate(prompt, style, imageId) {
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Replicate...');
    
    if (!process.env.REPLICATE_API_TOKEN) {
        throw new Error('REPLICATE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const enhancedPrompt = enhancePrompt(prompt, style);
    
    const response = await fetch('https://api.replicate.com/v1/predictions', {
        method: 'POST',
        headers: {
            'Authorization': `Token ${process.env.REPLICATE_API_TOKEN}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            version: 'ac732df83cea7fff18b8472768c88ad041fa750ff7682a21affe81863cbe77e57',
            input: {
                prompt: enhancedPrompt,
                width: 512,
                height: 512,
                num_inference_steps: 20
            }
        }),
        timeout: 60000
    });
    
    if (response.ok) {
        const prediction = await response.json();
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        let result = prediction;
        while (result.status === 'starting' || result.status === 'processing') {
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const statusResponse = await fetch(`https://api.replicate.com/v1/predictions/${result.id}`, {
                headers: {
                    'Authorization': `Token ${process.env.REPLICATE_API_TOKEN}`
                }
            });
            
            result = await statusResponse.json();
        }
        
        if (result.status === 'succeeded' && result.output && result.output[0]) {
            const imageUrl = result.output[0];
            const filename = `replicate_${imageId}.jpg`;
            const filepath = path.join(IMAGES_DIR, filename);
            
            // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const imageResponse = await fetch(imageUrl);
            const imageBuffer = await imageResponse.arrayBuffer();
            fs.writeFileSync(filepath, Buffer.from(imageBuffer));
            
            console.log('‚úÖ Replicate: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
            
            return {
                success: true,
                imageUrl: `/generated-images/${filename}`,
                provider: 'Replicate',
                prompt: prompt
            };
        }
    }
    
    throw new Error(`Replicate API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ API —Å–µ—Ä–≤–∏—Å—ã
 */
async function generateFreeImage(prompt, style = 'realistic') {
    const imageId = generateImageId();
    
    console.log(`üé® –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: "${prompt}" –≤ —Å—Ç–∏–ª–µ "${style}"`);
    
    // –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const generators = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    if (process.env.HUGGINGFACE_API_KEY) {
        generators.push(() => generateWithHuggingFace(prompt, style, imageId));
    }
    
    if (process.env.REPLICATE_API_TOKEN) {
        generators.push(() => generateWithReplicate(prompt, style, imageId));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º Pollinations –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    generators.push(() => generateWithPollinations(prompt, style, imageId));
    
    if (generators.length === 0) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –¢—Ä–µ–±—É—é—Ç—Å—è HUGGINGFACE_API_KEY –∏–ª–∏ REPLICATE_API_TOKEN');
    }
    
    let lastError = null;
    
    for (let i = 0; i < generators.length; i++) {
        try {
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${generators.length}`);
            const result = await generators[i]();
            
            if (result.success) {
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ ${result.provider}`);
                return result;
            }
        } catch (error) {
            lastError = error;
            console.log(`‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ${i + 1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if (i < generators.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${lastError?.message || '–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}`);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
 */
async function checkFreeGeneratorsStatus() {
    const results = {
        pollinations: false,
        craiyon: false,
        deepai: false,
        stable: false
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Pollinations
    try {
        const response = await fetch('https://image.pollinations.ai/prompt/test?width=64&height=64', {
            method: 'GET',
            timeout: 5000
        });
        results.pollinations = response.ok;
    } catch (error) {
        results.pollinations = false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Craiyon
    try {
        const response = await fetch('https://backend.craiyon.com/generate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ prompt: 'test' }),
            timeout: 5000
        });
        results.craiyon = response.status !== 404;
    } catch (error) {
        results.craiyon = false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º DeepAI
    try {
        const response = await fetch('https://api.deepai.org/api/text2img', {
            method: 'POST',
            timeout: 5000
        });
        results.deepai = response.status !== 404;
    } catch (error) {
        results.deepai = false;
    }
    
    return results;
}

export {
    generateFreeImage,
    checkFreeGeneratorsStatus,
    generateWithPollinations,
    generateWithCraiyon,
    generateWithDeepAI,
    generateWithStableDiffusionAPI
};