const { db } = require("./db");
const { chatSessions, aiMessages } = require("@shared/schema");
const { eq, desc } = require("drizzle-orm");

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ ID –∏–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è)
 */
function getUserIdFromName(username: string): number {
  // –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è: —Å—É–º–º–∞ –∫–æ–¥–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
  let numericId = 0;
  for (let i = 0; i < username.length; i++) {
    numericId += username.charCodeAt(i);
  }
  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã ID –±—ã–ª–∏ –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏
  return numericId + 1000;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
 */
async function createChatSession(username: any, title: string) {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ–≤–æ–π ID
  const userId = typeof username === 'number' ? username : getUserIdFromName(String(username));
  
  console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç-—Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId})`);
  
  const [session] = await db
    .insert(chatSessions)
    .values({
      userId,
      title,
    })
    .returning();
  
  return session;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserChatSessions(username: any) {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ–≤–æ–π ID
  const userId = typeof username === 'number' ? username : getUserIdFromName(String(username));
  
  console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId})`);
  
  return await db
    .select()
    .from(chatSessions)
    .where(eq(chatSessions.userId, userId))
    .orderBy(desc(chatSessions.updatedAt));
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
 */
async function saveMessage(messageData) {
  console.log('üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', JSON.stringify(messageData, null, 2));
  
  try {
    const [message] = await db
      .insert(aiMessages)
      .values(messageData)
      .returning();
    
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', message.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    const savedMessage = await db.select().from(aiMessages).where(eq(aiMessages.id, message.id));
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', savedMessage.length > 0 ? '–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î' : '–ù–ï –ù–ê–ô–î–ï–ù–û –í –ë–î');
    
    return message;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    throw error;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
  await db
    .update(chatSessions)
    .set({ updatedAt: new Date() })
    .where(eq(chatSessions.id, messageData.sessionId));
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–µ—Å—Å–∏–∏
 */
async function getSessionMessages(sessionId) {
  // –ü–æ–ª—É—á–∞–µ–º AI —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const aiMessagesData = await db
    .select()
    .from(aiMessages)
    .where(eq(aiMessages.sessionId, sessionId))
    .orderBy(aiMessages.createdAt);
    
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
  const formattedMessages = aiMessagesData.map(msg => ({
    id: msg.id,
    text: msg.content,
    sender: msg.sender, // 'user' –∏–ª–∏ 'ai'
    timestamp: msg.createdAt,
    provider: msg.provider,
    imageUrl: msg.imageUrl // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ imageUrl
  }));
    
  return formattedMessages;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
 */
async function updateSessionTitle(sessionId, title) {
  const [session] = await db
    .update(chatSessions)
    .set({ 
      title,
      updatedAt: new Date()
    })
    .where(eq(chatSessions.id, sessionId))
    .returning();
  
  return session;
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –≤—Å–µ—Ö –µ—ë —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function deleteSession(sessionId) {
  console.log(`üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ${sessionId} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...`);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const deletedMessages = await db
      .delete(aiMessages)
      .where(eq(aiMessages.sessionId, parseInt(sessionId)))
      .returning();
    console.log(`üìß –£–¥–∞–ª–µ–Ω–æ ${deletedMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–µ—Å—Å–∏–∏ ${sessionId}`);
    
    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
    const deletedSessions = await db
      .delete(chatSessions)
      .where(eq(chatSessions.id, parseInt(sessionId)))
      .returning();
    console.log(`üóÇÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deletedSessions.length} —Å–µ—Å—Å–∏–π —Å ID ${sessionId}`);
    
    if (deletedSessions.length === 0) {
      console.log(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    } else {
      console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
    throw error;
  }
}

module.exports = {
  createChatSession,
  getUserChatSessions,
  saveMessage,
  getSessionMessages,
  updateSessionTitle,
  deleteSession
};