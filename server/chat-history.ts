const { db } = require("./db");
const { chatSessions, aiMessages } = require("@shared/schema");
const { eq, desc } = require("drizzle-orm");

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ ID –∏–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è)
 */
function getUserIdFromName(username: string): number {
  // –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è: —Å—É–º–º–∞ –∫–æ–¥–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
  let numericId = 0;
  for (let i = 0; i < username.length; i++) {
    numericId += username.charCodeAt(i);
  }
  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã ID –±—ã–ª–∏ –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏
  return numericId + 1000;
}

/**
 * –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã —á–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function generateChatTitle(userMessage: string): string {
  // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const cleanMessage = userMessage.trim().replace(/[^\w\s\u0400-\u04FF]/g, '');
  
  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
  const patterns = {
    '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π': /(?:—Å–æ–∑–¥–∞–π|–Ω–∞—Ä–∏—Å—É–π|—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫—É|—Ñ–æ—Ç–æ)/i,
    '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞': /(?:–∫–æ–¥|–ø—Ä–æ–≥—Ä–∞–º–º|—Ä–∞–∑—Ä–∞–±–æ—Ç|—Ñ—É–Ω–∫—Ü–∏|–∞–ª–≥–æ—Ä–∏—Ç–º|javascript|python|css|html)/i,
    '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏': /(?:—Å—Ç–∏—Ö|—Ä–∞—Å—Å–∫–∞–∑|–ø–∏—Å—å–º–æ|—Ç–µ–∫—Å—Ç|—Å–æ—á–∏–Ω|–∫—Ä–µ–∞—Ç–∏–≤|–∏–¥–µ—è)/i,
    '–ü–µ—Ä–µ–≤–æ–¥—ã': /(?:–ø–µ—Ä–µ–≤–µ–¥|translate|–ø–µ—Ä–µ–≤–æ–¥–∏|–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π|–Ω–∞ —Ä—É—Å—Å–∫–∏–π)/i,
    '–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã': /(?:—á—Ç–æ|–∫–∞–∫|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|–æ–±—ä—è—Å–Ω–∏|—Ä–∞—Å—Å–∫–∞–∂–∏)/i,
    '–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤': /(?:–∞–Ω–∞–ª–∏–∑|–¥–æ–∫—É–º–µ–Ω—Ç|—Ñ–∞–π–ª|pdf|–∏–∑—É—á–∏|–ø—Ä–æ—á–∏—Ç–∞–π)/i,
    '–û–±—É—á–µ–Ω–∏–µ': /(?:—É—á–µ–±|—É—Ä–æ–∫|–æ–±—ä—è—Å–Ω|–∏–∑—É—á|–ø–æ–Ω–∏–º–∞–Ω|–Ω–∞—É—á–∏)/i
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  for (const [category, pattern] of Object.entries(patterns)) {
    if (pattern.test(cleanMessage)) {
      const firstWords = cleanMessage.split(' ').slice(0, 4).join(' ');
      return `${category}: ${firstWords}...`.substring(0, 50);
    }
  }

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
  const firstWords = cleanMessage.split(' ').slice(0, 6).join(' ');
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
  if (firstWords.length > 40) {
    return firstWords.substring(0, 37) + '...';
  }
  
  return firstWords || '–ù–æ–≤—ã–π —á–∞—Ç';
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
 */
async function createChatSession(username: any, title: string) {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ–≤–æ–π ID
  const userId = typeof username === 'number' ? username : getUserIdFromName(String(username));
  
  console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç-—Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId})`);
  
  const [session] = await db
    .insert(chatSessions)
    .values({
      userId,
      title,
    })
    .returning();
  
  return session;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserChatSessions(username: any) {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ–≤–æ–π ID
  const userId = typeof username === 'number' ? username : getUserIdFromName(String(username));
  
  console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId})`);
  
  return await db
    .select()
    .from(chatSessions)
    .where(eq(chatSessions.userId, userId))
    .orderBy(desc(chatSessions.updatedAt));
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */
function getBeautifulProviderName(technicalName: string): string {
  const providerMap: { [key: string]: string } = {
    'Qwen_Qwen_2_5_Max': 'üß† Qwen AI Pro',
    'Qwen_Qwen_2_5': 'üß† Qwen AI',
    'Phind': 'üíª Phind Code Expert',
    'Gemini': '‚ú® Google Gemini',
    'GeminiPro': '‚ú® Google Gemini Pro',
    'Anthropic': 'ü§ñ Claude AI',
    'Claude': 'ü§ñ Claude AI',
    'ChatGpt': 'üî• ChatGPT Plus',
    'OpenaiChat': 'üî• ChatGPT Plus',
    'You': 'üîç You.com AI',
    'DeepInfra': '‚ö° DeepInfra Speed',
    'Groq': 'üöÄ Groq Lightning',
    'PerplexityApi': 'üìö Perplexity Search',
    'DeepSeek': 'üõ†Ô∏è DeepSeek Coder',
    'HuggingChat': 'ü§ó Hugging Face',
    'Ollama': 'ü¶ô Llama AI',
    'PythonG4F-Stream': 'üß† Qwen AI Pro',
    'auto': 'üéØ Smart Auto'
  };

  return providerMap[technicalName] || `ü§ñ ${technicalName}`;
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
 */
async function saveMessage(messageData: any) {
  try {
    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –∫—Ä–∞—Å–∏–≤–æ–µ
    if (messageData.provider) {
      messageData.provider = getBeautifulProviderName(messageData.provider);
    }
    
    const [message] = await db
      .insert(aiMessages)
      .values(messageData)
      .returning();
    
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', message.id);
    
    return message;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    throw error;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
  await db
    .update(chatSessions)
    .set({ updatedAt: new Date() })
    .where(eq(chatSessions.id, messageData.sessionId));
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–µ—Å—Å–∏–∏
 */
async function getSessionMessages(sessionId) {
  console.log(`üîç –ù–ê–ß–ê–õ–û getSessionMessages –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);
  // –ü–æ–ª—É—á–∞–µ–º AI —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const aiMessagesData = await db
    .select()
    .from(aiMessages)
    .where(eq(aiMessages.sessionId, sessionId))
    .orderBy(aiMessages.createdAt);
    
  console.log('üîç –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:', JSON.stringify(aiMessagesData, null, 2));
    
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
  const formattedMessages = aiMessagesData.map(msg => ({
    id: msg.id,
    text: msg.content,
    sender: msg.sender, // 'user' –∏–ª–∏ 'ai'
    timestamp: msg.createdAt,
    provider: msg.provider,
    imageUrl: msg.imageUrl // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è –∏–∑ —Å—Ö–µ–º—ã –ë–î
  }));
  
  console.log('üìã –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', JSON.stringify(formattedMessages, null, 2));
    
  return formattedMessages;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
 */
async function updateSessionTitle(sessionId, title) {
  const [session] = await db
    .update(chatSessions)
    .set({ 
      title,
      updatedAt: new Date()
    })
    .where(eq(chatSessions.id, sessionId))
    .returning();
  
  return session;
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –≤—Å–µ—Ö –µ—ë —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function deleteSession(sessionId) {
  console.log(`üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ${sessionId} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...`);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const deletedMessages = await db
      .delete(aiMessages)
      .where(eq(aiMessages.sessionId, parseInt(sessionId)))
      .returning();
    console.log(`üìß –£–¥–∞–ª–µ–Ω–æ ${deletedMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–µ—Å—Å–∏–∏ ${sessionId}`);
    
    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
    const deletedSessions = await db
      .delete(chatSessions)
      .where(eq(chatSessions.id, parseInt(sessionId)))
      .returning();
    console.log(`üóÇÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deletedSessions.length} —Å–µ—Å—Å–∏–π —Å ID ${sessionId}`);
    
    if (deletedSessions.length === 0) {
      console.log(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    } else {
      console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
    throw error;
  }
}

module.exports = {
  createChatSession,
  getUserChatSessions,
  saveMessage,
  getSessionMessages,
  updateSessionTitle,
  deleteSession,
  generateChatTitle
};