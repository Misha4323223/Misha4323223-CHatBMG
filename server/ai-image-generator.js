/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ API –∫–ª—é—á–µ–π
 */

const https = require('https');
const http = require('http');
const crypto = require('crypto');
const fs = require('fs').promises;
const path = require('path');

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const TEMP_DIR = path.join(__dirname, '..', 'temp');
const OUTPUT_DIR = path.join(__dirname, '..', 'output');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
async function ensureDirectories() {
  try {
    await fs.mkdir(TEMP_DIR, { recursive: true });
    await fs.mkdir(OUTPUT_DIR, { recursive: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:', error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
ensureDirectories();

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function generateId() {
  return crypto.randomBytes(8).toString('hex');
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ API
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (realistic, artistic, etc.)
 * @returns {Promise<{success: boolean, imageUrl: string, error?: string}>}
 */
async function generateImage(prompt, style = 'realistic', previousImage = null) {
  try {
    console.log(`üé® [DEBUG] –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–º–ø—Ç: "${prompt}"`);
    console.log(`üé® [DEBUG] –°—Ç–∏–ª—å: "${style}"`);
    console.log(`üé® [DEBUG] –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:`, previousImage);
    
    // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    let enhancedPrompt;
    
    if (previousImage) {
      // –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
      enhancedPrompt = enhancePromptForEdit(prompt, previousImage, style);
      console.log(`üîÑ [DEBUG] –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "${enhancedPrompt}"`);
    } else {
      // –≠—Ç–æ –Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
      enhancedPrompt = await enhancePromptWithAI(prompt, style);
      console.log(`üé® [DEBUG] –ü—Ä–æ–º–ø—Ç –¥–ª—è –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: "${enhancedPrompt}"`);
    }
    
    const imageId = generateId();
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const generators = [
      () => generateWithPollinations(enhancedPrompt, imageId),
      () => generateWithCraiyon(enhancedPrompt, imageId)
    ];
    
    let imageUrl = null;
    let lastError = null;
    
    for (const [index, generator] of generators.entries()) {
      try {
        imageUrl = await generator();
        const generatorName = index === 0 ? 'Pollinations.ai' : 'Craiyon (DALL-E Mini)';
        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ ${generatorName}`);
        console.log('üîó URL:', imageUrl);
        break;
      } catch (err) {
        const generatorName = index === 0 ? 'Pollinations.ai' : 'Craiyon';
        console.log(`‚ö†Ô∏è ${generatorName} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, err.message);
        lastError = err;
        continue;
      }
    }
    
    if (!imageUrl) {
      console.error('‚ùå –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      return { 
        success: false, 
        error: '–í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
      };
    }
    
    return { success: true, imageUrl };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –ë–∞–∑–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
 */
const PROMPT_TEMPLATES = {
  '–∫–∏–±–µ—Ä –∫–æ—Ç': 'cyberpunk cat with neon implants, futuristic design, glowing eyes, high tech collar, digital art style, detailed, 4k quality',
  '—Ç–µ—Ö–Ω–æ—Å–∞–º—É—Ä–∞–π': 'cyberpunk samurai warrior, futuristic armor, katana sword, neon lighting, dramatic composition, highly detailed, 4k quality',
  '–ø—Ä–∏–Ω—Ç': 'high quality t-shirt design, vector style, bold graphics, clean background, print-ready',
  '–∫–æ—Ç': 'beautiful cat, professional photography, soft lighting, detailed fur texture, high resolution',
  '—Å–∞–º—É—Ä–∞–π': 'legendary samurai warrior, traditional armor, katana sword, dramatic lighting, cinematic composition, detailed',
  '–¥—Ä–∞–∫–æ–Ω': 'majestic dragon, fantasy art style, detailed scales, dramatic lighting, epic composition, 4k quality',
  '—Ä–æ–±–æ—Ç': 'futuristic robot, mechanical details, metallic surface, sci-fi design, high tech, detailed, 4k quality'
};

/**
 * –ë—ã—Å—Ç—Ä–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
 * @param {string} prompt - –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<string>} –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 */
async function enhancePromptWithAI(prompt, style) {
  console.log(`üöÄ [FAST-ENHANCE] –ë—ã—Å—Ç—Ä–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: "${prompt}"`);
  
  const lowerPrompt = prompt.toLowerCase().trim();
  
  // –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ —à–∞–±–ª–æ–Ω–æ–≤
  for (const [key, template] of Object.entries(PROMPT_TEMPLATES)) {
    if (lowerPrompt.includes(key)) {
      console.log(`‚úÖ [FAST-ENHANCE] –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –¥–ª—è "${key}": "${template}"`);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–Ω—Ç–∞
      if (lowerPrompt.includes('–ø—Ä–∏–Ω—Ç') || lowerPrompt.includes('—Ñ—É—Ç–±–æ–ª–∫–∞')) {
        return `high quality t-shirt design, vector style, bold graphics, clean background, print-ready, ${template}`;
      }
      
      return template;
    }
  }
  
  // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  let combinedPrompt = '';
  let foundTemplates = [];
  
  for (const [key, template] of Object.entries(PROMPT_TEMPLATES)) {
    if (lowerPrompt.includes(key)) {
      foundTemplates.push(template);
    }
  }
  
  if (foundTemplates.length > 0) {
    combinedPrompt = foundTemplates.join(', ');
    console.log(`‚úÖ [FAST-ENHANCE] –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: "${combinedPrompt}"`);
    return combinedPrompt;
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
  console.log(`‚ö†Ô∏è [FAST-ENHANCE] –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ`);
  return enhanceRussianPromptBasic(prompt, style);
}

/**
 * –ë–∞–∑–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ (fallback)
 * @param {string} prompt - –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {string} –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 */
function enhanceRussianPromptBasic(prompt, style) {
  const originalPrompt = prompt.trim();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const isCharacter = /—Å–∞–º—É—Ä–∞–π|–≤–æ–∏–Ω|—á–µ–ª–æ–≤–µ–∫|–ø–µ—Ä—Å–æ–Ω–∞–∂|–≥–µ—Ä–æ–π|–¥–µ–≤—É—à–∫–∞|–ø–∞—Ä–µ–Ω—å/i.test(originalPrompt);
  const isTshirtDesign = /—Ñ—É—Ç–±–æ–ª–∫–∞|–ø—Ä–∏–Ω—Ç|–¥–∏–∑–∞–π–Ω|–ø–µ—á–∞—Ç—å/i.test(originalPrompt);
  const isNature = /–ø—Ä–∏—Ä–æ–¥–∞|–ª–µ—Å|–º–æ—Ä–µ|–≥–æ—Ä—ã|–ø–µ–π–∑–∞–∂|—Ü–≤–µ—Ç—ã|–∂–∏–≤–æ—Ç–Ω—ã–µ/i.test(originalPrompt);
  const isAbstract = /–∞–±—Å—Ç—Ä–∞–∫—Ç|–≥–µ–æ–º–µ—Ç—Ä–∏—è|—É–∑–æ—Ä|–ø–∞—Ç—Ç–µ—Ä–Ω/i.test(originalPrompt);
  const isCyberpunk = /—Ç–µ—Ö–Ω–æ|–∫–∏–±–µ—Ä|–Ω–µ–æ–Ω|–∫–∏–±–µ—Ä–ø–∞–Ω–∫|—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏–∫/i.test(originalPrompt);
  
  let enhancedPrompt = originalPrompt;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  if (isTshirtDesign) {
    enhancedPrompt = `high quality t-shirt design, vector style, bold graphics, clean background, print-ready, ${originalPrompt}`;
  } else if (isCharacter && isCyberpunk) {
    enhancedPrompt = `highly detailed cyberpunk character, neon lighting, futuristic, digital art, 4k quality, ${originalPrompt}`;
  } else if (isCharacter) {
    enhancedPrompt = `highly detailed character portrait, professional digital art, cinematic lighting, 4k quality, ${originalPrompt}`;
  } else if (isNature) {
    enhancedPrompt = `beautiful nature photography style, high resolution, vivid colors, professional quality, ${originalPrompt}`;
  } else if (isAbstract) {
    enhancedPrompt = `modern abstract art, vibrant colors, high contrast, artistic composition, ${originalPrompt}`;
  } else {
    enhancedPrompt = `high quality digital art, detailed, professional, ${originalPrompt}`;
  }
  
  return enhancedPrompt;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} editRequest - –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * @param {Object} previousImage - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {string} –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 */
function enhancePromptForEdit(editRequest, previousImage, style) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ URL –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  let baseDescription = "previous image";
  
  if (previousImage && previousImage.url) {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ URL Pollinations
    const urlMatch = previousImage.url.match(/prompt\/([^?]+)/);
    if (urlMatch) {
      baseDescription = decodeURIComponent(urlMatch[1]);
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –æ–±—ä–µ–¥–∏–Ω—è—è –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
  const combinedPrompt = `${baseDescription}, ${editRequest}`;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—Ç–æ–≤
  if (style === 'artistic' || combinedPrompt.toLowerCase().includes('—Ñ—É—Ç–±–æ–ª–∫–∞') || combinedPrompt.toLowerCase().includes('–ø—Ä–∏–Ω—Ç')) {
    return `High quality t-shirt design, vector style, bold graphics, streetwear aesthetic, clean background, print-ready: ${combinedPrompt}`;
  }
  
  return combinedPrompt;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Pollinations.ai API
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} imageId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<string>} URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function generateWithPollinations(prompt, imageId) {
  // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
  if (!prompt || prompt.trim() === '') {
    throw new Error('–ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  }
  
  const cleanPrompt = prompt.replace(/[^\w\s\-.,!?–∞-—è–ê-–Ø]/g, '').trim();
  console.log(`üé® [Pollinations] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: "${cleanPrompt}"`);
  
  if (cleanPrompt.length < 3) {
    throw new Error('–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏');
  }
  
  const imageUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(cleanPrompt)}?width=1024&height=1024&nologo=true&enhance=true&seed=${Date.now()}`;
  console.log(`üîó [Pollinations] –°–æ–∑–¥–∞–Ω URL: ${imageUrl}`);
  
  return imageUrl;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Craiyon (DALL-E Mini)
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} imageId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<string>} URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function generateWithCraiyon(prompt, imageId) {
  const https = require('https');
  
  const postData = JSON.stringify({
    prompt: prompt,
    version: "35s5hfwn9n78gb06"
  });
  
  const options = {
    hostname: 'backend.craiyon.com',
    port: 443,
    path: '/generate',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': postData.length,
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
  };
  
  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          if (response.images && response.images.length > 0) {
            const imageData = response.images[0];
            const imageUrl = `data:image/jpeg;base64,${imageData}`;
            resolve(imageUrl);
          } else {
            reject(new Error('–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Craiyon'));
          }
        } catch (error) {
          reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Craiyon: ${error.message}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Craiyon: ${error.message}`));
    });
    
    req.write(postData);
    req.end();
    
    setTimeout(() => {
      req.destroy();
      reject(new Error('–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Craiyon'));
    }, 30000);
  });
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é EMG-API
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} imageId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<string>} URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function generateWithEMG(prompt, style, imageId) {
  // API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –∫–ª—é—á–∞
  const apiUrl = "https://api.emg-api.com/easyimg";
  
  const response = await fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      prompt,
      style: style === 'realistic' ? 'photorealistic' : style,
      negative_prompt: "ugly, blurry, poor quality, distorted",
      width: 512,
      height: 512,
      steps: 25
    })
  });
  
  if (!response.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ EMG-API: ${response.status} ${response.statusText}`);
  }
  
  const data = await response.json();
  
  if (!data.url) {
    throw new Error('EMG-API –Ω–µ –≤–µ—Ä–Ω—É–ª URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  }
  
  // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const imageResponse = await fetch(data.url);
  const buffer = await imageResponse.buffer();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
  const outputPath = path.join(OUTPUT_DIR, `${imageId}-emg.jpg`);
  await fs.writeFile(outputPath, buffer);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
  return `/output/${imageId}-emg.jpg`;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} imageId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<string>} URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function generateWithProxyAPI(prompt, style, imageId) {
  // –ü—Ä–æ–∫—Å–∏—Ä—É—é—â–∏–π API –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –¥–∏—Ñ—Ñ—É–∑–∏–∏
  const apiUrl = "https://free-api.sd.portals.app/api/v1/txt2img";
  
  const response = await fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      prompt: prompt,
      negative_prompt: "ugly, blurry, poor quality, distorted",
      width: 512,
      height: 512,
      sampler_name: "DPM++ 2M Karras",
      steps: 25,
      cfg_scale: 7,
      seed: -1
    })
  });
  
  if (!response.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ProxyAPI: ${response.status} ${response.statusText}`);
  }
  
  const data = await response.json();
  
  if (!data.images || !data.images.length) {
    throw new Error('ProxyAPI –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  }
  
  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const base64Image = data.images[0];
  const imageBuffer = Buffer.from(base64Image, 'base64');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
  const outputPath = path.join(OUTPUT_DIR, `${imageId}-proxy.jpg`);
  await fs.writeFile(outputPath, imageBuffer);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
  return `/output/${imageId}-proxy.jpg`;
}

module.exports = {
  generateImage
};