/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —á–∞—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (3-5 —Å–µ–∫—É–Ω–¥)
 * –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–¥ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */

const axios = require('axios');

// –ë—ã—Å—Ç—Ä—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∞–º—ã–º –±—ã—Å—Ç—Ä—ã–º
const FAST_PROVIDERS = [
  {
    name: 'PythonG4F-Qwen',
    url: 'http://localhost:5004/python/chat',
    timeout: 7000,
    format: 'python',
    provider: 'Qwen_Qwen_2_5_Max'
  },
  {
    name: 'FastFreeChatEnhanced',
    url: 'http://localhost:5000/api/freechat/chat',
    timeout: 8000,
    format: 'local'
  }
];

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */
function formatLocalRequest(message) {
  return {
    message: message,
    provider: 'auto',
    timeout: 5000
  };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 */
async function getResponseFromProvider(provider, message) {
  try {
    let requestData;
    
    switch (provider.format) {
      case 'local':
        requestData = formatLocalRequest(message);
        break;
      case 'python':
        requestData = {
          message: message,
          provider: provider.provider || 'Qwen_Qwen_2_5_Max'
        };
        break;
      default:
        requestData = { message };
    }

    console.log(`‚ö° –ü—Ä–æ–±—É–µ–º ${provider.name}...`);
    
    const response = await axios.post(provider.url, requestData, {
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json'
      },
      timeout: provider.timeout
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
    let aiResponse = '';
    
    if (response.data) {
      if (response.data.reply) {
        aiResponse = response.data.reply;
      } else if (response.data.choices && response.data.choices[0]) {
        aiResponse = response.data.choices[0].message?.content || response.data.choices[0].text;
      } else if (response.data.response) {
        aiResponse = response.data.response;
      } else if (response.data.text) {
        aiResponse = response.data.text;
      } else if (typeof response.data === 'string') {
        aiResponse = response.data;
      }
    }

    if (aiResponse && aiResponse.trim()) {
      console.log(`‚úÖ ${provider.name} –æ—Ç–≤–µ—Ç–∏–ª –±—ã—Å—Ç—Ä–æ!`);
      return {
        success: true,
        response: aiResponse.trim(),
        provider: provider.name,
        model: 'gpt-3.5-turbo',
        responseTime: provider.timeout
      };
    }

    throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
    
  } catch (error) {
    console.log(`‚ùå ${provider.name} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª: ${error.message}`);
    return {
      success: false,
      error: error.message,
      provider: provider.name
    };
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
 * –ü—Ä–æ–±—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
 */
async function getSpeedOptimizedResponse(message) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤...');
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const promises = FAST_PROVIDERS.map(provider => 
      getResponseFromProvider(provider, message)
    );
    
    // –ñ–¥–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    const results = await Promise.allSettled(promises);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    for (const result of results) {
      if (result.status === 'fulfilled' && result.value.success) {
        console.log(`‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç ${result.value.provider}!`);
        return result.value;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
    const lastError = results[results.length - 1];
    return {
      success: false,
      error: '–í—Å–µ –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      provider: 'SpeedOptimized',
      details: lastError.reason || lastError.value?.error
    };
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ:', error);
    return {
      success: false,
      error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
      provider: 'SpeedOptimized'
    };
  }
}

module.exports = {
  getSpeedOptimizedResponse
};