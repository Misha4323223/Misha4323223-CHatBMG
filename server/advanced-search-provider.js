/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∞–Ω–∞–ª–∏–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
 */

const { searchWeb } = require('./web-search-provider');

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 */
async function performAdvancedSearch(query, options = {}) {
  const {
    searchType = 'comprehensive', // comprehensive, web, academic, news, images
    language = 'ru',
    maxResults = 10,
    includeAnalysis = true
  } = options;

  console.log(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: "${query}" (—Ç–∏–ø: ${searchType})`);

  try {
    let searchResults = [];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    switch (searchType) {
      case 'comprehensive':
        searchResults = await performComprehensiveSearch(query, language, maxResults);
        break;
      case 'web':
        searchResults = await performWebSearch(query, language, maxResults);
        break;
      case 'academic':
        searchResults = await performAcademicSearch(query, language, maxResults);
        break;
      case 'news':
        searchResults = await performNewsSearch(query, language, maxResults);
        break;
      case 'images':
        searchResults = await performImageSearch(query, language, maxResults);
        break;
      default:
        searchResults = await performWebSearch(query, language, maxResults);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    let analysis = null;
    if (includeAnalysis && searchResults.length > 0) {
      analysis = await analyzeSearchResults(searchResults, query);
    }

    return {
      success: true,
      query,
      searchType,
      results: searchResults,
      analysis,
      totalResults: searchResults.length,
      timestamp: new Date().toISOString()
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
    return {
      success: false,
      error: error.message,
      query,
      searchType
    };
  }
}

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
 */
async function performComprehensiveSearch(query, language, maxResults) {
  const results = [];
  
  try {
    // –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±-–ø–æ–∏—Å–∫
    const webResults = await performWebSearch(query, language, Math.ceil(maxResults * 0.6));
    results.push(...webResults);

    // –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
    const newsResults = await performNewsSearch(query, language, Math.ceil(maxResults * 0.2));
    results.push(...newsResults);

    // –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    const academicResults = await performAcademicSearch(query, language, Math.ceil(maxResults * 0.2));
    results.push(...academicResults);

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    return removeDuplicates(results).slice(0, maxResults);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
    return [];
  }
}

/**
 * –í–µ–±-–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo
 */
async function performWebSearch(query, language, maxResults) {
  try {
    const webSearchResults = await searchWeb(query, maxResults);
    
    return webSearchResults.map(result => ({
      ...result,
      source: 'web',
      relevanceScore: calculateRelevanceScore(result, query)
    }));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞:', error);
    return [];
  }
}

/**
 * –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
 */
async function performNewsSearch(query, language, maxResults) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    const newsQuery = `${query} site:news.google.com OR site:yandex.ru/news OR site:lenta.ru OR site:rbc.ru`;
    const newsResults = await searchWeb(newsQuery, maxResults);
    
    return newsResults.map(result => ({
      ...result,
      source: 'news',
      relevanceScore: calculateRelevanceScore(result, query),
      category: '–ù–æ–≤–æ—Å—Ç–∏'
    }));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
    return [];
  }
}

/**
 * –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
 */
async function performAcademicSearch(query, language, maxResults) {
  try {
    // –ü–æ–∏—Å–∫ –≤ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
    const academicQuery = `${query} site:scholar.google.com OR site:elibrary.ru OR site:cyberleninka.ru OR filetype:pdf`;
    const academicResults = await searchWeb(academicQuery, maxResults);
    
    return academicResults.map(result => ({
      ...result,
      source: 'academic',
      relevanceScore: calculateRelevanceScore(result, query),
      category: '–ù–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏'
    }));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
    return [];
  }
}

/**
 * –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
async function performImageSearch(query, language, maxResults) {
  try {
    // –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    const imageQuery = `${query} filetype:jpg OR filetype:png OR filetype:webp`;
    const imageResults = await searchWeb(imageQuery, maxResults);
    
    return imageResults.map(result => ({
      ...result,
      source: 'images',
      relevanceScore: calculateRelevanceScore(result, query),
      category: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    }));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    return [];
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é AI
 */
async function analyzeSearchResults(results, originalQuery) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const keyFacts = extractKeyFacts(results);
    const sources = results.map(r => r.source).filter((v, i, a) => a.indexOf(v) === i);
    const topResults = results.slice(0, 5);
    
    return {
      summary: generateSummary(results, originalQuery),
      keyFacts,
      sources,
      topResults: topResults.map(r => ({
        title: r.title,
        url: r.url,
        snippet: r.snippet,
        relevanceScore: r.relevanceScore
      })),
      searchDepth: results.length,
      confidence: calculateConfidenceScore(results)
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
    return null;
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤
 */
function extractKeyFacts(results) {
  const facts = [];
  
  results.forEach(result => {
    if (result.snippet) {
      // –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–∞—Ç—ã, –∏–º–µ–Ω–∞
      const numbers = result.snippet.match(/\d+[.,]?\d*/g);
      const dates = result.snippet.match(/\d{1,2}[./]\d{1,2}[./]\d{2,4}|\d{4}[-/]\d{1,2}[-/]\d{1,2}/g);
      
      if (numbers && numbers.length > 0) {
        facts.push(`–ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: ${numbers.join(', ')}`);
      }
      
      if (dates && dates.length > 0) {
        facts.push(`–î–∞—Ç—ã: ${dates.join(', ')}`);
      }
    }
  });
  
  return [...new Set(facts)].slice(0, 10); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –º–∞–∫—Å–∏–º—É–º 10
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ
 */
function generateSummary(results, query) {
  if (results.length === 0) {
    return `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;
  }
  
  const topResult = results[0];
  const totalSources = results.map(r => r.source).filter((v, i, a) => a.indexOf(v) === i).length;
  
  return `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ ${totalSources} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. ` +
         `–ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "${topResult.title}" (${topResult.url}).`;
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 */
function calculateRelevanceScore(result, query) {
  let score = 0;
  const queryWords = query.toLowerCase().split(' ');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  if (result.title) {
    const titleWords = result.title.toLowerCase();
    queryWords.forEach(word => {
      if (titleWords.includes(word)) score += 3;
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
  if (result.snippet) {
    const snippetWords = result.snippet.toLowerCase();
    queryWords.forEach(word => {
      if (snippetWords.includes(word)) score += 1;
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
  if (result.url) {
    const urlWords = result.url.toLowerCase();
    queryWords.forEach(word => {
      if (urlWords.includes(word)) score += 2;
    });
  }
  
  return Math.min(score / queryWords.length, 10); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç 0 –¥–æ 10
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
 */
function calculateConfidenceScore(results) {
  if (results.length === 0) return 0;
  
  const avgRelevance = results.reduce((sum, r) => sum + (r.relevanceScore || 0), 0) / results.length;
  const sourceVariety = results.map(r => r.source).filter((v, i, a) => a.indexOf(v) === i).length;
  
  return Math.min((avgRelevance * 0.7 + sourceVariety * 0.3) * 10, 100);
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 */
function removeDuplicates(results) {
  const seen = new Set();
  return results.filter(result => {
    const key = result.url || result.title;
    if (seen.has(key)) return false;
    seen.add(key);
    return true;
  });
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */
async function searchRealTimeWeb(query, options = {}) {
  const { 
    timeRange = 'recent', // recent, day, week, month, year
    region = 'ru'
  } = options;

  try {
    let timeFilter = '';
    switch (timeRange) {
      case 'day':
        timeFilter = ' after:' + new Date(Date.now() - 24*60*60*1000).toISOString().split('T')[0];
        break;
      case 'week':
        timeFilter = ' after:' + new Date(Date.now() - 7*24*60*60*1000).toISOString().split('T')[0];
        break;
      case 'month':
        timeFilter = ' after:' + new Date(Date.now() - 30*24*60*60*1000).toISOString().split('T')[0];
        break;
    }

    const enhancedQuery = query + timeFilter;
    return await performWebSearch(enhancedQuery, region, 15);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:', error);
    return [];
  }
}

module.exports = {
  performAdvancedSearch,
  searchRealTimeWeb,
  performWebSearch,
  performNewsSearch,
  performAcademicSearch,
  performImageSearch
};