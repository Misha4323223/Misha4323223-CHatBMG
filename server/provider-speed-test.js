/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤—Å–µ—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 */

const axios = require('axios');

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const PROVIDERS_TO_TEST = [
  // –ù–∞—Å—Ç–æ—è—â–∏–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
  { name: 'FastFreeChatEnhanced', endpoint: '/api/freechat/chat', type: 'real_ai' },
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
  { name: 'G4F-You', endpoint: '/api/g4f/chat', provider: 'You', type: 'standard' },
  { name: 'G4F-Qwen', endpoint: '/api/g4f/chat', provider: 'qwen', type: 'standard' },
  { name: 'G4F-Phind', endpoint: '/api/g4f/chat', provider: 'phind', type: 'standard' },
  { name: 'G4F-Claude', endpoint: '/api/g4f/chat', provider: 'claude', type: 'standard' },
  { name: 'G4F-Gemini', endpoint: '/api/g4f/chat', provider: 'gemini', type: 'standard' },
  
  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
  { name: 'DeepSeek', endpoint: '/api/deepspeek/chat', type: 'specialized' },
  { name: 'Claude-Direct', endpoint: '/api/claude/chat', type: 'specialized' },
  { name: 'DeepInfra', endpoint: '/api/deepinfra/chat', type: 'specialized' },
  { name: 'Ollama-Local', endpoint: '/api/ollama/chat', type: 'specialized' }
];

// –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const TEST_MESSAGE = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?";

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 */
async function testProvider(provider) {
  const startTime = performance.now();
  
  try {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${provider.name}...`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    const requestData = {
      message: TEST_MESSAGE
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    if (provider.provider) {
      requestData.provider = provider.provider;
    }
    
    const response = await axios.post(`http://localhost:5000${provider.endpoint}`, requestData, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
    });
    
    const endTime = performance.now();
    const responseTime = Math.round(endTime - startTime);
    
    if (response.status === 200 && response.data) {
      let responseText = '';
      let actualProvider = provider.name;
      let model = 'Unknown';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
      if (response.data.response) {
        responseText = response.data.response;
        actualProvider = response.data.provider || provider.name;
        model = response.data.model || 'Unknown';
      } else if (response.data.success && response.data.response) {
        responseText = response.data.response;
        actualProvider = response.data.provider || provider.name;
        model = response.data.model || 'Unknown';
      } else if (typeof response.data === 'string') {
        responseText = response.data;
      }
      
      if (responseText && responseText.length > 10) {
        return {
          name: provider.name,
          type: provider.type,
          status: 'success',
          responseTime: responseTime,
          responseLength: responseText.length,
          actualProvider: actualProvider,
          model: model,
          preview: responseText.substring(0, 100) + (responseText.length > 100 ? '...' : '')
        };
      } else {
        return {
          name: provider.name,
          type: provider.type,
          status: 'empty_response',
          responseTime: responseTime,
          error: '–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'
        };
      }
    } else {
      return {
        name: provider.name,
        type: provider.type,
        status: 'http_error',
        responseTime: responseTime,
        error: `HTTP ${response.status}`
      };
    }
    
  } catch (error) {
    const endTime = performance.now();
    const responseTime = Math.round(endTime - startTime);
    
    return {
      name: provider.name,
      type: provider.type,
      status: 'error',
      responseTime: responseTime,
      error: error.message
    };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */
async function testAllProviders() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—Å–µ—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...');
  console.log(`üìù –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${TEST_MESSAGE}"`);
  console.log(`üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${PROVIDERS_TO_TEST.length}`);
  console.log('‚ïê'.repeat(80));
  
  const results = [];
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
  for (const provider of PROVIDERS_TO_TEST) {
    const result = await testProvider(provider);
    results.push(result);
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
    if (result.status === 'success') {
      console.log(`‚úÖ ${result.name} (${result.type}): ${result.responseTime}–º—Å`);
      console.log(`   üìã –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${result.actualProvider} | –ú–æ–¥–µ–ª—å: ${result.model}`);
      console.log(`   üí¨ –û—Ç–≤–µ—Ç: ${result.preview}`);
    } else {
      console.log(`‚ùå ${result.name} (${result.type}): ${result.responseTime}–º—Å - ${result.error}`);
    }
    console.log('‚îÄ'.repeat(80));
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
  console.log('‚ïê'.repeat(80));
  
  const successful = results.filter(r => r.status === 'success');
  const failed = results.filter(r => r.status !== 'success');
  
  console.log(`‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${successful.length}`);
  console.log(`‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${failed.length}`);
  
  if (successful.length > 0) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
    successful.sort((a, b) => a.responseTime - b.responseTime);
    
    console.log('\nüèÜ –¢–û–ü –ë–´–°–¢–†–´–• –ü–†–û–í–ê–ô–î–ï–†–û–í:');
    successful.slice(0, 5).forEach((result, index) => {
      console.log(`${index + 1}. ${result.name}: ${result.responseTime}–º—Å (${result.actualProvider})`);
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    const byType = {};
    successful.forEach(result => {
      if (!byType[result.type]) byType[result.type] = [];
      byType[result.type].push(result);
    });
    
    console.log('\nüìà –°–†–ï–î–ù–Ø–Ø –°–ö–û–†–û–°–¢–¨ –ü–û –¢–ò–ü–ê–ú:');
    Object.keys(byType).forEach(type => {
      const avg = Math.round(byType[type].reduce((sum, r) => sum + r.responseTime, 0) / byType[type].length);
      console.log(`${type}: ${avg}–º—Å (${byType[type].length} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤)`);
    });
  }
  
  console.log('‚ïê'.repeat(80));
  console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  
  return results;
}

module.exports = {
  testAllProviders,
  testProvider,
  PROVIDERS_TO_TEST
};