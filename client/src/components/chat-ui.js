// BOOOMERANGS Smart Chat - UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

class ChatUI {
    constructor(chatCore) {
        this.core = chatCore;
        this.elements = {};
        this.messagePool = new MessagePool();
        this.virtualizer = new VirtualScroller();
        
        this.init();
    }

    init() {
        this.cacheElements();
        this.setupEventListeners();
        this.bindStateChanges();
        
        this.core.logger.interface('ChatUI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    cacheElements() {
        this.elements = {
            sidebar: document.querySelector('.sidebar'),
            messagesArea: document.querySelector('.messages-area'),
            messageInput: document.querySelector('.message-input'),
            sendButton: document.querySelector('.send-button'),
            chatHistory: document.querySelector('.chat-history'),
            sidebarToggle: document.querySelector('.sidebar-toggle'),
            newChatBtn: document.querySelector('.new-chat-btn')
        };
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.elements.sendButton?.addEventListener('click', () => this.handleSendMessage());
        this.elements.messageInput?.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.handleSendMessage();
            }
        });

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        this.elements.messageInput?.addEventListener('input', (e) => {
            this.core.emit('draftChange', e.target.value);
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        this.elements.newChatBtn?.addEventListener('click', () => {
            this.core.createNewSession();
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        this.elements.sidebarToggle?.addEventListener('click', () => {
            this.toggleSidebar();
        });

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch (e.key) {
                    case 'n':
                        e.preventDefault();
                        this.core.createNewSession();
                        break;
                    case 'k':
                        e.preventDefault();
                        this.elements.messageInput?.focus();
                        break;
                }
            }
        });
    }

    // –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    bindStateChanges() {
        this.core.on('stateChange', ({ newState }) => {
            this.updateUI(newState);
        });

        this.core.on('sessionSwitched', ({ messages }) => {
            this.renderMessages(messages);
        });

        this.core.on('messageAdded', (message) => {
            this.addMessageToUI(message);
        });

        this.core.on('sessionCreated', () => {
            this.updateSessionsList();
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    async handleSendMessage() {
        const text = this.elements.messageInput?.value.trim();
        if (!text) return;

        try {
            this.elements.messageInput.value = '';
            this.updateSendButton(true);
            
            await this.core.sendMessage(text);
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        } finally {
            this.updateSendButton(false);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    updateUI(state) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        this.updateSendButton(state.isLoading);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        if (this.elements.messageInput && this.elements.messageInput.value !== state.draft) {
            this.elements.messageInput.value = state.draft;
        }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
    renderMessages(messages) {
        if (!this.elements.messagesArea) return;

        // –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        this.elements.messagesArea.innerHTML = '';

        if (messages.length === 0) {
            this.showWelcomeScreen();
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
        if (messages.length > 100) {
            this.virtualizer.render(messages, this.elements.messagesArea);
        } else {
            this.renderMessagesDirectly(messages);
        }

        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        setTimeout(() => this.scrollToBottom(), 100);
    }

    // –ü—Ä—è–º–æ–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
    renderMessagesDirectly(messages) {
        const fragment = document.createDocumentFragment();
        
        messages.forEach(message => {
            const messageElement = this.createMessageElement(message);
            fragment.appendChild(messageElement);
        });
        
        this.elements.messagesArea.appendChild(fragment);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI
    addMessageToUI(message) {
        if (!this.elements.messagesArea) return;

        // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const welcomeScreen = this.elements.messagesArea.querySelector('.welcome-screen');
        if (welcomeScreen) {
            welcomeScreen.remove();
        }

        const messageElement = this.createMessageElement(message);
        this.elements.messagesArea.appendChild(messageElement);
        
        setTimeout(() => this.scrollToBottom(), 100);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—É–ª–æ–º –æ–±—ä–µ–∫—Ç–æ–≤
    createMessageElement(message) {
        const messageEl = this.messagePool.get();
        
        messageEl.className = `message ${message.sender}`;
        messageEl.innerHTML = `
            <div class="message-content">
                ${this.sanitizeHTML(message.text)}
            </div>
            <div class="message-meta">
                ${this.formatTimestamp(message.timestamp)}
                ${message.provider ? ` ‚Ä¢ ${message.provider}` : ''}
                ${message.model ? ` ‚Ä¢ ${message.model}` : ''}
            </div>
        `;
        
        return messageEl;
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è HTML
    sanitizeHTML(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML.replace(/\n/g, '<br>');
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    formatTimestamp(timestamp) {
        if (!timestamp) return '';
        
        const date = new Date(timestamp);
        return date.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }

    // –ü–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    showWelcomeScreen() {
        this.elements.messagesArea.innerHTML = `
            <div class="welcome-screen">
                <div class="welcome-logo">ü™É</div>
                <h1 class="welcome-title">BOOOMERANGS</h1>
                <p class="welcome-subtitle">
                    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π AI —á–∞—Ç!<br>
                    –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ.
                </p>
            </div>
        `;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π
    async updateSessionsList() {
        const sessions = this.core.getState().sessions;
        
        if (!this.elements.chatHistory) return;

        this.elements.chatHistory.innerHTML = sessions.map(session => `
            <div class="chat-item ${session.id === this.core.getState().currentSessionId ? 'active' : ''}" 
                 data-session-id="${session.id}"
                 onclick="chatUI.switchToSession(${session.id})">
                <div class="chat-title">${this.escapeHTML(session.title)}</div>
                <div class="chat-preview">${this.escapeHTML(session.lastMessage || '–ù–æ–≤—ã–π —á–∞—Ç')}</div>
            </div>
        `).join('');
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ—Å—Å–∏—é
    switchToSession(sessionId) {
        this.core.switchToSession(sessionId);
        this.updateSessionsList(); // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    toggleSidebar() {
        this.elements.sidebar?.classList.toggle('hidden');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
        const inputArea = document.querySelector('.input-area');
        if (inputArea) {
            inputArea.style.left = this.elements.sidebar?.classList.contains('hidden') ? '0' : '300px';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    updateSendButton(isLoading) {
        if (!this.elements.sendButton) return;
        
        this.elements.sendButton.disabled = isLoading;
        this.elements.sendButton.innerHTML = isLoading ? '‚è≥' : '‚û§';
    }

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∏–∑—É
    scrollToBottom() {
        if (this.elements.messagesArea) {
            this.elements.messagesArea.scrollTop = this.elements.messagesArea.scrollHeight;
        }
    }

    // –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
    showError(message) {
        console.error(message);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
    escapeHTML(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –ü—É–ª –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏)
class MessagePool {
    constructor() {
        this.pool = [];
        this.maxSize = 50;
    }

    get() {
        if (this.pool.length > 0) {
            return this.pool.pop();
        }
        
        const element = document.createElement('div');
        return element;
    }

    release(element) {
        if (this.pool.length < this.maxSize) {
            element.innerHTML = '';
            element.className = '';
            this.pool.push(element);
        }
    }
}

// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–µ—Ä –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
class VirtualScroller {
    constructor() {
        this.itemHeight = 80; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.visibleRange = { start: 0, end: 0 };
    }

    render(items, container) {
        const containerHeight = container.clientHeight;
        const visibleCount = Math.ceil(containerHeight / this.itemHeight) + 5; // –ë—É—Ñ–µ—Ä
        
        const scrollTop = container.scrollTop;
        const startIndex = Math.floor(scrollTop / this.itemHeight);
        const endIndex = Math.min(startIndex + visibleCount, items.length);
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º spacer —Å–≤–µ—Ä—Ö—É
        const topSpacer = document.createElement('div');
        topSpacer.style.height = `${startIndex * this.itemHeight}px`;
        container.appendChild(topSpacer);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for (let i = startIndex; i < endIndex; i++) {
            const messageElement = this.createMessageElement(items[i]);
            container.appendChild(messageElement);
        }
        
        // –°–æ–∑–¥–∞–µ–º spacer —Å–Ω–∏–∑—É
        const bottomSpacer = document.createElement('div');
        bottomSpacer.style.height = `${(items.length - endIndex) * this.itemHeight}px`;
        container.appendChild(bottomSpacer);
    }

    createMessageElement(message) {
        const div = document.createElement('div');
        div.className = `message ${message.sender}`;
        div.style.height = `${this.itemHeight}px`;
        div.innerHTML = `
            <div class="message-content">${message.text}</div>
            <div class="message-meta">${new Date(message.timestamp).toLocaleTimeString()}</div>
        `;
        return div;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.ChatUI = ChatUI;