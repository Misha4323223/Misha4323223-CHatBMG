import g4f
import sys

def print_providers():
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö"""
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã G4F:")
    for provider in g4f.Provider.__all__:
        try:
            provider_class = getattr(g4f.Provider, provider)
            working = getattr(provider_class, "working", False)
            status = "‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç" if working else "‚ùå –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            needs_auth = getattr(provider_class, "needs_auth", False)
            auth_status = "üîë –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" if needs_auth else "üîì –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            print(f"- {provider}: {status}, {auth_status}")
        except:
            print(f"- {provider}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

def chat_with_g4f(message, model="gpt-3.5-turbo"):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É G4F –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
    print(f"\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è [{model}]: {message}")

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏
    messages = [{"role": "user", "content": message}]
    
    # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    providers_to_try = [
        g4f.Provider.DeepAi,
        g4f.Provider.Aichat,
        g4f.Provider.You,
        g4f.Provider.Bing,
        g4f.Provider.GptGo,
        g4f.Provider.FreeGpt
    ]
    
    for provider in providers_to_try:
        if not getattr(provider, "working", False):
            continue
            
        try:
            print(f"–ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider.__name__}")
            response = g4f.ChatCompletion.create(
                model=model,
                messages=messages,
                provider=provider
            )
            
            if response:
                print(f"\n–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {provider.__name__}")
                return response
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ {provider.__name__}: {str(e)}")
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ G4F."

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞"""
    print("=" * 50)
    print("G4F –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π ChatGPT –±–æ—Ç")
    print("=" * 50)
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–≤—ã—Ö–æ–¥', 'exit' –∏–ª–∏ 'quit', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("=" * 50)
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
    print_providers()
    
    while True:
        try:
            user_input = input("\n–í—ã: ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥
            if user_input.lower() in ["–≤—ã—Ö–æ–¥", "exit", "quit"]:
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if user_input.lower() in ["–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã", "providers"]:
                print_providers()
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç G4F
            response = chat_with_g4f(user_input)
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
            print(f"\n–ë–æ—Ç: {response}")
            
        except KeyboardInterrupt:
            print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()