/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */

const axios = require('axios');

async function testProviders() {
  const providers = [
    { name: 'ChatFree', url: 'http://localhost:5000/api/chatfree/chat' },
    { name: 'FreeChat Enhanced', url: 'http://localhost:5000/api/freechat/chat' },
    { name: 'Direct AI', url: 'http://localhost:5000/api/direct-ai/chat' },
    { name: 'G4F Qwen', url: 'http://localhost:5000/api/g4f/chat', data: { provider: 'qwen' } },
    { name: 'G4F You', url: 'http://localhost:5000/api/g4f/chat', data: { provider: 'You' } }
  ];

  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...\n');

  for (const provider of providers) {
    const start = Date.now();
    try {
      const requestData = { message: '–ü—Ä–∏–≤–µ—Ç!', ...provider.data };
      const response = await axios.post(provider.url, requestData, { timeout: 10000 });
      const duration = Date.now() - start;
      
      if (response.data && response.data.response) {
        console.log(`‚úÖ ${provider.name}: ${duration}–º—Å`);
        console.log(`   üìù –û—Ç–≤–µ—Ç: ${response.data.response.substring(0, 60)}...`);
        console.log(`   üîß –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${response.data.provider || 'Unknown'}`);
      } else {
        console.log(`‚ö†Ô∏è ${provider.name}: ${duration}–º—Å (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)`);
      }
    } catch (error) {
      const duration = Date.now() - start;
      console.log(`‚ùå ${provider.name}: ${duration}–º—Å - ${error.message}`);
    }
    console.log('');
  }
}

testProviders();