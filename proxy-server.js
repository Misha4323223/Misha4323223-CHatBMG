import express from "express";
import dotenv from "dotenv";
import fetch from "node-fetch"; // –µ—Å–ª–∏ fetch –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–∏: npm install node-fetch
import path from 'path';
import { fileURLToPath } from 'url';
import crypto from 'crypto';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config();

const app = express();
app.use(express.json());
app.use(express.static('./'));

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è access_token
const ACCESS_TOKEN = process.env.ACCESS_TOKEN;
if (!ACCESS_TOKEN) {
  console.warn("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ACCESS_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
}

// üì° –ü—Ä–æ–∫—Å–∏-–º–∞—Ä—à—Ä—É—Ç –¥–ª—è OpenAI API
app.post("/api/chat", async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    const token = ACCESS_TOKEN || req.headers.authorization?.split(" ")[1];
    
    if (!token) {
      return res.status(401).json({ error: "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞" });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage = req.body.message || 
                       (req.body.messages && req.body.messages.find(m => m.role === 'user')?.content) || 
                       "";
    
    if (!userMessage) {
      return res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT API –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const response = await fetch("https://chat.openai.com/backend-api/conversation", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
      },
      body: JSON.stringify({
        action: "next",
        messages: [
          {
            id: crypto.randomUUID(),
            author: { role: "user" },
            content: { content_type: "text", parts: [userMessage] }
          }
        ],
        model: "text-davinci-002-render-sha",
        parent_message_id: crypto.randomUUID()
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("ChatGPT API error:", errorText);
      
      return res.status(response.status).json({ 
        error: `OpenAI error ${response.status}`,
        message: errorText
      });
    }

    const data = await response.json();
    res.json(data);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:", error);
    res.status(500).json({ 
      error: "–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞", 
      message: error.message 
    });
  }
});

// –ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get("/", (req, res) => {
  res.send("–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç üî•");
});

// üöÄ –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:${PORT}`);
  console.log(`–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É`);
});