/**
 * Python Provider Routes - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Python G4F —Å–µ—Ä–≤–µ—Ä–æ–º
 */

/**
 * –í—ã–∑–æ–≤ Python AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} provider - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç AI
 */
async function callPythonAI(message, provider = 'Qwen_Qwen_2_5_Max') {
  try {
    console.log(`üêç [PYTHON_AI] –í—ã–∑—ã–≤–∞–µ–º Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${provider}...`);
    
    const response = await fetch('http://localhost:5004/python/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: message,
        provider: provider
      }),
      timeout: 15000
    });

    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ [PYTHON_AI] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ${provider}`);
      return data;
    } else {
      console.log(`‚ùå [PYTHON_AI] –û—à–∏–±–∫–∞ HTTP ${response.status} –æ—Ç ${provider}`);
      return null;
    }
  } catch (error) {
    console.log(`‚ùå [PYTHON_AI] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É:`, error.message);
    return null;
  }
}

module.exports = {
  callPythonAI
};