#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ G4F –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
"""

import g4f
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)

async def test_provider(provider_name):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
    try:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
        
        provider = getattr(g4f.Provider, provider_name)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å
        response = await g4f.ChatCompletion.create_async(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"}],
            provider=provider
        )
        
        result = str(response).strip()
        if result and len(result) > 5:
            print(f"‚úÖ {provider_name}: {result[:100]}...")
            return True
        else:
            print(f"‚ùå {provider_name}: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå {provider_name}: –û—à–∏–±–∫–∞ - {str(e)}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    free_providers = ['FreeGpt', 'You', 'Blackbox', 'Liaobots', 'DDG', 'Phind']
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    
    working_providers = []
    
    for provider in free_providers:
        try:
            success = await test_provider(provider)
            if success:
                working_providers.append(provider)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {provider}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(free_providers)}")
    print(f"–†–∞–±–æ—Ç–∞—é—Ç: {len(working_providers)}")
    print(f"–†–∞–±–æ—á–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {working_providers}")
    
    if not working_providers:
        print("\n‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–µ—Ç–∏/—Ñ–∞–π—Ä–≤–æ–ª–∞")
        print("- –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        print("- –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    return working_providers

if __name__ == '__main__':
    asyncio.run(main())