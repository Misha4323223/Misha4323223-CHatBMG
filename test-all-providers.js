/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ CHatBMG
 */

import fetch from 'node-fetch';

// –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const PROVIDERS_TO_TEST = [
  'Qwen_Qwen_2_5_Max',
  'Claude',
  'GeminiPro', 
  'Phind',
  'You',
  'DeepSeek',
  'PerplexityApi',
  'AItianhu',
  'Liaobots',
  'OpenaiChat',
  'ChatGpt',
  'Anthropic',
  'DeepInfra',
  'HuggingChat',
  'Groq',
  'Blackbox',
  'Pi',
  'Poe',
  'AIChatFree',
  'ChatGptt'
];

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const TEST_MESSAGES = [
  'Hello, can you respond?',
  '–ü—Ä–∏–≤–µ—Ç, —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?',
  '2+2=?'
];

async function testProvider(provider, message) {
  try {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${provider}...`);
    
    const response = await fetch('http://localhost:5001/python/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        message: message,
        provider: provider
      }),
      timeout: 15000
    });

    if (response.ok) {
      const data = await response.json();
      
      if (data.response && data.response.length > 10) {
        console.log(`‚úÖ ${provider}: –†–ê–ë–û–¢–ê–ï–¢ - "${data.response.substring(0, 50)}..."`);
        return { provider, status: 'SUCCESS', response: data.response.substring(0, 100) };
      } else {
        console.log(`‚ö†Ô∏è ${provider}: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç`);
        return { provider, status: 'EMPTY_RESPONSE', response: data.response || 'No response' };
      }
    } else {
      console.log(`‚ùå ${provider}: HTTP ${response.status}`);
      return { provider, status: 'HTTP_ERROR', error: `HTTP ${response.status}` };
    }
    
  } catch (error) {
    console.log(`‚ùå ${provider}: ${error.message}`);
    return { provider, status: 'ERROR', error: error.message };
  }
}

async function testAllProviders() {
  console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• AI –ü–†–û–í–ê–ô–î–ï–†–û–í\n');
  
  const results = [];
  const workingProviders = [];
  const failedProviders = [];
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  for (const provider of PROVIDERS_TO_TEST) {
    const result = await testProvider(provider, 'Hello, test response');
    results.push(result);
    
    if (result.status === 'SUCCESS') {
      workingProviders.push(provider);
    } else {
      failedProviders.push(provider);
    }
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
  console.log(`‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${workingProviders.length}`);
  console.log(`‚ùå –ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${failedProviders.length}`);
  
  console.log('\n‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –ü–†–û–í–ê–ô–î–ï–†–´:');
  workingProviders.forEach(provider => console.log(`  - ${provider}`));
  
  console.log('\n‚ùå –ù–ï–†–ê–ë–û–¢–ê–Æ–©–ò–ï –ü–†–û–í–ê–ô–î–ï–†–´:');
  failedProviders.forEach(provider => console.log(`  - ${provider}`));
  
  console.log('\nüéØ –õ–£–ß–®–ò–ï –ü–†–û–í–ê–ô–î–ï–†–´ –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:');
  const bestProviders = workingProviders.slice(0, 5);
  bestProviders.forEach(provider => console.log(`  üåü ${provider}`));
  
  return results;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testAllProviders().then(results => {
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
});